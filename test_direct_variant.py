#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

import json
import psycopg2.extras
from database.connection import DatabaseConnection

def test_direct_variant_load():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""

    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ –ë–î...")

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        db = DatabaseConnection()
        conn = db.get_connection()
        cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        cursor.execute("""
            SELECT s.*, m.name as model_name, m.article as model_article
            FROM specifications s
            JOIN models m ON s.model_id = m.id
            WHERE s.id = %s
        """, (5,))

        variant = cursor.fetchone()

        if variant:
            print(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç –Ω–∞–π–¥–µ–Ω: {variant['variant_name']}")
            print(f"üìä –¢–∏–ø cutting_parts: {type(variant.get('cutting_parts'))}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            cutting_parts = variant.get('cutting_parts', [])
            print(f"üîç cutting_parts –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {cutting_parts}")

            if isinstance(cutting_parts, str):
                print("üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏–º–µ–Ω—è–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥...")
                cutting_parts = json.loads(cutting_parts) if cutting_parts else []
                print(f"‚úÖ cutting_parts –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {len(cutting_parts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
                if cutting_parts:
                    first_part = cutting_parts[0]
                    name = first_part.get('name', '')
                    print(f"üéØ –ü–µ—Ä–≤–∞—è –¥–µ—Ç–∞–ª—å: {name}")
                    print("‚úÖ –ú–µ—Ç–æ–¥ .get() —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")

            else:
                print("üìù cutting_parts —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º")
                if cutting_parts:
                    first_part = cutting_parts[0]
                    name = first_part.get('name', '')
                    print(f"üéØ –ü–µ—Ä–≤–∞—è –¥–µ—Ç–∞–ª—å: {name}")

            return True
        else:
            print("‚ùå –í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False

        cursor.close()
        conn.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = test_direct_variant_load()
    if success:
        print("üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç!")
    else:
        print("üí• –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!")