#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏
"""
import sys
import time
from PyQt6.QtWidgets import QApplication, QMessageBox
from PyQt6.QtCore import QTimer
from PyQt6.QtTest import QTest

from database.connection import DatabaseConnection
from ui.references.model_specification_form_v4 import ModelSpecificationFormV4

def test_lasting_type():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏...")

    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)

    db = DatabaseConnection()

    # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏
    conn = db.get_connection()
    cursor = conn.cursor()

    cursor.execute("SELECT id, name FROM lasting_types LIMIT 5")
    lasting_types = cursor.fetchall()

    print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏:")
    for lasting_id, lasting_name in lasting_types:
        print(f"  - {lasting_name} (ID: {lasting_id})")

    if not lasting_types:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞—Ç—è–∂–∫–∏")
        cursor.close()
        db.put_connection(conn)
        return False

    # –í—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_lasting_id = lasting_types[0][0]
    test_lasting_name = lasting_types[0][1]

    cursor.close()
    db.put_connection(conn)

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –•–ª—ã–Ω–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (ID: 7)
    model_form = ModelSpecificationFormV4(model_id=7, is_variant=False)
    model_form.show()

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
    app.processEvents()
    time.sleep(2)

    print("‚úì –§–æ—Ä–º–∞ –º–æ–¥–µ–ª–∏ –•–ª—ã–Ω–æ–≤ –æ—Ç–∫—Ä—ã—Ç–∞")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏"
    parameters_tab_index = None
    for i in range(model_form.tabs.count()):
        if "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã" in model_form.tabs.tabText(i):
            model_form.tabs.setCurrentIndex(i)
            parameters_tab_index = i
            break

    if parameters_tab_index is not None:
        print("‚úì –ü–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏'")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏
        index = model_form.lasting_combo.findData(test_lasting_id)
        if index >= 0:
            model_form.lasting_combo.setCurrentIndex(index)
            print(f"‚úì –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏: {test_lasting_name} (ID: {test_lasting_id})")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ —Å ID {test_lasting_id}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å —Å —Ç–∏–ø–æ–º –∑–∞—Ç—è–∂–∫–∏...")

        try:
            model_form.save_model()
            print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    else:
        print("‚ùå –í–∫–ª–∞–¥–∫–∞ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    model_form.close()

    print("\\n=== –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = db.get_connection()
    cursor = conn.cursor()

    cursor.execute("""
        SELECT lasting_type_id
        FROM specifications
        WHERE model_id = 7
        ORDER BY created_at DESC
        LIMIT 1
    """)

    result = cursor.fetchone()
    if result:
        saved_lasting_id = result[0]
        print(f"\\nüìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏: {saved_lasting_id}")

        if saved_lasting_id == test_lasting_id:
            print("\\n‚úÖ –£–°–ü–ï–•: –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print(f"\\n‚ö†Ô∏è  –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –û–∂–∏–¥–∞–ª—Å—è: {test_lasting_id}, –ø–æ–ª—É—á–µ–Ω: {saved_lasting_id}")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏
        if saved_lasting_id:
            cursor.execute("SELECT name FROM lasting_types WHERE id = %s", (saved_lasting_id,))
            name_result = cursor.fetchone()
            if name_result:
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {name_result[0]}")

    else:
        print("\\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é")

    cursor.close()
    db.put_connection(conn)

    print("\\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    success = test_lasting_type()
    if success:
        print("\\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ —Ç–µ—Å—Ç–µ!")

if __name__ == "__main__":
    main()