#!/usr/bin/env python
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –•–ª—ã–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
from database.connection import DatabaseConnection
import json

def check_khlynov_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –•–ª—ã–Ω–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –•–ª—ã–Ω–æ–≤...")

    db = DatabaseConnection()
    conn = db.get_connection()

    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        return

    try:
        cursor = conn.cursor()

        # –ò—â–µ–º –º–æ–¥–µ–ª—å –•–ª—ã–Ω–æ–≤
        cursor.execute("""
            SELECT m.id, m.name, m.article, m.model_type, m.gender
            FROM models m
            WHERE m.name ILIKE %s OR m.article ILIKE %s
        """, ('%—Ö–ª—ã–Ω–æ–≤%', '%—Ö–ª—ã–Ω–æ–≤%'))

        models = cursor.fetchall()

        if not models:
            print("‚ùå –ú–æ–¥–µ–ª—å –•–ª—ã–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        for model in models:
            model_id, name, article, model_type, gender = model
            print(f"\nüìã –ú–æ–¥–µ–ª—å: {name} (ID: {model_id})")
            print(f"   –ê—Ä—Ç–∏–∫—É–ª: {article}")
            print(f"   –¢–∏–ø: {model_type}")
            print(f"   –ü–æ–ª: {gender}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            cursor.execute("""
                SELECT s.id, s.parameters_data, s.created_at
                FROM specifications s
                WHERE s.model_id = %s
                ORDER BY s.created_at DESC
            """, (model_id,))

            specs = cursor.fetchall()

            if not specs:
                print("   ‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                continue

            print(f"\n   üìä –ù–∞–π–¥–µ–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {len(specs)}")

            for i, spec in enumerate(specs, 1):
                spec_id, parameters_data, created_at = spec
                print(f"\n   üìÑ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è #{i} (ID: {spec_id})")
                print(f"      –°–æ–∑–¥–∞–Ω–∞: {created_at}")

                if parameters_data:
                    try:
                        params = json.loads(parameters_data) if isinstance(parameters_data, str) else parameters_data

                        print("      üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:")

                        # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
                        if 'perforation_ids' in params:
                            perf_ids = params['perforation_ids']
                            if perf_ids:
                                print(f"         üî∏ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ (IDs): {perf_ids}")

                                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
                                if isinstance(perf_ids, list) and perf_ids:
                                    placeholders = ','.join(['%s'] * len(perf_ids))
                                    cursor.execute(f"""
                                        SELECT id, name FROM perforation_types
                                        WHERE id IN ({placeholders})
                                    """, perf_ids)

                                    perf_types = cursor.fetchall()
                                    for perf_id, perf_name in perf_types:
                                        print(f"           - {perf_name} (ID: {perf_id})")
                            else:
                                print("         üî∏ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

                        # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏
                        if 'lining_ids' in params:
                            lining_ids = params['lining_ids']
                            if lining_ids:
                                print(f"         üî∏ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏ (IDs): {lining_ids}")

                                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–æ–¥–∫–ª–∞–¥–∫–∏
                                if isinstance(lining_ids, list) and lining_ids:
                                    placeholders = ','.join(['%s'] * len(lining_ids))
                                    cursor.execute(f"""
                                        SELECT id, name FROM lining_types
                                        WHERE id IN ({placeholders})
                                    """, lining_ids)

                                    lining_types = cursor.fetchall()
                                    for lining_id, lining_name in lining_types:
                                        print(f"           - {lining_name} (ID: {lining_id})")
                            else:
                                print("         üî∏ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏: –Ω–µ –≤—ã–±—Ä–∞–Ω—ã")

                        # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏
                        if 'lasting_type_id' in params:
                            lasting_id = params['lasting_type_id']
                            if lasting_id:
                                cursor.execute("""
                                    SELECT name FROM lasting_types WHERE id = %s
                                """, (lasting_id,))

                                lasting_result = cursor.fetchone()
                                if lasting_result:
                                    print(f"         üî∏ –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏: {lasting_result[0]} (ID: {lasting_id})")
                                else:
                                    print(f"         üî∏ –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏: ID {lasting_id} (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                            else:
                                print("         üî∏ –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏: –Ω–µ –≤—ã–±—Ä–∞–Ω")

                        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
                        if 'parameters_notes' in params and params['parameters_notes']:
                            print(f"         üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {params['parameters_notes']}")

                    except json.JSONDecodeError as e:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        print(f"      –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {parameters_data}")
                else:
                    print("      ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        cursor.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            db.put_connection(conn)

if __name__ == "__main__":
    check_khlynov_data()