#!/usr/bin/env python
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–¥–µ–ª–∏ ModelSpecificationFormV4
"""
import sys
import time
from PyQt6.QtWidgets import QApplication, QMessageBox
from PyQt6.QtCore import QTimer, Qt
from PyQt6.QtTest import QTest

from database.connection import DatabaseConnection
from ui.references.model_specification_form_v4 import ModelSpecificationFormV4

class ModelTester:
    def __init__(self):
        self.db = DatabaseConnection()
        self.form = None
        self.app = QApplication.instance()
        if not self.app:
            self.app = QApplication(sys.argv)

    def test_create_new_model(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")

        self.form = ModelSpecificationFormV4()
        self.form.show()

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
        self.form.name_input.setText("–¢–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        self.form.article_input.setText("TEST001")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª–∞–¥–∫—É –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        parameters_tab_index = None
        for i in range(self.form.tabs.count()):
            if "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã" in self.form.tabs.tabText(i):
                parameters_tab_index = i
                break

        if parameters_tab_index is not None:
            print("‚úì –í–∫–ª–∞–¥–∫–∞ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏' –Ω–∞–π–¥–µ–Ω–∞")
            self.form.tabs.setCurrentIndex(parameters_tab_index)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü
            if hasattr(self.form, 'perforation_table'):
                print("‚úì –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            if hasattr(self.form, 'lining_table'):
                print("‚úì –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª–∞–¥–æ–∫ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª–∞–¥–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            if hasattr(self.form, 'lasting_combo'):
                print("‚úì –ö–æ–º–±–æ–±–æ–∫—Å —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏ –Ω–∞–π–¥–µ–Ω")
            else:
                print("‚ùå –ö–æ–º–±–æ–±–æ–∫—Å —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –í–∫–ª–∞–¥–∫–∞ '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        try:
            if hasattr(self.form, 'add_perforation_btn'):
                print("‚úì –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–∞")
                # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–ª–∏–∫–Ω—É—Ç—å, –Ω–æ –Ω–µ –±—É–¥–µ–º –ø–æ–∫–∞
            else:
                print("‚ùå –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏: {e}")

        self.form.close()
        print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")

    def test_database_connections(self):
        """–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.db.test_connection():
            print("‚úì –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        conn = self.db.get_connection()
        if conn:
            print("‚úì –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.db.put_connection(conn)
            print("‚úì –í–æ–∑–≤—Ä–∞—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞")
            return False

        return True

    def test_reference_data_loading(self):
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")

        self.form = ModelSpecificationFormV4()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ load_reference_data
            self.form.load_reference_data()
            print("‚úì –ú–µ—Ç–æ–¥ load_reference_data –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
            if self.form.lasting_combo.count() > 0:
                print(f"‚úì –¢–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {self.form.lasting_combo.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            else:
                print("‚ö†Ô∏è –¢–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞)")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

        self.form.close()

    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üèÅ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–¥–µ–ª–∏")
        print("=" * 50)

        # –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ë–î
        if not self.test_database_connections():
            print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        print()

        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ—Ä–º—ã
        self.test_create_new_model()
        print()

        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        self.test_reference_data_loading()
        print()

        print("=" * 50)
        print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = ModelTester()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    timer = QTimer()
    timer.timeout.connect(lambda: tester.app.quit())
    timer.start(10000)  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    QTimer.singleShot(100, tester.run_all_tests)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    tester.app.exec()

if __name__ == "__main__":
    main()