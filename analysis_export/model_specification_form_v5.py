"""–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –≤–∫–ª–∞–¥–∫–æ–π –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
import json
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget,
    QFormLayout, QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QPushButton, QTextEdit,
    QLabel, QGroupBox, QCheckBox, QHeaderView, QMessageBox,
    QScrollArea, QGridLayout, QAbstractItemView, QListWidget,
    QListWidgetItem, QDialogButtonBox
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from database.connection import DatabaseConnection
import psycopg2.extras
import json
import uuid


class ModelSpecificationFormV5(QDialog):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –≤–∫–ª–∞–¥–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""

    saved = pyqtSignal()

    def __init__(self, model_id=None, is_variant=False, variant_id=None, parent=None):
        super().__init__(parent)
        from debug_logger import log_debug

        log_debug(f"üèóÔ∏è ModelSpecificationFormV5 INIT: model_id={model_id}, is_variant={is_variant}, variant_id={variant_id}")
        self.model_id = model_id
        self.is_variant = is_variant  # –§–ª–∞–≥: –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        log_debug(f"üèóÔ∏è –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: self.model_id={self.model_id}")
        self.base_model_id = None  # ID –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        self.base_model_data = None  # –î–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        self.specification_id = variant_id  # ID —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        log_debug(f"üèóÔ∏è self.specification_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {self.specification_id}")

        # –í–ê–ñ–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: variant_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        if is_variant and variant_id:
            log_debug(f"‚úÖ –•–û–†–û–®–û: –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω variant_id={variant_id}")
        elif is_variant and not variant_id:
            if model_id:
                log_debug(f"‚ÑπÔ∏è –°–û–ó–î–ê–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ model_id={model_id}")
            else:
                log_debug(f"‚ùå –û–®–ò–ë–ö–ê: is_variant=True –Ω–æ variant_id=None –∏ model_id=None")
        else:
            log_debug(f"‚ÑπÔ∏è –ë–ê–ó–û–í–ê–Ø –ú–û–î–ï–õ–¨: –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª—å—é model_id={model_id}")
        self.db = DatabaseConnection()

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        self.cutting_parts_list = []
        self.hardware_list = []
        self.materials_list = []
        self.perforation_types = []
        self.lining_types = []
        self.lasting_types = []

        title = "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–¥–µ–ª–∏" if is_variant else "–ö–∞—Ä—Ç–∞ —Ä–∞—Å–∫—Ä–æ—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏"
        self.setWindowTitle(title)
        self.setModal(True)
        self.resize(1400, 750)
        self.setMinimumSize(1200, 550)

        self.setup_ui()
        self.load_reference_data()

        from debug_logger import log_debug

        log_debug(f"üîç –ü–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–∞–Ω–Ω—ã—Ö: self.model_id={self.model_id}, is_variant={self.is_variant}, variant_id={variant_id}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        if self.is_variant and variant_id:
            log_debug("üìù –í–µ—Ç–∫–∞: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            self.load_variant_for_editing(variant_id)
        elif self.is_variant and model_id and not variant_id:
            # –ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            log_debug(f"üîÑ –í–µ—Ç–∫–∞: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ID={model_id}")
            log_debug(f"üìä –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: self.model_id={self.model_id}, self.specification_id={self.specification_id}")
            self.load_base_model_data(model_id)
        elif model_id and not self.is_variant:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (–ù–ï —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞!)
            log_debug(f"üîÑ –í–µ—Ç–∫–∞: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ID={model_id}")
            self.load_model_data()
        else:
            log_debug(f"‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –≤–µ—Ç–∫–∞: model_id={model_id}, is_variant={self.is_variant}, variant_id={variant_id}")

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        main_layout = QVBoxLayout(self)

        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)
        scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarPolicy.ScrollBarAsNeeded)

        # –í–∏–¥–∂–µ—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        scroll_widget = QWidget()
        layout = QVBoxLayout(scroll_widget)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        header_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        header_layout = QGridLayout(header_group)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ç–∏–∫—É–ª
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –•–∞–π–∫–µ—Ä—ã –ú")
        header_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"), 0, 0)
        header_layout.addWidget(self.name_input, 0, 1)

        self.article_input = QLineEdit()
        self.article_input.setPlaceholderText("–ê—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
        header_layout.addWidget(QLabel("–ê—Ä—Ç–∏–∫—É–ª:"), 0, 2)
        header_layout.addWidget(self.article_input, 0, 3)

        # –ü–æ–ª—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)
        self.variant_name_label = QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
        self.variant_name_input = QLineEdit()
        self.variant_name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ—Ç–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è")
        header_layout.addWidget(self.variant_name_label, 1, 0)
        header_layout.addWidget(self.variant_name_input, 1, 1)

        self.variant_article_label = QLabel("–ö–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞:")
        self.variant_article_input = QLineEdit()
        self.variant_article_input.setPlaceholderText("VAR-001")
        header_layout.addWidget(self.variant_article_label, 1, 2)
        header_layout.addWidget(self.variant_article_input, 1, 3)

        # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
        self.variant_name_label.setVisible(False)
        self.variant_name_input.setVisible(False)
        self.variant_article_label.setVisible(False)
        self.variant_article_input.setVisible(False)

        # –ö–æ–ª–æ–¥–∫–∞
        self.last_code_input = QLineEdit()
        self.last_code_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 75")
        header_layout.addWidget(QLabel("–ö–æ–ª–æ–¥–∫–∞:"), 2, 0)
        header_layout.addWidget(self.last_code_input, 2, 1)

        self.last_type_combo = QComboBox()
        self.last_type_combo.addItems(["–ë–æ—Ç–∏–Ω–æ—á–Ω–∞—è", "–¢—É—Ñ–µ–ª—å–Ω–∞—è", "–°–∞–ø–æ–∂–Ω–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è"])
        header_layout.addWidget(QLabel("–¢–∏–ø –∫–æ–ª–æ–¥–∫–∏:"), 2, 2)
        header_layout.addWidget(self.last_type_combo, 2, 3)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        self.size_min_spin = QSpinBox()
        self.size_min_spin.setRange(20, 50)
        self.size_min_spin.setValue(36)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –æ—Ç:"), 3, 0)
        header_layout.addWidget(self.size_min_spin, 3, 1)

        self.size_max_spin = QSpinBox()
        self.size_max_spin.setRange(20, 50)
        self.size_max_spin.setValue(48)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –¥–æ:"), 3, 2)
        header_layout.addWidget(self.size_max_spin, 3, 3)

        # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏
        self.lasting_combo = QComboBox()
        self.lasting_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
        header_layout.addWidget(QLabel("–¢–∏–ø –∑–∞—Ç—è–∂–∫–∏:"), 4, 0)
        header_layout.addWidget(self.lasting_combo, 4, 1)

        layout.addWidget(header_group)

        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        self.tabs = QTabWidget()

        # 1. –ù–û–í–ê–Ø –í–ö–õ–ê–î–ö–ê: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        self.parameters_tab = self.create_parameters_tab()
        self.tabs.addTab(self.parameters_tab, "‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")

        # 2. –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è/–ü–æ–¥–æ—à–≤—ã
        self.cutting_tab = self.create_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "‚úÇÔ∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è/–ü–æ–¥–æ—à–≤—ã")

        # 3. –í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.variants_tab = self.create_variants_tab()
        self.tabs.addTab(self.variants_tab, "üé® –í–∞—Ä–∏–∞–Ω—Ç—ã")

        layout.addWidget(self.tabs)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scroll_area.setWidget(scroll_widget)
        main_layout.addWidget(scroll_area)

        # –ö–Ω–æ–ø–∫–∏ (–æ—Å—Ç–∞—é—Ç—Å—è –≤–Ω–∏–∑—É, –Ω–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞—é—Ç—Å—è)
        buttons_layout = QHBoxLayout()
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_model)
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)

        buttons_layout.addStretch()
        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)

        main_layout.addLayout(buttons_layout)

        # –ü–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
        if self.is_variant:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
            self.variant_name_label.setVisible(True)
            self.variant_name_input.setVisible(True)
            self.variant_article_label.setVisible(True)
            self.variant_article_input.setVisible(True)
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
            self.variant_name_label.setVisible(False)
            self.variant_name_input.setVisible(False)
            self.variant_article_label.setVisible(False)
            self.variant_article_input.setVisible(False)

    def setup_field_visibility(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (–±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å vs –≤–∞—Ä–∏–∞–Ω—Ç)"""
        from debug_logger import log_debug

        if self.is_variant:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
            self.variant_name_label.setVisible(True)
            self.variant_name_input.setVisible(True)
            self.variant_article_label.setVisible(True)
            self.variant_article_input.setVisible(True)

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
            current_text = self.variant_name_input.text()
            if not self.specification_id and (not current_text or current_text == "–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"):
                model_name = self.name_input.text()
                default_name = f"{model_name} - –í–∞—Ä–∏–∞–Ω—Ç" if model_name else "–ù–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
                log_debug(f"üè∑Ô∏è setup_field_visibility: model_name='{model_name}', updating variant name from '{current_text}' to '{default_name}'")
                self.variant_name_input.setText(default_name)
            else:
                log_debug(f"üè∑Ô∏è setup_field_visibility: –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ (specification_id={self.specification_id}, current_text='{current_text}')")
        else:
            # –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
            self.variant_name_label.setVisible(False)
            self.variant_name_input.setVisible(False)
            self.variant_article_label.setVisible(False)
            self.variant_article_input.setVisible(False)

    def create_parameters_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_label = QLabel()
        if self.is_variant:
            info_label.setText(
                "üí° –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
            )
        else:
            info_label.setText(
                "üí° –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ \"–î–æ–±–∞–≤–∏—Ç—å\" –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞."
            )
        info_label.setWordWrap(True)
        info_label.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info_label)

        # –î–ª—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π - —Ç–∞–±–ª–∏—Ü—ã —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤
        if not self.is_variant:
            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
            perf_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏")
            perf_layout = QVBoxLayout(perf_group)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            perf_buttons = QHBoxLayout()
            add_perf_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
            remove_perf_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
            add_perf_btn.clicked.connect(self.add_perforation)
            remove_perf_btn.clicked.connect(self.remove_perforation)
            perf_buttons.addWidget(add_perf_btn)
            perf_buttons.addWidget(remove_perf_btn)
            perf_buttons.addStretch()
            perf_layout.addLayout(perf_buttons)

            # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
            self.perforation_table = QTableWidget()
            self.perforation_table.setColumnCount(2)
            self.perforation_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ"])
            self.perforation_table.horizontalHeader().setStretchLastSection(True)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            self.perforation_table.verticalHeader().setDefaultSectionSize(35)
            self.perforation_table.verticalHeader().setMinimumSectionSize(35)

            perf_layout.addWidget(self.perforation_table)
            layout.addWidget(perf_group)

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏
            lining_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏")
            lining_layout = QVBoxLayout(lining_group)

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            lining_buttons = QHBoxLayout()
            add_lining_btn = QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
            remove_lining_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
            add_lining_btn.clicked.connect(self.add_lining)
            remove_lining_btn.clicked.connect(self.remove_lining)
            lining_buttons.addWidget(add_lining_btn)
            lining_buttons.addWidget(remove_lining_btn)
            lining_buttons.addStretch()
            lining_layout.addLayout(lining_buttons)

            # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª–∞–¥–∫–∏
            self.lining_table = QTableWidget()
            self.lining_table.setColumnCount(2)
            self.lining_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–û–ø–∏—Å–∞–Ω–∏–µ"])
            self.lining_table.horizontalHeader().setStretchLastSection(True)

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
            self.lining_table.verticalHeader().setDefaultSectionSize(35)
            self.lining_table.verticalHeader().setMinimumSectionSize(35)

            lining_layout.addWidget(self.lining_table)
            layout.addWidget(lining_group)

        else:
            # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –∫–æ–º–±–æ–±–æ–∫—Å—ã
            params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
            params_layout = QGridLayout(params_group)

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
            params_layout.addWidget(QLabel("–í–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏:"), 0, 0)
            self.perforation_combo = QComboBox()
            self.perforation_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
            params_layout.addWidget(self.perforation_combo, 0, 1)

            # –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏
            params_layout.addWidget(QLabel("–í–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏:"), 1, 0)
            self.lining_combo = QComboBox()
            self.lining_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
            params_layout.addWidget(self.lining_combo, 1, 1)

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            params_layout.addWidget(QLabel("–°–µ–∑–æ–Ω:"), 2, 0)
            self.season_combo = QComboBox()
            self.season_combo.addItems(["–í–µ—Å–Ω–∞-–õ–µ—Ç–æ", "–û—Å–µ–Ω—å-–ó–∏–º–∞", "–î–µ–º–∏—Å–µ–∑–æ–Ω", "–í—Å–µ—Å–µ–∑–æ–Ω"])
            params_layout.addWidget(self.season_combo, 2, 1)

            params_layout.addWidget(QLabel("–ê—Ä—Ç–∏–∫—É–ª –≤–∞—Ä–∏–∞–Ω—Ç–∞:"), 3, 0)
            self.variant_article_input = QLineEdit()
            self.variant_article_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: VAR-001")
            params_layout.addWidget(self.variant_article_input, 3, 1)

            layout.addWidget(params_group)


        # –§—É—Ä–Ω–∏—Ç—É—Ä–∞
        hardware_group = QGroupBox("–§—É—Ä–Ω–∏—Ç—É—Ä–∞")
        hardware_layout = QVBoxLayout(hardware_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        hardware_buttons = QHBoxLayout()
        self.add_hardware_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É")
        self.add_hardware_btn.clicked.connect(self.add_hardware)
        self.remove_hardware_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.remove_hardware_btn.clicked.connect(self.remove_hardware)
        hardware_buttons.addWidget(self.add_hardware_btn)
        hardware_buttons.addWidget(self.remove_hardware_btn)
        hardware_buttons.addStretch()
        hardware_layout.addLayout(hardware_buttons)

        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(4)
        self.hardware_table.setHorizontalHeaderLabels([
            "–§—É—Ä–Ω–∏—Ç—É—Ä–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥–∏–Ω–∏—Ü–∞", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
        ])

        header = self.hardware_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)

        header.resizeSection(1, 100)
        header.resizeSection(2, 100)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        self.hardware_table.verticalHeader().setDefaultSectionSize(35)
        self.hardware_table.verticalHeader().setMinimumSectionSize(35)

        hardware_layout.addWidget(self.hardware_table)
        layout.addWidget(hardware_group)


        layout.addStretch()
        return widget

    def add_perforation(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(self, 'perforation_types') or not self.perforation_types:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã perforation_types.")
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏")
            dialog.setModal(True)
            layout = QVBoxLayout(dialog)

            # –ö–æ–º–±–æ–±–æ–∫—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            combo = QComboBox()
            combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ...", None)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            for perf in self.perforation_types:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
                already_added = False
                for row in range(self.perforation_table.rowCount()):
                    if self.perforation_table.item(row, 0) and self.perforation_table.item(row, 0).data(Qt.ItemDataRole.UserRole) == perf['id']:
                        already_added = True
                        break
                if not already_added:
                    combo.addItem(f"{perf['code']} - {perf['name']}", perf)

            layout.addWidget(combo)

            # –ö–Ω–æ–ø–∫–∏
            buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            buttons.accepted.connect(dialog.accept)
            buttons.rejected.connect(dialog.reject)
            layout.addWidget(buttons)

            if dialog.exec() == QDialog.DialogCode.Accepted:
                perf_data = combo.currentData()
                if perf_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                    row = self.perforation_table.rowCount()
                    self.perforation_table.insertRow(row)

                    item_name = QTableWidgetItem(perf_data['name'])
                    item_name.setData(Qt.ItemDataRole.UserRole, perf_data['id'])
                    self.perforation_table.setItem(row, 0, item_name)

                    self.perforation_table.setItem(row, 1, QTableWidgetItem(perf_data.get('description', '')))

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏: {e}")

    def remove_perforation(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏"""
        current_row = self.perforation_table.currentRow()
        if current_row >= 0:
            self.perforation_table.removeRow(current_row)

    def add_lining(self):
        """–î–æ–±–∞–≤–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª–∞–¥–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(self, 'lining_types') or not self.lining_types:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–∏–ø–æ–≤ –ø–æ–¥–∫–ª–∞–¥–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã lining_types.")
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª–∞–¥–∫–∏")
            dialog.setModal(True)
            layout = QVBoxLayout(dialog)

            # –ö–æ–º–±–æ–±–æ–∫—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            combo = QComboBox()
            combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ...", None)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            for lining in self.lining_types:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç
                already_added = False
                for row in range(self.lining_table.rowCount()):
                    if self.lining_table.item(row, 0) and self.lining_table.item(row, 0).data(Qt.ItemDataRole.UserRole) == lining['id']:
                        already_added = True
                        break
                if not already_added:
                    combo.addItem(f"{lining['code']} - {lining['name']}", lining)

            layout.addWidget(combo)

            # –ö–Ω–æ–ø–∫–∏
            buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            buttons.accepted.connect(dialog.accept)
            buttons.rejected.connect(dialog.reject)
            layout.addWidget(buttons)

            if dialog.exec() == QDialog.DialogCode.Accepted:
                lining_data = combo.currentData()
                if lining_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                    row = self.lining_table.rowCount()
                    self.lining_table.insertRow(row)

                    item_name = QTableWidgetItem(lining_data['name'])
                    item_name.setData(Qt.ItemDataRole.UserRole, lining_data['id'])
                    self.lining_table.setItem(row, 0, item_name)

                    self.lining_table.setItem(row, 1, QTableWidgetItem(lining_data.get('description', '')))

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–∫–ª–∞–¥–∫–∏: {e}")

    def remove_lining(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–∫–ª–∞–¥–∫–∏"""
        current_row = self.lining_table.currentRow()
        if current_row >= 0:
            self.lining_table.removeRow(current_row)

    def select_all_items(self, list_widget):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–∫–µ"""
        for i in range(list_widget.count()):
            item = list_widget.item(i)
            item.setSelected(True)

    def create_cutting_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –∏ –ø–æ–¥–æ—à–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # === –î–ï–¢–ê–õ–ò –ö–†–û–Ø ===
        cutting_group = QGroupBox("–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")
        cutting_layout = QVBoxLayout(cutting_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª—è–º–∏ –∫—Ä–æ—è
        cutting_btn_layout = QHBoxLayout()
        self.add_cutting_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å")
        self.add_cutting_btn.clicked.connect(self.add_cutting_part)
        self.remove_cutting_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.remove_cutting_btn.clicked.connect(self.remove_cutting_part)
        cutting_btn_layout.addWidget(self.add_cutting_btn)
        cutting_btn_layout.addWidget(self.remove_cutting_btn)
        cutting_btn_layout.addStretch()
        cutting_layout.addLayout(cutting_btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_table = QTableWidget()
        if self.is_variant:
            self.cutting_table.setColumnCount(5)
            self.cutting_table.setHorizontalHeaderLabels([
                "–î–µ—Ç–∞–ª—å –∫—Ä–æ—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞—Å—Ö–æ–¥ (–¥–º¬≤)", "–ú–∞—Ç–µ—Ä–∏–∞–ª (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π)", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
            ])
        else:
            self.cutting_table.setColumnCount(5)
            self.cutting_table.setHorizontalHeaderLabels([
                "–î–µ—Ç–∞–ª—å –∫—Ä–æ—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞—Å—Ö–æ–¥ (–¥–º¬≤)", "–ú–∞—Ç–µ—Ä–∏–∞–ª (–±–∞–∑–∞)", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
            ])

        cutting_header = self.cutting_table.horizontalHeader()
        cutting_header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        cutting_header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        cutting_header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        cutting_header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        cutting_header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)
        cutting_header.resizeSection(1, 100)
        cutting_header.resizeSection(2, 120)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        self.cutting_table.verticalHeader().setDefaultSectionSize(35)
        self.cutting_table.verticalHeader().setMinimumSectionSize(35)

        cutting_layout.addWidget(self.cutting_table)
        layout.addWidget(cutting_group)

        # === –ü–û–î–û–®–í–´ ===
        soles_group = QGroupBox("–ü–æ–¥–æ—à–≤—ã")
        soles_layout = QVBoxLayout(soles_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ—à–≤–∞–º–∏
        soles_btn_layout = QHBoxLayout()
        self.add_sole_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É")
        self.add_sole_btn.clicked.connect(self.add_sole)
        self.remove_sole_btn = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é")
        self.remove_sole_btn.clicked.connect(self.remove_sole)
        soles_btn_layout.addWidget(self.add_sole_btn)
        soles_btn_layout.addWidget(self.remove_sole_btn)
        soles_btn_layout.addStretch()
        soles_layout.addLayout(soles_btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ—à–≤
        self.soles_table = QTableWidget()
        self.soles_table.setColumnCount(5)
        self.soles_table.setHorizontalHeaderLabels([
            "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–¢–æ–ª—â–∏–Ω–∞ (–º–º)", "–¶–≤–µ—Ç", "–í—ã—Å–æ—Ç–∞ –∫–∞–±–ª—É–∫–∞ (–º–º)", "–í—ã—Å–æ—Ç–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (–º–º)"
        ])

        soles_header = self.soles_table.horizontalHeader()
        soles_header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        soles_header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        soles_header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        soles_header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        soles_header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)
        soles_header.resizeSection(1, 120)
        soles_header.resizeSection(3, 130)
        soles_header.resizeSection(4, 140)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        self.soles_table.verticalHeader().setDefaultSectionSize(35)
        self.soles_table.verticalHeader().setMinimumSectionSize(35)

        soles_layout.addWidget(self.soles_table)
        layout.addWidget(soles_group)

        return widget


    def add_sole(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É"""
        from ui.references.sole_dialog import SoleDialog

        dialog = SoleDialog(self)
        if dialog.exec() == QDialog.DialogCode.Accepted:
            sole_data = dialog.get_sole_data()

            row = self.soles_table.rowCount()
            self.soles_table.insertRow(row)

            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è —è—á–µ–µ–∫
            material_item = QTableWidgetItem(sole_data.get('material', ''))
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ UserRole –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            if sole_data.get('material_id'):
                material_item.setData(Qt.ItemDataRole.UserRole, sole_data['material_id'])

            thickness_item = QTableWidgetItem(str(sole_data.get('thickness', 0)))
            color_item = QTableWidgetItem(sole_data.get('color', ''))
            heel_height_item = QTableWidgetItem(str(sole_data.get('heel_height', 0)))
            platform_height_item = QTableWidgetItem(str(sole_data.get('platform_height', 0)))

            self.soles_table.setItem(row, 0, material_item)
            self.soles_table.setItem(row, 1, thickness_item)
            self.soles_table.setItem(row, 2, color_item)
            self.soles_table.setItem(row, 3, heel_height_item)
            self.soles_table.setItem(row, 4, platform_height_item)

    def remove_sole(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–æ—à–≤—É"""
        current_row = self.soles_table.currentRow()
        if current_row >= 0:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–æ—à–≤—É?",
                QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
            )

            if reply == QMessageBox.StandardButton.Yes:
                self.soles_table.removeRow(current_row)

    def create_variants_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QHBoxLayout()
        title = QLabel("–í–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏")
        title.setStyleSheet("font-size: 14px; font-weight: bold;")
        header.addWidget(title)
        header.addStretch()
        layout.addLayout(header)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–º–µ–µ—Ç —Å–≤–æ–π —Å–æ—Å—Ç–∞–≤ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤, "
            "–ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é, –ø–æ–¥–∫–ª–∞–¥–∫—É –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å."
        )
        info.setWordWrap(True)
        info.setStyleSheet("color: gray; margin: 10px 0;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        self.variants_table = QTableWidget()
        self.variants_table.setColumnCount(7)
        self.variants_table.setHorizontalHeaderLabels([
            "ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–¥", "–ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è", "–ü–æ–¥–∫–ª–∞–¥–∫–∞",
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "–ê–∫—Ç–∏–≤–µ–Ω"
        ])

        header = self.variants_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(6, QHeaderView.ResizeMode.Fixed)
        header.resizeSection(0, 50)
        header.resizeSection(6, 80)

        self.variants_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.variants_table.setSelectionMode(QTableWidget.SelectionMode.SingleSelection)
        self.variants_table.doubleClicked.connect(self.edit_variant)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–ª–æ–∂–µ–Ω–∏—è
        self.variants_table.verticalHeader().setDefaultSectionSize(35)
        self.variants_table.verticalHeader().setMinimumSectionSize(35)

        layout.addWidget(self.variants_table)

        # –ö–Ω–æ–ø–∫–∏
        btn_layout = QHBoxLayout()
        add_variant_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")
        add_variant_btn.clicked.connect(self.add_variant)

        edit_variant_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
        edit_variant_btn.clicked.connect(self.edit_variant)

        view_variant_btn = QPushButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
        view_variant_btn.clicked.connect(self.view_variant)

        remove_variant_btn = QPushButton("üóë –£–¥–∞–ª–∏—Ç—å")
        remove_variant_btn.clicked.connect(self.remove_variant)

        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.load_variants)

        btn_layout.addWidget(add_variant_btn)
        btn_layout.addWidget(edit_variant_btn)
        btn_layout.addWidget(view_variant_btn)
        btn_layout.addWidget(remove_variant_btn)
        btn_layout.addStretch()
        btn_layout.addWidget(refresh_btn)

        layout.addLayout(btn_layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        if self.model_id:
            self.load_variants()

        return widget

    def load_reference_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
            cursor.execute("SELECT id, code, name FROM perforation_types WHERE is_active = true")
            self.perforation_types = cursor.fetchall()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏
            cursor.execute("SELECT id, code, name FROM lining_types WHERE is_active = true")
            self.lining_types = cursor.fetchall()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏
            cursor.execute("SELECT id, code, name FROM lasting_types WHERE is_active = true")
            self.lasting_types = cursor.fetchall()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫—Ä–æ—è
            cursor.execute("SELECT id, code, name, category FROM cutting_parts WHERE is_active = true ORDER BY category, name")
            self.cutting_parts = cursor.fetchall()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É (–º–∞—Ç–µ—Ä–∏–∞–ª—ã —Ä–∞–∑–Ω—ã—Ö –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞)
            cursor.execute("""
                SELECT id, name, code FROM materials
                WHERE (group_type = 'HARDWARE' OR name LIKE '%–±–ª–æ—á–∫–∏%' OR name LIKE '%–ª—é–≤–µ—Ä—Å—ã%'
                       OR name LIKE '%–∫—Ä—é—á–∫–∏%' OR name LIKE '%—à–Ω—É—Ä–∫–∏%' OR name LIKE '%–ë–ª–æ—á–∫–∏%'
                       OR name LIKE '%–õ—é–≤–µ—Ä—Å—ã%' OR name LIKE '%–ö—Ä—é—á–∫–∏%' OR name LIKE '%–®–Ω—É—Ä–∫–∏%'
                       OR code LIKE '%BLOCHKI%' OR code LIKE '%KRYUCHKI%')
                AND is_active = true
                ORDER BY name
            """)
            self.hardware_list = cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –≤–∏–¥–∂–µ—Ç—ã
            if self.is_variant:
                # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –ù–ï –∑–∞–ø–æ–ª–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –∑–¥–µ—Å—å
                # –û–Ω–∏ –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –≤ load_base_model_options() —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
                pass
            else:
                # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–∞—Ö –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                pass

            # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏ - –≤—Å–µ–≥–¥–∞ –∫–æ–º–±–æ–±–æ–∫—Å
            for lasting in self.lasting_types:
                self.lasting_combo.addItem(lasting['name'], lasting['id'])

            cursor.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            if conn:
                self.db.put_connection(conn)

    def load_base_model_for_variant(self, model_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        print(f"üîç load_base_model_for_variant: model_id = {model_id}")

        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ò—â–µ–º –±–∞–∑–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
            cursor.execute("""
                SELECT * FROM specifications
                WHERE model_id = %s AND is_default = true
                LIMIT 1
            """, (model_id,))

            base_spec = cursor.fetchone()

            if base_spec:
                self.base_model_data = dict(base_spec)
                self.base_model_id = base_spec['id']
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ID={self.base_model_id}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–ø—Ü–∏–∏ –∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä–æ—è
                self.load_base_model_options()
                self.load_cutting_parts_from_base_model()

            else:
                print(f"‚ùå –ë–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")

    def load_base_model_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        print(f"üîç load_base_model_data: base_model_id = {getattr(self, 'base_model_id', '–ù–ï–¢')}")

        if not self.base_model_id:
            print("‚ùå base_model_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return

        conn = self.db.get_connection()
        if not conn:
            print("‚ùå –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î")
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            cursor.execute("""
                SELECT * FROM specifications
                WHERE id = %s
            """, (self.base_model_id,))

            model = cursor.fetchone()
            if model:
                self.base_model_data = dict(model)
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ID={self.base_model_id}")
                print(f"üîç cutting_parts –≤ base_model_data: {self.base_model_data.get('cutting_parts')}")

                # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã,
                # –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                if self.is_variant:
                    from debug_logger import log_debug
                    log_debug(f"üîß –í—ã–∑—ã–≤–∞–µ–º load_base_model_options() –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                    self.load_base_model_options()
                    log_debug(f"üîß –í—ã–∑—ã–≤–∞–µ–º load_cutting_parts_from_base_model() –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä–æ—è –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                    self.load_cutting_parts_from_base_model()
            else:
                print(f"‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å ID={self.base_model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
        finally:
            if conn:
                self.db.put_connection(conn)

    def load_base_model_options(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤"""
        from debug_logger import log_debug
        log_debug(f"üîç load_base_model_options: base_model_data = {bool(self.base_model_data)}")

        if not self.base_model_data:
            log_debug("‚ùå base_model_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º")
            return

        # –û—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        self.perforation_combo.clear()
        self.lining_combo.clear()

        self.perforation_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
        self.lining_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)

        # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏
        if self.is_variant:
            # –°–Ω–∞—á–∞–ª–∞ —É–±–µ–¥–∏–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å reference data
            if not hasattr(self, 'perforation_types') or not self.perforation_types:
                log_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º reference data –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                self.load_reference_data()

            log_debug(f"üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π={len(getattr(self, 'perforation_types', []))}, –ø–æ–¥–∫–ª–∞–¥–æ–∫={len(getattr(self, 'lining_types', []))}")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï —Ç–∏–ø—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –≤—ã–±–µ—Ä–µ—Ç –Ω—É–∂–Ω—ã–π)
            if hasattr(self, 'perforation_types'):
                for perf_type in self.perforation_types:
                    self.perforation_combo.addItem(perf_type['name'], perf_type['id'])

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï —Ç–∏–ø—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏
            if hasattr(self, 'lining_types'):
                for lining_type in self.lining_types:
                    self.lining_combo.addItem(lining_type['name'], lining_type['id'])

            log_debug(f"‚úÖ –ö–æ–º–±–æ–±–æ–∫—Å—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è={self.perforation_combo.count()}, –ø–æ–¥–∫–ª–∞–¥–∫–∞={self.lining_combo.count()}")
        else:
            # –î–ª—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º perforation_ids –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            perforation_ids = self.base_model_data.get('perforation_ids') if self.base_model_data else None
            if perforation_ids:
                if isinstance(perforation_ids, str):
                    try:
                        perforation_ids = json.loads(perforation_ids)
                    except:
                        perforation_ids = []

                if isinstance(perforation_ids, list):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π –ø–æ ID
                    for perf_type in self.perforation_types:
                        if perf_type['id'] in perforation_ids:
                            self.perforation_combo.addItem(perf_type['name'], perf_type['id'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º lining_ids –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            lining_ids = self.base_model_data.get('lining_ids') if self.base_model_data else None
            if lining_ids:
                if isinstance(lining_ids, str):
                    try:
                        lining_ids = json.loads(lining_ids)
                    except:
                        lining_ids = []

                if isinstance(lining_ids, list):
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª–∞–¥–æ–∫ –ø–æ ID
                    for lining_type in self.lining_types:
                        if lining_type['id'] in lining_ids:
                            self.lining_combo.addItem(lining_type['name'], lining_type['id'])

    def load_cutting_parts_from_base_model(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä–æ—è –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        if not self.base_model_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–∫—Ä–æ—è")
            return

        cutting_parts_json = self.base_model_data.get('cutting_parts')
        if not cutting_parts_json:
            print("‚ÑπÔ∏è –í –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–∫—Ä–æ—è")
            return

        try:
            import json
            cutting_parts = json.loads(cutting_parts_json) if isinstance(cutting_parts_json, str) else cutting_parts_json
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º {len(cutting_parts)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–∫—Ä–æ—è –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏")

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.cutting_table.setRowCount(0)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            for part in cutting_parts:
                row = self.cutting_table.rowCount()
                self.cutting_table.insertRow(row)

                # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ - –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
                part_item = QTableWidgetItem(part.get('name', ''))
                part_item.setFlags(part_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
                part_item.setBackground(Qt.GlobalColor.lightGray)  # –û—Ç–ª–∏—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                self.cutting_table.setItem(row, 0, part_item)

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                qty_spin = QSpinBox()
                qty_spin.setRange(1, 100)
                qty_spin.setValue(part.get('quantity', 1))
                self.cutting_table.setCellWidget(row, 1, qty_spin)

                # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤) - –±–µ—Ä–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                consumption_spin = QDoubleSpinBox()
                consumption_spin.setRange(0.1, 999.9)
                consumption_spin.setValue(part.get('consumption', 1.0))
                consumption_spin.setDecimals(1)
                consumption_spin.setSuffix(" –¥–º¬≤")
                self.cutting_table.setCellWidget(row, 2, consumption_spin)

                # –ú–∞—Ç–µ—Ä–∏–∞–ª - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
                material_combo = QComboBox()
                material_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...", None)
                self.load_leather_fabric_materials(material_combo)
                self.cutting_table.setCellWidget(row, 3, material_combo)

                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                self.cutting_table.setItem(row, 4, QTableWidgetItem(part.get('notes', '')))

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–∫—Ä–æ—è –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")

    def add_cutting_part(self):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è"""
        if self.is_variant:
            self.add_cutting_part_variant()
        else:
            self.add_cutting_part_base()

    def add_cutting_part_base(self):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(self, 'cutting_parts') or not self.cutting_parts:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å–∫—Ä–æ—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                    "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã cutting_parts.")
                return

            # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            dialog = QDialog(self)
            dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å —Ä–∞—Å–∫—Ä–æ—è")
            dialog.setModal(True)
            layout = QVBoxLayout(dialog)

            # –ö–æ–º–±–æ–±–æ–∫—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
            combo = QComboBox()
            combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ...", None)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
            for cutting_part in self.cutting_parts:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –¥–µ—Ç–∞–ª—å
                already_added = False
                for row in range(self.cutting_table.rowCount()):
                    if self.cutting_table.item(row, 0) and self.cutting_table.item(row, 0).data(Qt.ItemDataRole.UserRole) == cutting_part['id']:
                        already_added = True
                        break
                if not already_added:
                    display_text = f"{cutting_part['code']} - {cutting_part['name']}"
                    if cutting_part.get('category'):
                        display_text += f" ({cutting_part['category']})"
                    combo.addItem(display_text, cutting_part)

            layout.addWidget(combo)

            # –ö–Ω–æ–ø–∫–∏
            buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            buttons.accepted.connect(dialog.accept)
            buttons.rejected.connect(dialog.reject)
            layout.addWidget(buttons)

            if dialog.exec() == QDialog.DialogCode.Accepted:
                cutting_data = combo.currentData()
                if cutting_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
                    row = self.cutting_table.rowCount()
                    self.cutting_table.insertRow(row)

                    # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID
                    item_name = QTableWidgetItem(cutting_data['name'])
                    item_name.setData(Qt.ItemDataRole.UserRole, cutting_data['id'])
                    self.cutting_table.setItem(row, 0, item_name)

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    qty_spin = QSpinBox()
                    qty_spin.setRange(1, 100)
                    qty_spin.setValue(2)
                    self.cutting_table.setCellWidget(row, 1, qty_spin)

                    # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤)
                    consumption_spin = QDoubleSpinBox()
                    consumption_spin.setRange(0.1, 999.9)
                    consumption_spin.setValue(1.0)
                    consumption_spin.setDecimals(1)
                    consumption_spin.setSuffix(" –¥–º¬≤")
                    self.cutting_table.setCellWidget(row, 2, consumption_spin)

                    # –ú–∞—Ç–µ—Ä–∏–∞–ª (—Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
                    self.cutting_table.setItem(row, 3, QTableWidgetItem("–ö–æ–∂–∞/–ó–∞–º—à–∞"))

                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                    self.cutting_table.setItem(row, 4, QTableWidgetItem(""))

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å–∫—Ä–æ—è: {e}")

    def add_cutting_part_variant(self):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞"""
        print(f"üîç add_cutting_part_variant: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ cutting_parts")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not hasattr(self, 'cutting_parts') or not self.cutting_parts:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å–∫—Ä–æ—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã cutting_parts.")
            return

        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        dialog = QDialog(self)
        dialog.setWindowTitle("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—Ç–∞–ª—å —Ä–∞—Å–∫—Ä–æ—è")
        dialog.setModal(True)
        layout = QVBoxLayout(dialog)

        # –ö–æ–º–±–æ–±–æ–∫—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        combo = QComboBox()
        combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ...", None)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ cutting_parts
        for cutting_part in self.cutting_parts:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –¥–µ—Ç–∞–ª—å
            already_added = False
            for row in range(self.cutting_table.rowCount()):
                item = self.cutting_table.item(row, 0)
                if item and item.text() == cutting_part['name']:
                    already_added = True
                    break

            if not already_added:
                display_text = f"{cutting_part['code']} - {cutting_part['name']}"
                if cutting_part.get('category'):
                    display_text += f" ({cutting_part['category']})"
                combo.addItem(display_text, cutting_part)

        layout.addWidget(QLabel("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è:"))
        layout.addWidget(combo)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addWidget(buttons)

        if dialog.exec() == QDialog.DialogCode.Accepted:
            cutting_data = combo.currentData()
            if cutting_data:
                self.add_cutting_part_from_catalog(cutting_data)

    def add_cutting_part_from_catalog(self, cutting_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º ID (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ)
        item_name = QTableWidgetItem(cutting_data['name'])
        item_name.setData(Qt.ItemDataRole.UserRole, cutting_data['id'])
        # –û—Ç–ª–∏—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
        self.cutting_table.setItem(row, 0, item_name)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        qty_spin = QSpinBox()
        qty_spin.setRange(1, 100)
        qty_spin.setValue(cutting_data.get('default_qty', 2))
        self.cutting_table.setCellWidget(row, 1, qty_spin)

        # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤) - –±–µ—Ä–µ–º –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        consumption_spin = QDoubleSpinBox()
        consumption_spin.setRange(0.1, 999.9)
        consumption_spin.setValue(cutting_data.get('material_consumption', 1.0))
        consumption_spin.setDecimals(1)
        consumption_spin.setSuffix(" –¥–º¬≤")
        self.cutting_table.setCellWidget(row, 2, consumption_spin)

        # –ú–∞—Ç–µ—Ä–∏–∞–ª - –∫–æ–º–±–æ–±–æ–∫—Å —Å –∫–æ–∂–∞/—Ç–∫–∞–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        material_combo = QComboBox()
        material_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...", None)
        self.load_leather_fabric_materials(material_combo)
        self.cutting_table.setCellWidget(row, 3, material_combo)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 4, QTableWidgetItem(cutting_data.get('notes', '')))

    def add_cutting_part_from_base(self, part_data):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ (–Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
        part_item = QTableWidgetItem(part_data.get('name', ''))
        part_item.setFlags(part_item.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.cutting_table.setItem(row, 0, part_item)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±–µ—Ä–µ–º –∏–∑ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
        qty_spin = QSpinBox()
        qty_spin.setRange(1, 100)
        qty_spin.setValue(part_data.get('quantity', 2))
        self.cutting_table.setCellWidget(row, 1, qty_spin)

        # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤)
        consumption_spin = QDoubleSpinBox()
        consumption_spin.setRange(0.1, 999.9)
        consumption_spin.setValue(part_data.get('consumption', 1.0))
        consumption_spin.setDecimals(1)
        consumption_spin.setSuffix(" –¥–º¬≤")
        self.cutting_table.setCellWidget(row, 2, consumption_spin)

        # –ú–∞—Ç–µ—Ä–∏–∞–ª - –∫–æ–º–±–æ–±–æ–∫—Å —Å –∫–æ–∂–∞/—Ç–∫–∞–Ω—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        material_combo = QComboBox()
        material_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...", None)
        self.load_leather_fabric_materials(material_combo)
        self.cutting_table.setCellWidget(row, 3, material_combo)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 4, QTableWidgetItem(part_data.get('note', '')))

    def load_leather_fabric_materials(self, combo_box):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–∂–∞/—Ç–∫–∞–Ω—å –≤ –∫–æ–º–±–æ–±–æ–∫—Å"""
        db = DatabaseConnection()
        conn = db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, name, code FROM materials
                WHERE group_type IN ('LEATHER', 'LINING')
                ORDER BY group_type, name
            """)
            materials = cursor.fetchall()

            for material_id, name, code in materials:
                display_text = f"{name} ({code})" if code else name
                combo_box.addItem(display_text, material_id)

            cursor.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫–æ–∂–∞/—Ç–∫–∞–Ω—å: {e}")
        finally:
            if conn:
                db.put_connection(conn)

    def remove_cutting_part(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è"""
        current_row = self.cutting_table.currentRow()
        if current_row >= 0:
            self.cutting_table.removeRow(current_row)

    def add_hardware(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É"""
        row = self.hardware_table.rowCount()
        self.hardware_table.insertRow(row)

        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –≥—Ä—É–ø–ø—ã HARDWARE
        hw_combo = QComboBox()
        hw_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É...", None)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥—Ä—É–ø–ø—ã HARDWARE –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.load_hardware_materials(hw_combo)
        self.hardware_table.setCellWidget(row, 0, hw_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        qty_spin = QSpinBox()
        qty_spin.setRange(1, 100)
        qty_spin.setValue(1)
        self.hardware_table.setCellWidget(row, 1, qty_spin)

        # –ï–¥–∏–Ω–∏—Ü–∞
        unit_combo = QComboBox()
        unit_combo.addItems(["—à—Ç", "–ø–∞—Ä–∞", "–∫–æ–º–ø–ª–µ–∫—Ç"])
        self.hardware_table.setCellWidget(row, 2, unit_combo)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.hardware_table.setItem(row, 3, QTableWidgetItem(""))

    def remove_hardware(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É"""
        current_row = self.hardware_table.currentRow()
        if current_row >= 0:
            self.hardware_table.removeRow(current_row)

    def load_hardware_materials(self, combo_box):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≥—Ä—É–ø–ø—ã HARDWARE –≤ –∫–æ–º–±–æ–±–æ–∫—Å"""
        db = DatabaseConnection()
        conn = db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, name, code FROM materials
                WHERE group_type = 'HARDWARE'
                ORDER BY name
            """)
            materials = cursor.fetchall()

            for material_id, name, code in materials:
                display_text = f"{name} ({code})" if code else name
                combo_box.addItem(display_text, material_id)

            cursor.close()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã: {e}")
        finally:
            if conn:
                db.put_connection(conn)

    def add_variant(self):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–¥–µ–ª–∏"""
        if not self.model_id:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å")
            return

        # –ù–∞—Ö–æ–¥–∏–º ID –±–∞–∑–æ–≤–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏
        base_specification_id = None
        conn = self.db.get_connection()
        if conn:
            try:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT id FROM specifications
                    WHERE model_id = %s AND (is_default = true OR variant_name IS NULL OR variant_name = '')
                    LIMIT 1
                """, (self.model_id,))
                result = cursor.fetchone()
                if result:
                    base_specification_id = result[0]
                else:
                    pass
                cursor.close()
            except Exception as e:
                pass
            finally:
                self.db.put_connection(conn)

        if not base_specification_id:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ä–º—É, –Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
        dialog = ModelSpecificationFormV5(
            model_id=self.model_id,  # –ü–µ—Ä–µ–¥–∞–µ–º ID –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏!
            is_variant=True,  # –†–µ–∂–∏–º –≤–∞—Ä–∏–∞–Ω—Ç–∞
            parent=self
        )
        dialog.base_model_id = base_specification_id  # –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
        # –ù–µ –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å load_base_model_data –∑–¥–µ—Å—å - —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        dialog.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏")
        dialog.saved.connect(self.load_variants)
        dialog.exec()

    def edit_variant(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        current_row = self.variants_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return

        variant_id = int(self.variants_table.item(current_row, 0).text())
        is_default = self.variants_table.item(current_row, 1).text() == "–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"

        if is_default:
            # –ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–π —Ñ–æ—Ä–º–µ
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                "–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö —ç—Ç–æ–π —Ñ–æ—Ä–º—ã")
        else:
            # –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ä–º—É —Å —Ñ–ª–∞–≥–æ–º is_variant=True
            print(f"üîß V5: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID={variant_id}")
            dialog = ModelSpecificationFormV5(
                model_id=self.model_id,
                is_variant=True,
                parent=self
            )
            dialog.saved.connect(self.load_variants)
            dialog.exec()

    def view_variant(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        current_row = self.variants_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return

        variant_id = int(self.variants_table.item(current_row, 0).text())

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        print(f"üîß V5: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID={variant_id}")
        dialog = ModelSpecificationFormV5(
            model_id=self.model_id,
            is_variant=True,
            parent=self
        )
        dialog.exec()

    def remove_variant(self):
        """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"""
        current_row = self.variants_table.currentRow()
        if current_row < 0:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±–∞–∑–æ–≤—ã–π –ª–∏ —ç—Ç–æ –≤–∞—Ä–∏–∞–Ω—Ç
        is_default = self.variants_table.item(current_row, 1).text() == "–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
        if is_default:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –º–æ–¥–µ–ª–∏")
            return

        variant_name = self.variants_table.item(current_row, 1).text()
        reply = QMessageBox.question(
            self,
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
            f"–£–¥–∞–ª–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç '{variant_name}'?",
            QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No
        )

        if reply == QMessageBox.StandardButton.Yes:
            variant_id = int(self.variants_table.item(current_row, 0).text())

            conn = self.db.get_connection()
            if conn:
                try:
                    cursor = conn.cursor()
                    cursor.execute("""
                        DELETE FROM specifications WHERE id = %s
                    """, (variant_id,))
                    conn.commit()
                    cursor.close()

                    self.load_variants()
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–í–∞—Ä–∏–∞–Ω—Ç —É–¥–∞–ª–µ–Ω")

                except Exception as e:
                    conn.rollback()
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
                finally:
                    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
                    if conn:
                        self.db.put_connection(conn)

    def load_variants(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
        if not self.model_id:
            return

        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–∏
            cursor.execute("""
                SELECT s.id, s.variant_name, s.variant_code, s.is_default,
                       s.total_material_cost, s.is_active,
                       p.name as perforation_name,
                       l.name as lining_name
                FROM specifications s
                LEFT JOIN perforation_types p ON s.perforation_id = p.id
                LEFT JOIN lining_types l ON s.lining_id = l.id
                WHERE s.model_id = %s
                ORDER BY s.is_default DESC, s.created_at DESC
            """, (self.model_id,))

            variants = cursor.fetchall()

            self.variants_table.setRowCount(0)
            for variant in variants:
                row = self.variants_table.rowCount()
                self.variants_table.insertRow(row)

                # ID
                self.variants_table.setItem(row, 0, QTableWidgetItem(str(variant['id'])))

                # –ù–∞–∑–≤–∞–Ω–∏–µ
                name = variant['variant_name'] or "–ë–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
                self.variants_table.setItem(row, 1, QTableWidgetItem(name))

                # –ö–æ–¥
                code = variant['variant_code'] or "-"
                self.variants_table.setItem(row, 2, QTableWidgetItem(code))

                # –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è
                perf = variant['perforation_name'] or "-"
                self.variants_table.setItem(row, 3, QTableWidgetItem(perf))

                # –ü–æ–¥–∫–ª–∞–¥–∫–∞
                lining = variant['lining_name'] or "-"
                self.variants_table.setItem(row, 4, QTableWidgetItem(lining))

                # –°—Ç–æ–∏–º–æ—Å—Ç—å
                cost = f"{variant['total_material_cost']:.2f}" if variant['total_material_cost'] else "-"
                self.variants_table.setItem(row, 5, QTableWidgetItem(cost))

                # –ê–∫—Ç–∏–≤–µ–Ω
                active = "‚úì" if variant['is_active'] else "‚úó"
                self.variants_table.setItem(row, 6, QTableWidgetItem(active))

            cursor.close()

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            if conn:
                self.db.put_connection(conn)

    def load_model_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.model_id:
            return

        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç, –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∏–ª–∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
            if not self.specification_id:
                cursor.execute("""
                    SELECT * FROM models WHERE id = %s
                """, (self.model_id,))
                model = cursor.fetchone()

                if model:
                    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è
                    self.name_input.setText(model['name'] or '')
                    self.article_input.setText(model['article'] or '')
                    self.last_code_input.setText(model['last_code'] or '')

                    # –¢–∏–ø –∫–æ–ª–æ–¥–∫–∏
                    if model['last_type']:
                        index = self.last_type_combo.findText(model['last_type'])
                        if index >= 0:
                            self.last_type_combo.setCurrentIndex(index)

                    # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
                    if model['size_min']:
                        self.size_min_spin.setValue(model['size_min'])
                    if model['size_max']:
                        self.size_max_spin.setValue(model['size_max'])

                    # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏
                    if model.get('lasting_type_id'):
                        index = self.lasting_combo.findData(model['lasting_type_id'])
                        if index >= 0:
                            self.lasting_combo.setCurrentIndex(index)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ specifications (–¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è, —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ —Ç.–¥.)
            if self.specification_id:
                # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                cursor.execute("""
                    SELECT * FROM specifications WHERE id = %s
                """, (self.specification_id,))
            else:
                # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏—â–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                cursor.execute("""
                    SELECT * FROM specifications
                    WHERE model_id = %s AND is_default = true
                    ORDER BY created_at DESC
                    LIMIT 1
                """, (self.model_id,))
            spec = cursor.fetchone()

            if spec:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
                if spec.get('cutting_parts'):
                    self.cutting_table.setRowCount(0)
                    cutting_parts_data = spec['cutting_parts']

                    # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
                    if isinstance(cutting_parts_data, str):
                        try:
                            import json
                            cutting_parts_data = json.loads(cutting_parts_data)
                        except json.JSONDecodeError:
                            cutting_parts_data = []

                    for part in cutting_parts_data:
                        row = self.cutting_table.rowCount()
                        self.cutting_table.insertRow(row)

                        # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∫–∞–∫ QTableWidgetItem (–∫–∞–∫ –≤ add_cutting_part_base)
                        item_name = QTableWidgetItem(part.get('name', ''))
                        # –ï—Å–ª–∏ –µ—Å—Ç—å ID –¥–µ—Ç–∞–ª–∏ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
                        if part.get('id'):
                            item_name.setData(Qt.ItemDataRole.UserRole, part['id'])
                        self.cutting_table.setItem(row, 0, item_name)

                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ SpinBox
                        qty_spin = QSpinBox()
                        qty_spin.setRange(1, 100)
                        qty_spin.setValue(part.get('quantity', 1))
                        self.cutting_table.setCellWidget(row, 1, qty_spin)

                        # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤) –∫–∞–∫ DoubleSpinBox
                        consumption_spin = QDoubleSpinBox()
                        consumption_spin.setRange(0.1, 999.9)
                        consumption_spin.setValue(part.get('consumption', 1.0))
                        consumption_spin.setDecimals(1)
                        consumption_spin.setSuffix(" –¥–º¬≤")
                        self.cutting_table.setCellWidget(row, 2, consumption_spin)

                        # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                        self.cutting_table.setItem(row, 3, QTableWidgetItem(part.get('material', '–ö–æ–∂–∞/–ó–∞–º—à–∞')))
                        self.cutting_table.setItem(row, 4, QTableWidgetItem(part.get('notes', '')))

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
                if spec.get('hardware'):
                    self.hardware_table.setRowCount(0)
                    for hw in spec['hardware']:
                        row = self.hardware_table.rowCount()
                        self.hardware_table.insertRow(row)

                        # –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
                        hw_combo = QComboBox()
                        hw_combo.addItems(["–õ—é–≤–µ—Ä—Å—ã", "–ö—Ä—é—á–∫–∏", "–ú–æ–ª–Ω–∏—è", "–ü—Ä—è–∂–∫–∞", "–ö–Ω–æ–ø–∫–∏"])
                        hw_combo.setEditable(True)
                        hw_combo.setEditText(hw.get('name', ''))
                        self.hardware_table.setCellWidget(row, 0, hw_combo)

                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                        qty_spin = QSpinBox()
                        qty_spin.setRange(1, 100)
                        qty_spin.setValue(hw.get('quantity', 1))
                        self.hardware_table.setCellWidget(row, 1, qty_spin)

                        # –ï–¥–∏–Ω–∏—Ü–∞
                        unit_combo = QComboBox()
                        unit_combo.addItems(["—à—Ç", "–ø–∞—Ä–∞", "–∫–æ–º–ø–ª–µ–∫—Ç", "–º¬≤", "–¥–º2"])
                        if hw.get('unit'):
                            index = unit_combo.findText(hw['unit'])
                            if index >= 0:
                                unit_combo.setCurrentIndex(index)
                        self.hardware_table.setCellWidget(row, 2, unit_combo)

                        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                        self.hardware_table.setItem(row, 3, QTableWidgetItem(hw.get('notes', '')))

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏
                if self.is_variant:
                    # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –ø–æ–ª—è
                    if spec.get('perforation_id'):
                        index = self.perforation_combo.findData(spec['perforation_id'])
                        if index >= 0:
                            self.perforation_combo.setCurrentIndex(index)

                    if spec.get('lining_id'):
                        index = self.lining_combo.findData(spec['lining_id'])
                        if index >= 0:
                            self.lining_combo.setCurrentIndex(index)
                else:
                    # –î–ª—è –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Å—Å–∏–≤—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                    perforation_ids = []
                    if spec.get('perforation_ids'):
                        try:
                            perforation_ids = json.loads(spec['perforation_ids']) if isinstance(spec['perforation_ids'], str) else spec['perforation_ids']
                        except (json.JSONDecodeError, TypeError):
                            perforation_ids = []

                    # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                    if not perforation_ids and spec.get('perforation_id'):
                        perforation_ids = [spec['perforation_id']]

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü—É
                    for perf_id in perforation_ids:
                        cursor.execute("""
                            SELECT id, name FROM perforation_types WHERE id = %s
                        """, (perf_id,))
                        perf_result = cursor.fetchone()
                        if perf_result:
                            row = self.perforation_table.rowCount()
                            self.perforation_table.insertRow(row)
                            item = QTableWidgetItem(perf_result['name'])
                            item.setData(Qt.ItemDataRole.UserRole, perf_result['id'])
                            self.perforation_table.setItem(row, 0, item)
                            self.perforation_table.setItem(row, 1, QTableWidgetItem(perf_result.get('description', '')))

                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–∫–ª–∞–¥–∫–∏ –∏–∑ –º–∞—Å—Å–∏–≤–∞
                    lining_ids = []
                    if spec.get('lining_ids'):
                        try:
                            lining_ids = json.loads(spec['lining_ids']) if isinstance(spec['lining_ids'], str) else spec['lining_ids']
                        except (json.JSONDecodeError, TypeError):
                            lining_ids = []

                    # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–ª—è (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
                    if not lining_ids and spec.get('lining_id'):
                        lining_ids = [spec['lining_id']]

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø–æ–¥–∫–ª–∞–¥–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü—É
                    for lining_id in lining_ids:
                        cursor.execute("""
                            SELECT id, name FROM lining_types WHERE id = %s
                        """, (lining_id,))
                        lining_result = cursor.fetchone()
                        if lining_result:
                            row = self.lining_table.rowCount()
                            self.lining_table.insertRow(row)
                            item = QTableWidgetItem(lining_result['name'])
                            item.setData(Qt.ItemDataRole.UserRole, lining_result['id'])
                            self.lining_table.setItem(row, 0, item)
                            self.lining_table.setItem(row, 1, QTableWidgetItem(lining_result.get('description', '')))

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π)
                if spec.get('lasting_type_id'):
                    index = self.lasting_combo.findData(spec['lasting_type_id'])
                    if index >= 0:
                        self.lasting_combo.setCurrentIndex(index)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–æ—à–≤—ã
                if spec.get('soles'):
                    self.soles_table.setRowCount(0)
                    try:
                        soles_data = json.loads(spec['soles']) if isinstance(spec['soles'], str) else spec['soles']
                        for sole in soles_data:
                            row = self.soles_table.rowCount()
                            self.soles_table.insertRow(row)

                            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–æ—à–≤—ã
                            material_item = QTableWidgetItem(sole.get('material', ''))
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                            if sole.get('material_id'):
                                material_item.setData(Qt.ItemDataRole.UserRole, sole['material_id'])

                            self.soles_table.setItem(row, 0, material_item)
                            self.soles_table.setItem(row, 1, QTableWidgetItem(str(sole.get('thickness', 0))))
                            self.soles_table.setItem(row, 2, QTableWidgetItem(sole.get('color', '')))
                            self.soles_table.setItem(row, 3, QTableWidgetItem(str(sole.get('heel_height', 0))))
                            self.soles_table.setItem(row, 4, QTableWidgetItem(str(sole.get('platform_height', 0))))

                    except (json.JSONDecodeError, TypeError) as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–æ—à–≤: {e}")

            cursor.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏: {e}")
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            if conn:
                self.db.put_connection(conn)

    def load_variant_for_editing(self, variant_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞
            cursor.execute("""
                SELECT s.*, m.name as model_name, m.article as model_article,
                       m.id as actual_model_id, m.last_code, m.last_type,
                       m.size_min, m.size_max
                FROM specifications s
                JOIN models m ON s.model_id = m.id
                WHERE s.id = %s
            """, (variant_id,))

            variant = cursor.fetchone()
            if variant:
                from debug_logger import log_debug
                log_debug(f"üîç –ù–ê–ô–î–ï–ù –í–ê–†–ò–ê–ù–¢: ID={variant_id}, model_id={variant['actual_model_id']}, name={variant['variant_name']}")

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π model_id (ID –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏)
                self.model_id = variant['actual_model_id']
                log_debug(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω model_id: {self.model_id}")

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–æ–¥–µ–ª–∏
                self.name_input.setText(variant['model_name'] or '')
                self.article_input.setText(variant['model_article'] or '')
                self.last_code_input.setText(variant['last_code'] or '')

                # –¢–∏–ø –∫–æ–ª–æ–¥–∫–∏
                if variant['last_type']:
                    index = self.last_type_combo.findText(variant['last_type'])
                    if index >= 0:
                        self.last_type_combo.setCurrentIndex(index)

                # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
                if variant['size_min']:
                    self.size_min_spin.setValue(variant['size_min'])
                if variant['size_max']:
                    self.size_max_spin.setValue(variant['size_max'])

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
                if hasattr(self, 'variant_name_input'):
                    self.variant_name_input.setText(variant['variant_name'] or '')
                if hasattr(self, 'variant_article_input'):
                    self.variant_article_input.setText(variant['variant_code'] or '')

                log_debug(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç ID={variant_id} –¥–ª—è –º–æ–¥–µ–ª–∏ ID={self.model_id}")

                # –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (—Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞, –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è, –ø–æ–¥–æ—à–≤—ã)
                log_debug(f"üîß –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–ù–¢–ê: –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é ID={variant_id}")

                # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–±–æ–±–æ–∫—Å–æ–≤
                if not hasattr(self, 'hardware_list') or not self.hardware_list:
                    log_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º reference data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                    self.load_reference_data()

                # –í–ê–ñ–ù–û: –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                log_debug("üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")

                # –û—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
                self.perforation_combo.clear()
                self.lining_combo.clear()

                self.perforation_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
                self.lining_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                if hasattr(self, 'perforation_types'):
                    log_debug(f"üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é: {len(self.perforation_types)} —Ç–∏–ø–æ–≤")
                    for perf_type in self.perforation_types:
                        self.perforation_combo.addItem(perf_type['name'], perf_type['id'])
                        log_debug(f"  + {perf_type['name']} (ID={perf_type['id']})")

                if hasattr(self, 'lining_types'):
                    log_debug(f"üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª–∞–¥–∫—É: {len(self.lining_types)} —Ç–∏–ø–æ–≤")
                    for lining_type in self.lining_types:
                        self.lining_combo.addItem(lining_type['name'], lining_type['id'])
                        log_debug(f"  + {lining_type['name']} (ID={lining_type['id']})")

                log_debug(f"‚úÖ Combo boxes –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è={self.perforation_combo.count()}, –ø–æ–¥–∫–ª–∞–¥–∫–∞={self.lining_combo.count()}")
                log_debug(f"‚úÖ –ö–æ–º–±–æ–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è={self.perforation_combo.isEnabled()}, –ø–æ–¥–∫–ª–∞–¥–∫–∞={self.lining_combo.isEnabled()}")

                # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self.load_specification_data(variant)
                log_debug(f"‚úÖ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID={variant_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–∂–∏–º–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                self.setup_field_visibility()

            cursor.close()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")
        finally:
            if conn:
                self.db.put_connection(conn)

    def load_base_model_data(self, base_model_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        from debug_logger import log_debug

        log_debug(f"üîß load_base_model_data –≤—ã–∑–≤–∞–Ω —Å base_model_id={base_model_id}")

        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            cursor.execute("""
                SELECT * FROM models WHERE id = %s
            """, (base_model_id,))
            model = cursor.fetchone()

            if model:
                # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º model_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
                self.model_id = base_model_id

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –º–æ–¥–µ–ª–∏
                self.name_input.setText(model['name'] or '')
                self.article_input.setText(model['article'] or '')
                self.last_code_input.setText(model['last_code'] or '')

                # –¢–∏–ø –∫–æ–ª–æ–¥–∫–∏
                if model['last_type']:
                    index = self.last_type_combo.findText(model['last_type'])
                    if index >= 0:
                        self.last_type_combo.setCurrentIndex(index)

                # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
                if model['size_min']:
                    self.size_min_spin.setValue(model['size_min'])
                if model['size_max']:
                    self.size_max_spin.setValue(model['size_max'])

                log_debug(f"üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ ID={base_model_id} –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                log_debug(f"‚úÖ model_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.model_id}")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    SELECT * FROM specifications
                    WHERE model_id = %s AND is_default = true
                    ORDER BY created_at DESC
                    LIMIT 1
                """, (base_model_id,))

                base_spec = cursor.fetchone()
                if base_spec:
                    log_debug(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è ID={base_spec['id']}")

                    # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –°–ù–ê–ß–ê–õ–ê –∑–∞–ø–æ–ª–Ω—è–µ–º combo boxes –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
                    if self.is_variant:
                        log_debug("üîß –ó–∞–ø–æ–ª–Ω—è–µ–º combo boxes –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")

                        # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å reference data
                        if not hasattr(self, 'perforation_types') or not self.perforation_types:
                            log_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º reference data –¥–ª—è combo boxes")
                            self.load_reference_data()

                        # –û—á–∏—â–∞–µ–º –∫–æ–º–±–æ–±–æ–∫—Å—ã
                        self.perforation_combo.clear()
                        self.lining_combo.clear()

                        self.perforation_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)
                        self.lining_combo.addItem("–ù–µ –≤—ã–±—Ä–∞–Ω–æ", None)

                        # –ó–∞–ø–æ–ª–Ω—è–µ–º –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                        if hasattr(self, 'perforation_types'):
                            log_debug(f"üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é: {len(self.perforation_types)} —Ç–∏–ø–æ–≤")
                            for perf_type in self.perforation_types:
                                self.perforation_combo.addItem(perf_type['name'], perf_type['id'])
                                log_debug(f"  + {perf_type['name']} (ID={perf_type['id']})")

                        if hasattr(self, 'lining_types'):
                            log_debug(f"üé® –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–∫–ª–∞–¥–∫—É: {len(self.lining_types)} —Ç–∏–ø–æ–≤")
                            for lining_type in self.lining_types:
                                self.lining_combo.addItem(lining_type['name'], lining_type['id'])
                                log_debug(f"  + {lining_type['name']} (ID={lining_type['id']})")

                        log_debug(f"‚úÖ Combo boxes –∑–∞–ø–æ–ª–Ω–µ–Ω—ã: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è={self.perforation_combo.count()}, –ø–æ–¥–∫–ª–∞–¥–∫–∞={self.lining_combo.count()}")
                        log_debug(f"‚úÖ –ö–æ–º–±–æ–±–æ–∫—Å—ã –≤–∫–ª—é—á–µ–Ω—ã: –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è={self.perforation_combo.isEnabled()}, –ø–æ–¥–∫–ª–∞–¥–∫–∞={self.lining_combo.isEnabled()}")

                    # –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑–æ–≤–æ–π —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    self.load_specification_data(base_spec)
                else:
                    log_debug(f"‚ö†Ô∏è –ë–∞–∑–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏ ID={base_model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

            cursor.close()

            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            log_debug(f"üèÅ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: self.model_id={self.model_id}")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            self.setup_field_visibility()

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏: {e}")
        finally:
            if conn:
                self.db.put_connection(conn)

    def load_specification_data(self, spec):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–æ–±—â–∏–π –º–µ—Ç–æ–¥)"""
        from debug_logger import log_debug

        if not spec:
            log_debug("‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—É—Å—Ç–∞")
            return

        log_debug(f"üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é ID={spec.get('id', 'Unknown')}, variant_name={spec.get('variant_name', 'Unknown')}")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        if spec.get('cutting_parts'):
            cutting_parts_data = spec['cutting_parts']
            print(f"üîß –ù–∞–π–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è: {type(cutting_parts_data)}")

            self.cutting_table.setRowCount(0)

            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ JSON, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if isinstance(cutting_parts_data, str):
                try:
                    import json
                    cutting_parts_data = json.loads(cutting_parts_data)
                except json.JSONDecodeError:
                    cutting_parts_data = []

            for part in cutting_parts_data:
                row = self.cutting_table.rowCount()
                self.cutting_table.insertRow(row)

                # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∫–∞–∫ QTableWidgetItem
                item_name = QTableWidgetItem(part.get('name', ''))
                if part.get('id'):
                    item_name.setData(Qt.ItemDataRole.UserRole, part['id'])
                self.cutting_table.setItem(row, 0, item_name)

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∫ SpinBox
                qty_spin = QSpinBox()
                qty_spin.setRange(1, 100)
                qty_spin.setValue(part.get('quantity', 1))
                self.cutting_table.setCellWidget(row, 1, qty_spin)

                # –†–∞—Å—Ö–æ–¥ (–¥–º¬≤) –∫–∞–∫ DoubleSpinBox
                consumption_spin = QDoubleSpinBox()
                consumption_spin.setRange(0.1, 999.9)
                consumption_spin.setValue(part.get('consumption', 1.0))
                consumption_spin.setDecimals(1)
                consumption_spin.setSuffix(" –¥–º¬≤")
                self.cutting_table.setCellWidget(row, 2, consumption_spin)

                # –ú–∞—Ç–µ—Ä–∏–∞–ª –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                self.cutting_table.setItem(row, 3, QTableWidgetItem(part.get('material', '–ö–æ–∂–∞/–ó–∞–º—à–∞')))
                self.cutting_table.setItem(row, 4, QTableWidgetItem(part.get('notes', '')))
        else:
            print("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
        if spec.get('hardware'):
            from debug_logger import log_debug
            log_debug("üîß –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")

            # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ hardware_list –∑–∞–ø–æ–ª–Ω–µ–Ω
            if self.is_variant and (not hasattr(self, 'hardware_list') or not self.hardware_list):
                log_debug("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º hardware_list –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")
                self.load_reference_data()

            self.hardware_table.setRowCount(0)
            hardware_data = spec['hardware']
            if isinstance(hardware_data, str):
                try:
                    import json
                    hardware_data = json.loads(hardware_data)
                except json.JSONDecodeError:
                    hardware_data = []

            log_debug(f"üîß –ù–∞–π–¥–µ–Ω–æ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(hardware_data)} —à—Ç.")
            log_debug(f"üîß –í hardware_list –¥–æ—Å—Ç—É–ø–Ω–æ: {len(getattr(self, 'hardware_list', []))} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            log_debug(f"üîß –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {[hw.get('name', hw.get('material_name', 'Unknown')) for hw in hardware_data]}")

            for hw in hardware_data:
                row = self.hardware_table.rowCount()
                self.hardware_table.insertRow(row)

                # –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∫–∞–∫ ComboBox
                hw_combo = QComboBox()
                hw_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É")
                for hardware_item in getattr(self, 'hardware_list', []):
                    hw_combo.addItem(f"{hardware_item['name']} ({hardware_item['code']})", hardware_item['id'])

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
                current_text = hw.get('name', '')
                log_debug(f"üîß –ò—â–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É '{current_text}' –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ —Å {hw_combo.count()} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏")
                index = hw_combo.findText(current_text, Qt.MatchFlag.MatchContains)
                if index >= 0:
                    hw_combo.setCurrentIndex(index)
                    log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞ '{current_text}' –Ω–∞ index={index}")
                else:
                    log_debug(f"‚ùå –§—É—Ä–Ω–∏—Ç—É—Ä–∞ '{current_text}' –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ")
                    for i in range(hw_combo.count()):
                        log_debug(f"  [{i}] {hw_combo.itemText(i)}")

                self.hardware_table.setCellWidget(row, 0, hw_combo)

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                qty_spin = QSpinBox()
                qty_spin.setRange(1, 100)
                qty_spin.setValue(hw.get('quantity', 1))
                self.hardware_table.setCellWidget(row, 1, qty_spin)

                # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                unit_combo = QComboBox()
                unit_combo.addItems(["—à—Ç", "–ø–∞—Ä–∞", "–º", "—Å–º"])
                unit_text = hw.get('unit', '—à—Ç')
                unit_index = unit_combo.findText(unit_text)
                if unit_index >= 0:
                    unit_combo.setCurrentIndex(unit_index)
                self.hardware_table.setCellWidget(row, 2, unit_combo)

                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                self.hardware_table.setItem(row, 3, QTableWidgetItem(hw.get('notes', '')))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–æ—à–≤—ã
        if spec.get('soles'):
            soles_data = spec['soles']
            if isinstance(soles_data, str):
                try:
                    import json
                    soles_data = json.loads(soles_data)
                except (json.JSONDecodeError, TypeError):
                    soles_data = []

            if soles_data:
                self.soles_table.setRowCount(0)
                for sole in soles_data:
                    row = self.soles_table.rowCount()
                    self.soles_table.insertRow(row)

                    material_item = QTableWidgetItem(sole.get('material', ''))
                    if sole.get('material_id'):
                        material_item.setData(Qt.ItemDataRole.UserRole, sole['material_id'])

                    self.soles_table.setItem(row, 0, material_item)
                    self.soles_table.setItem(row, 1, QTableWidgetItem(str(sole.get('thickness', 0))))
                    self.soles_table.setItem(row, 2, QTableWidgetItem(sole.get('color', '')))
                    self.soles_table.setItem(row, 3, QTableWidgetItem(str(sole.get('heel_height', 0))))
                    self.soles_table.setItem(row, 4, QTableWidgetItem(str(sole.get('platform_height', 0))))

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏
        from debug_logger import log_debug

        # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–º–±–æ–±–æ–∫—Å—ã
        if self.is_variant:
            log_debug("üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –∏ –ø–æ–¥–∫–ª–∞–¥–∫—É –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
            if spec.get('perforation_id'):
                perforation_id = spec['perforation_id']
                log_debug(f"üé® –ù–∞–π–¥–µ–Ω–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è ID={perforation_id}")
                index = self.perforation_combo.findData(perforation_id)
                if index >= 0:
                    self.perforation_combo.setCurrentIndex(index)
                    log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è index={index}")
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –º–∞—Å—Å–∏–≤–∞ (–¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
            elif spec.get('perforation_ids'):
                try:
                    perforation_ids = spec['perforation_ids']
                    if isinstance(perforation_ids, str):
                        import json
                        perforation_ids = json.loads(perforation_ids)
                    if perforation_ids and len(perforation_ids) > 0:
                        first_perforation = perforation_ids[0]
                        log_debug(f"üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞ ID={first_perforation}")
                        log_debug(f"üîç –í –∫–æ–º–±–æ–±–æ–∫—Å–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ {self.perforation_combo.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        index = self.perforation_combo.findData(first_perforation)
                        if index >= 0:
                            self.perforation_combo.setCurrentIndex(index)
                            log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ index={index}")
                        else:
                            log_debug(f"‚ùå –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è ID={first_perforation} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ")
                            # –í—ã–≤–µ–¥–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–æ–±–æ–∫—Å–∞
                            for i in range(self.perforation_combo.count()):
                                item_data = self.perforation_combo.itemData(i)
                                item_text = self.perforation_combo.itemText(i)
                                log_debug(f"  [{i}] {item_text} = {item_data}")
                except Exception as e:
                    log_debug(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π: {e}")

            # –ü–æ–¥–∫–ª–∞–¥–∫–∞ - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            if spec.get('lining_id'):
                lining_id = spec['lining_id']
                log_debug(f"üé® –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–∫–ª–∞–¥–∫–∞ ID={lining_id}")
                index = self.lining_combo.findData(lining_id)
                if index >= 0:
                    self.lining_combo.setCurrentIndex(index)
                    log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–∫–ª–∞–¥–∫–∞ index={index}")
            elif spec.get('lining_ids'):
                try:
                    lining_ids = spec['lining_ids']
                    if isinstance(lining_ids, str):
                        import json
                        lining_ids = json.loads(lining_ids)
                    if lining_ids and len(lining_ids) > 0:
                        first_lining = lining_ids[0]
                        log_debug(f"üé® –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–¥–∫–ª–∞–¥–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞ ID={first_lining}")
                        log_debug(f"üîç –í –∫–æ–º–±–æ–±–æ–∫—Å–µ –ø–æ–¥–∫–ª–∞–¥–∫–∏ {self.lining_combo.count()} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        index = self.lining_combo.findData(first_lining)
                        if index >= 0:
                            self.lining_combo.setCurrentIndex(index)
                            log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–¥–∫–ª–∞–¥–∫–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞ index={index}")
                        else:
                            log_debug(f"‚ùå –ü–æ–¥–∫–ª–∞–¥–∫–∞ ID={first_lining} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ")
                            # –í—ã–≤–µ–¥–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–±–æ–±–æ–∫—Å–∞
                            for i in range(self.lining_combo.count()):
                                item_data = self.lining_combo.itemData(i)
                                item_text = self.lining_combo.itemText(i)
                                log_debug(f"  [{i}] {item_text} = {item_data}")
                except Exception as e:
                    log_debug(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–∞ –ø–æ–¥–∫–ª–∞–¥–æ–∫: {e}")

            # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏
            if spec.get('lasting_type_id'):
                lasting_id = spec['lasting_type_id']
                log_debug(f"üé® –ù–∞–π–¥–µ–Ω —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ ID={lasting_id}")
                index = self.lasting_combo.findData(lasting_id)
                if index >= 0:
                    self.lasting_combo.setCurrentIndex(index)
                    log_debug(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ index={index}")
                else:
                    log_debug(f"‚ö†Ô∏è –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏ ID={lasting_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–º–±–æ–±–æ–∫—Å–µ")

        else:
            # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Å—Å–∏–≤—ã –≤ —Ç–∞–±–ª–∏—Ü—ã (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
            log_debug("üé® –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—ã")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –≤ —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        from debug_logger import log_debug

        log_debug(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: is_variant={self.is_variant}, model_id={self.model_id}, specification_id={self.specification_id}")

        conn = self.db.get_connection()
        if not conn:
            return

        try:
            cursor = conn.cursor()

            if self.is_variant:
                # –î–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é, –º–æ–¥–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                log_debug(f"üíæ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: model_id={self.model_id}, specification_id={self.specification_id}")

                if not self.model_id:
                    log_debug(f"‚ùå –û—à–∏–±–∫–∞: model_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                    QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–∫–∞–∑–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å. model_id={self.model_id}, specification_id={self.specification_id}")
                    return

                log_debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –º–æ–¥–µ–ª–∏ ID={self.model_id} (specification_id={self.specification_id})")

            else:
                # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                if not self.name_input.text():
                    QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
                if self.model_id:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
                    cursor.execute("""
                        UPDATE models
                        SET name = %s, article = %s, last_code = %s,
                            last_type = %s, size_min = %s, size_max = %s,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = %s
                    """, (
                        self.name_input.text(),
                        self.article_input.text(),
                        self.last_code_input.text(),
                        self.last_type_combo.currentText(),
                        self.size_min_spin.value(),
                        self.size_max_spin.value(),
                        self.model_id
                    ))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å UUID
                    import uuid
                    cursor.execute("""
                        INSERT INTO models (uuid, name, article, last_code, last_type,
                                          size_min, size_max, model_type, gender,
                                          created_at, updated_at)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s,
                                CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                        RETURNING id
                    """, (
                        str(uuid.uuid4()),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID
                        self.name_input.text(),
                        self.article_input.text(),
                        self.last_code_input.text(),
                        self.last_type_combo.currentText(),
                        self.size_min_spin.value(),
                        self.size_max_spin.value(),
                        "–ö—Ä–æ—Å—Å–æ–≤–∫–∏",  # –¢–∏–ø –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        "–ú—É–∂—Å–∫–∞—è"    # –ü–æ–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    ))

                    result = cursor.fetchone()
                    if result:
                        self.model_id = result[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
            if self.model_id:
                if self.is_variant:
                    if self.specification_id:
                        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        spec_id = self.specification_id
                        print(f"‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID={spec_id}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–∞
                        log_debug(f"üíæ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞")

                        import uuid
                        variant_name = getattr(self, 'variant_name_input', None)
                        variant_code = getattr(self, 'variant_article_input', None)

                        log_debug(f"üíæ variant_name_input: {variant_name}, variant_code_input: {variant_code}")

                        cursor.execute("""
                            INSERT INTO specifications (uuid, model_id, is_default, is_active,
                                                       variant_name, variant_code, materials,
                                                       created_at, updated_at)
                            VALUES (%s, %s, %s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                            RETURNING id
                        """, (
                            str(uuid.uuid4()),
                            self.model_id,
                            False,  # –ù–µ –±–∞–∑–æ–≤–∞—è
                            True,   # –ê–∫—Ç–∏–≤–Ω–∞—è
                            variant_name.text() if variant_name else f"{self.name_input.text()} - –í–∞—Ä–∏–∞–Ω—Ç",
                            variant_code.text() if variant_code else "VAR-001",
                            '{}'    # –ü—É—Å—Ç–æ–π JSON –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                        ))

                        spec_result = cursor.fetchone()
                        spec_id = spec_result[0] if spec_result else None
                        log_debug(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ID={spec_id}")

                else:
                    # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é
                    cursor.execute("""
                        SELECT id FROM specifications
                        WHERE model_id = %s AND is_default = true
                        ORDER BY created_at ASC
                        LIMIT 1
                    """, (self.model_id,))

                    spec_result = cursor.fetchone()

                    if spec_result:
                        spec_id = spec_result[0]
                    else:
                        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
                        import uuid
                        cursor.execute("""
                            INSERT INTO specifications (uuid, model_id, is_default, is_active, materials,
                                                       created_at, updated_at)
                            VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                            RETURNING id
                        """, (
                            str(uuid.uuid4()),
                            self.model_id,
                            True,   # –ë–∞–∑–æ–≤–∞—è
                            True,   # –ê–∫—Ç–∏–≤–Ω–∞—è
                            '{}'    # –ü—É—Å—Ç–æ–π JSON –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                        ))

                        spec_result = cursor.fetchone()
                        spec_id = spec_result[0] if spec_result else None

                if spec_id:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    if self.is_variant:
                        # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ - –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—è—Ö
                        perforation_id = self.perforation_combo.currentData()
                        lining_id = self.lining_combo.currentData()
                        log_debug(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞: perforation_id={perforation_id}, lining_id={lining_id}")
                        perforation_ids = None
                        lining_ids = None
                    else:
                        # –î–ª—è –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ - —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤—ã
                        perforation_id = None
                        lining_id = None

                        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        perforation_ids = []
                        for row in range(self.perforation_table.rowCount()):
                            item = self.perforation_table.item(row, 0)
                            if item:
                                perf_id = item.data(Qt.ItemDataRole.UserRole)
                                if perf_id:
                                    perforation_ids.append(perf_id)

                        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID –ø–æ–¥–∫–ª–∞–¥–æ–∫ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        lining_ids = []
                        for row in range(self.lining_table.rowCount()):
                            item = self.lining_table.item(row, 0)
                            if item:
                                lining_id_item = item.data(Qt.ItemDataRole.UserRole)
                                if lining_id_item:
                                    lining_ids.append(lining_id_item)

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏ (–æ–¥–∏–Ω–∞–∫–æ–≤–æ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π)
                    lasting_type_id = self.lasting_combo.currentData()

                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ä–∞—Å–∫—Ä–æ—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    cutting_parts_data = []
                    for row in range(self.cutting_table.rowCount()):
                        part_item = self.cutting_table.item(row, 0)
                        if part_item:
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                            qty_widget = self.cutting_table.cellWidget(row, 1)
                            quantity = qty_widget.value() if qty_widget else 1

                            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥ (–¥–º¬≤)
                            consumption_widget = self.cutting_table.cellWidget(row, 2)
                            consumption = consumption_widget.value() if consumption_widget else 1.0

                            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª
                            material_widget = self.cutting_table.cellWidget(row, 3)
                            material_text = self.cutting_table.item(row, 3)
                            if material_widget and hasattr(material_widget, 'currentText'):
                                material = material_widget.currentText()
                            elif material_text:
                                material = material_text.text()
                            else:
                                material = "–ö–æ–∂–∞/–ó–∞–º—à–∞"

                            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
                            notes_item = self.cutting_table.item(row, 4)
                            notes = notes_item.text() if notes_item else ""

                            cutting_part = {
                                'name': part_item.text(),
                                'quantity': quantity,
                                'consumption': consumption,
                                'material': material,
                                'notes': notes
                            }
                            cutting_parts_data.append(cutting_part)

                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    hardware_data = []
                    log_debug(f"üíæ –°–æ–±–∏—Ä–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã: {self.hardware_table.rowCount()} —Å—Ç—Ä–æ–∫")

                    for row in range(self.hardware_table.rowCount()):
                        hw_widget = self.hardware_table.cellWidget(row, 0)
                        qty_widget = self.hardware_table.cellWidget(row, 1)
                        unit_widget = self.hardware_table.cellWidget(row, 2)
                        notes_item = self.hardware_table.item(row, 3)

                        log_debug(f"üíæ –°—Ç—Ä–æ–∫–∞ {row}: hw_widget={hw_widget is not None}, qty_widget={qty_widget is not None}, unit_widget={unit_widget is not None}")

                        if hw_widget:
                            hw_name = hw_widget.currentText() if hasattr(hw_widget, 'currentText') else str(hw_widget)
                            hw_quantity = qty_widget.value() if qty_widget else 1
                            hw_unit = unit_widget.currentText() if unit_widget else '—à—Ç'
                            hw_notes = notes_item.text() if notes_item else ''

                            log_debug(f"üíæ –§—É—Ä–Ω–∏—Ç—É—Ä–∞ [{row}]: {hw_name}, –∫–æ–ª-–≤–æ: {hw_quantity}, –µ–¥–∏–Ω–∏—Ü–∞: {hw_unit}, –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ: '{hw_notes}'")

                            hardware_item = {
                                'name': hw_name,
                                'quantity': hw_quantity,
                                'unit': hw_unit,
                                'notes': hw_notes
                            }
                            hardware_data.append(hardware_item)
                        else:
                            log_debug(f"üíæ –°—Ç—Ä–æ–∫–∞ {row}: hw_widget –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

                    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–æ—à–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                    soles_data = []
                    for row in range(self.soles_table.rowCount()):
                        material_item = self.soles_table.item(row, 0)
                        sole_item = {
                            'material': material_item.text() if material_item else '',
                            'material_id': material_item.data(Qt.ItemDataRole.UserRole) if material_item else None,
                            'thickness': float(self.soles_table.item(row, 1).text()) if self.soles_table.item(row, 1) and self.soles_table.item(row, 1).text() else 0,
                            'color': self.soles_table.item(row, 2).text() if self.soles_table.item(row, 2) else '',
                            'heel_height': float(self.soles_table.item(row, 3).text()) if self.soles_table.item(row, 3) and self.soles_table.item(row, 3).text() else 0,
                            'platform_height': float(self.soles_table.item(row, 4).text()) if self.soles_table.item(row, 4) and self.soles_table.item(row, 4).text() else 0
                        }
                        soles_data.append(sole_item)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                    log_debug(f"üíæ –í—ã–ø–æ–ª–Ω—è–µ–º UPDATE —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ ID={spec_id}")
                    log_debug(f"üíæ –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {len(hardware_data)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

                    cursor.execute("""
                        UPDATE specifications
                        SET perforation_id = %s, lining_id = %s,
                            perforation_ids = %s, lining_ids = %s,
                            lasting_type_id = %s, soles = %s,
                            cutting_parts = %s, hardware = %s,
                            updated_at = CURRENT_TIMESTAMP
                        WHERE id = %s
                    """, (perforation_id, lining_id,
                          json.dumps(perforation_ids) if perforation_ids else None,
                          json.dumps(lining_ids) if lining_ids else None,
                          lasting_type_id,
                          json.dumps(soles_data) if soles_data else None,
                          json.dumps(cutting_parts_data) if cutting_parts_data else None,
                          json.dumps(hardware_data) if hardware_data else None,
                          spec_id))

                    log_debug(f"‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:")
                    log_debug(f"  –í–∞—Ä–∏–∞–Ω—Ç: perforation_id={perforation_id}, lining_id={lining_id}")
                    log_debug(f"  –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: perforation_ids={perforation_ids}, lining_ids={lining_ids}")
                    log_debug(f"  –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏: lasting_type_id={lasting_type_id}")
                    log_debug(f"  –ü–æ–¥–æ—à–≤—ã: {len(soles_data)} —à—Ç.")
                    log_debug(f"  –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–∞—Å–∫—Ä–æ—è: {len(cutting_parts_data)} —à—Ç.")
                    log_debug(f"  –§—É—Ä–Ω–∏—Ç—É—Ä–∞: {len(hardware_data)} —à—Ç.")

                else:
                    print("‚ö†Ô∏è –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏")

            cursor.close()
            conn.commit()

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.saved.emit()
            self.accept()

        except Exception as e:
            log_debug(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
            log_debug(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            import traceback
            log_debug(f"‚ùå –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")
            conn.rollback()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª
            if conn:
                self.db.put_connection(conn)