"""–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –∑–∞–≤–æ–¥—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —É—á–µ—Ç–∞"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget,
    QFormLayout, QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QPushButton, QTextEdit,
    QLabel, QGroupBox, QCheckBox, QHeaderView, QMessageBox,
    QScrollArea, QGridLayout, QSplitter
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from database.connection import DatabaseConnection
import psycopg2.extras
import json
import uuid


class ModelSpecificationForm(QDialog):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π"""

    saved = pyqtSignal()

    def __init__(self, model_id=None, parent=None):
        super().__init__(parent)
        self.model_id = model_id
        self.db = DatabaseConnection()

        self.setWindowTitle("–ö–∞—Ä—Ç–∞ —Ä–∞—Å–∫—Ä–æ—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏")
        self.setModal(True)
        self.resize(1400, 900)

        self.setup_ui()
        self.load_reference_data()

        if model_id:
            self.load_model_data()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        header_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        header_layout = QGridLayout(header_group)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ç–∏–∫—É–ª
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –•–∞–π–∫–µ—Ä—ã –ú")
        header_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"), 0, 0)
        header_layout.addWidget(self.name_input, 0, 1)

        self.article_input = QLineEdit()
        self.article_input.setPlaceholderText("–ê—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
        header_layout.addWidget(QLabel("–ê—Ä—Ç–∏–∫—É–ª:"), 0, 2)
        header_layout.addWidget(self.article_input, 0, 3)

        # –ö–æ–ª–æ–¥–∫–∞
        self.last_code_input = QLineEdit()
        self.last_code_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 75")
        header_layout.addWidget(QLabel("–ö–æ–ª–æ–¥–∫–∞:"), 1, 0)
        header_layout.addWidget(self.last_code_input, 1, 1)

        self.last_type_combo = QComboBox()
        self.last_type_combo.addItems(["–ë–æ—Ç–∏–Ω–æ—á–Ω–∞—è", "–¢—É—Ñ–µ–ª—å–Ω–∞—è", "–°–∞–ø–æ–∂–Ω–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è"])
        header_layout.addWidget(QLabel("–¢–∏–ø –∫–æ–ª–æ–¥–∫–∏:"), 1, 2)
        header_layout.addWidget(self.last_type_combo, 1, 3)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        self.size_min_spin = QSpinBox()
        self.size_min_spin.setRange(20, 50)
        self.size_min_spin.setValue(36)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –æ—Ç:"), 2, 0)
        header_layout.addWidget(self.size_min_spin, 2, 1)

        self.size_max_spin = QSpinBox()
        self.size_max_spin.setRange(20, 50)
        self.size_max_spin.setValue(48)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –¥–æ:"), 2, 2)
        header_layout.addWidget(self.size_max_spin, 2, 3)

        layout.addWidget(header_group)

        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        self.tabs = QTabWidget()

        # 1. –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        self.cutting_tab = self.create_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "‚úÇÔ∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")

        # 2. –§—É—Ä–Ω–∏—Ç—É—Ä–∞
        self.hardware_tab = self.create_hardware_tab()
        self.tabs.addTab(self.hardware_tab, "üîß –§—É—Ä–Ω–∏—Ç—É—Ä–∞")

        # 3. –ü–æ–¥–æ—à–≤—ã
        self.sole_tab = self.create_sole_tab()
        self.tabs.addTab(self.sole_tab, "üëü –ü–æ–¥–æ—à–≤—ã")

        # 4. –í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.variants_tab = self.create_variants_tab()
        self.tabs.addTab(self.variants_tab, "üé® –í–∞—Ä–∏–∞–Ω—Ç—ã")

        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_model)
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)

        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)
        layout.addLayout(buttons_layout)

    def create_cutting_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üí° –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è - —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ö–∞ –æ–±—É–≤–∏. "
            "–î–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(4)
        self.cutting_table.setHorizontalHeaderLabels([
            "–î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = self.cutting_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setDefaultSectionSize(100)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)

        layout.addWidget(self.cutting_table)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        self.add_union_btn = QPushButton("+ –û–±—Å–æ—é–∑–∫–∞")
        self.add_union_btn.clicked.connect(lambda: self.add_cutting_part("–û–±—Å–æ—é–∑–∫–∞"))

        self.add_vamp_btn = QPushButton("+ –°–æ—é–∑–∫–∞")
        self.add_vamp_btn.clicked.connect(lambda: self.add_cutting_part("–°–æ—é–∑–∫–∞"))

        self.add_quarter_btn = QPushButton("+ –ë–µ—Ä–µ—Ü")
        self.add_quarter_btn.clicked.connect(lambda: self.add_cutting_part("–ë–µ—Ä–µ—Ü –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π"))

        self.add_counter_btn = QPushButton("+ –ó–∞–¥–Ω–∏–∫")
        self.add_counter_btn.clicked.connect(lambda: self.add_cutting_part("–ó–∞–¥–∏–Ω–∫–∞"))

        self.add_custom_btn = QPushButton("+ –î—Ä—É–≥–∞—è –¥–µ—Ç–∞–ª—å")
        self.add_custom_btn.clicked.connect(lambda: self.add_cutting_part(""))

        btn_layout.addWidget(self.add_union_btn)
        btn_layout.addWidget(self.add_vamp_btn)
        btn_layout.addWidget(self.add_quarter_btn)
        btn_layout.addWidget(self.add_counter_btn)
        btn_layout.addWidget(self.add_custom_btn)
        btn_layout.addStretch()

        layout.addLayout(btn_layout)

        return widget

    def create_hardware_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. "
            "–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: —Ä–∞–∑–º–µ—Ä—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –º–∞—Ç–µ—Ä–∏–∞–ª"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(4)
        self.hardware_table.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/–†–∞–∑–º–µ—Ä", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        header = self.hardware_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setDefaultSectionSize(150)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)

        layout.addWidget(self.hardware_table)

        # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()

        self.add_laces_btn = QPushButton("+ –®–Ω—É—Ä–∫–∏")
        self.add_laces_btn.clicked.connect(lambda: self.add_hardware_item("–®–Ω—É—Ä–∫–∏ –ø–ª–æ—Å–∫–∏–µ –≤–æ—â–µ–Ω—ã–µ", "150 —Å–º"))

        self.add_hooks_btn = QPushButton("+ –ö—Ä—é—á–∫–∏")
        self.add_hooks_btn.clicked.connect(lambda: self.add_hardware_item("–ö—Ä—é—á–∫–∏", "8 –∫—Ä—é—á–∫–æ–≤"))

        self.add_eyelets_btn = QPushButton("+ –ü–µ—Ç–ª–∏")
        self.add_eyelets_btn.clicked.connect(lambda: self.add_hardware_item("–ü–µ—Ç–ª–∏", "20 —à—Ç –Ω–∞ –ø–∞—Ä—É"))

        self.add_zipper_btn = QPushButton("+ –ú–æ–ª–Ω–∏—è")
        self.add_zipper_btn.clicked.connect(lambda: self.add_hardware_item("–ú–æ–ª–Ω–∏—è", ""))

        self.add_custom_hw_btn = QPushButton("+ –î—Ä—É–≥–æ–µ")
        self.add_custom_hw_btn.clicked.connect(lambda: self.add_hardware_item("", ""))

        btn_layout.addWidget(self.add_laces_btn)
        btn_layout.addWidget(self.add_hooks_btn)
        btn_layout.addWidget(self.add_eyelets_btn)
        btn_layout.addWidget(self.add_zipper_btn)
        btn_layout.addWidget(self.add_custom_hw_btn)
        btn_layout.addStretch()

        layout.addLayout(btn_layout)

        return widget

    def create_sole_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–æ—à–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–æ—à–≤ –¥–ª—è –º–æ–¥–µ–ª–∏. "
            "–£–∫–∞–∂–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–æ—à–≤—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä–Ω—ã–µ —Ä—è–¥—ã"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ—à–≤
        self.sole_table = QTableWidget()
        self.sole_table.setColumnCount(4)
        self.sole_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–æ—à–≤—ã", "–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        header = self.sole_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setDefaultSectionSize(150)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)

        layout.addWidget(self.sole_table)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_sole_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É")
        add_sole_btn.clicked.connect(self.add_sole)
        layout.addWidget(add_sole_btn)

        return widget

    def create_variants_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è
        perf_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏")
        perf_layout = QVBoxLayout(perf_group)
        self.perf_text = QTextEdit()
        self.perf_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–ª–Ω–∞—è –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è: —Å–æ—é–∑–∫–∞ + –±–µ—Ä–µ—Ü\n"
            "–ù–∞ —Å–æ—é–∑–∫–µ\n"
            "–ù–∞ –±–µ—Ä—Ü–µ\n"
            "–ë–µ–∑ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏"
        )
        self.perf_text.setMaximumHeight(100)
        perf_layout.addWidget(self.perf_text)
        layout.addWidget(perf_group)

        # –ü–æ–¥–∫–ª–∞–¥–∫–∞/—Å—Ç–µ–ª—å–∫–∞
        lining_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏")
        lining_layout = QVBoxLayout(lining_group)
        self.lining_text = QTextEdit()
        self.lining_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏:\n"
            "–ü–æ–ª–Ω—ã–π –ø–æ–¥–∫–ª–∞–¥: –∫–æ–∂–ø–æ–¥–∫–ª–∞–¥\n"
            "–ë–∞–π–∫–∞\n"
            "–ú–µ—Ö\n"
            "–≠–≤–∞ + —á–µ—Ä–Ω–∞—è —Å—Ç–µ–ª—å–∫–∞ 7–º–º —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞–¥–ø–∏—Å—å—é"
        )
        self.lining_text.setMaximumHeight(100)
        lining_layout.addWidget(self.lining_text)
        layout.addWidget(lining_group)

        # –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        other_group = QGroupBox("–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
        other_layout = QVBoxLayout(other_group)
        self.other_variants_text = QTextEdit()
        self.other_variants_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            "–¶–≤–µ—Ç–∞ –∫–æ–∂–∏\n"
            "–¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
        )
        self.other_variants_text.setMaximumHeight(100)
        other_layout.addWidget(self.other_variants_text)
        layout.addWidget(other_group)

        layout.addStretch()

        return widget

    def add_cutting_part(self, default_name=""):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è"""
        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
        if default_name:
            name_combo = QComboBox()
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
            parts = [
                "–û–±—Å–æ—é–∑–∫–∞", "–°–æ—é–∑–∫–∞", "–ë–µ—Ä–µ—Ü –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π", "–ë–µ—Ä–µ—Ü –Ω–∞—Ä—É–∂–Ω—ã–π",
                "–ù–∞—Å—Ç—Ä–æ—á–Ω–æ–π –±–µ—Ä–µ—Ü –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π", "–ù–∞—Å—Ç—Ä–æ—á–Ω–æ–π –±–µ—Ä–µ—Ü –Ω–∞—Ä—É–∂–Ω—ã–π",
                "–ó–∞–¥–∏–Ω–∫–∞", "–ú—è–≥–∫–∏–π –∫–∞–Ω—Ç", "–í—Å—Ç–∞–≤–∫–∞ 1", "–í—Å—Ç–∞–≤–∫–∞ 2",
                "–ì–ª—É—Ö–æ–π –∫–ª–∞–ø–∞–Ω", "–Ø–∑—ã–∫ –∫–ª–∞–ø–∞–Ω–∞", "–î–µ—Ç–∞–ª—å –∫–ª–∞–ø–∞–Ω–∞",
                "–ê–ø–ø–ª–∏–∫–∞—Ü–∏—è", "–®–ª–µ–≤–∫–∞ –∫–æ–∂–∞–Ω–∞—è", "–®–ª–µ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∏–ª—å–Ω–∞—è"
            ]
            name_combo.addItems(parts)
            name_combo.setCurrentText(default_name)
            name_combo.setEditable(True)
        else:
            name_combo = QLineEdit()
            name_combo.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏")

        self.cutting_table.setCellWidget(row, 0, name_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        qty_spin = QSpinBox()
        qty_spin.setRange(1, 20)
        qty_spin.setValue(2)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä–∞
        self.cutting_table.setCellWidget(row, 1, qty_spin)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        notes_edit = QLineEdit()
        if default_name == "–û–±—Å–æ—é–∑–∫–∞":
            notes_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —à—Ç–∞—Ñ–µ—Ä–∫–∞ –≤–Ω—É—Ç—Ä–∏ –∏–∑ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ç—Ä–∏–∫–æ—Ç–∞–∂–∞")
        elif "–ë–µ—Ä–µ—Ü" in default_name:
            notes_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞ –æ–±—É–≤—å –∏–∑ –∫–æ–∂–∏ —Ö–æ—Ä—Å –ò–ó–£–ú–†–£–î")
        else:
            notes_edit.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª, –æ–±—Ä–∞–±–æ—Ç–∫—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏")

        self.cutting_table.setCellWidget(row, 2, notes_edit)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.cutting_table.removeRow(row))
        self.cutting_table.setCellWidget(row, 3, delete_btn)

    def add_hardware_item(self, default_name="", default_spec=""):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É"""
        row = self.hardware_table.rowCount()
        self.hardware_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        if default_name:
            name_combo = QComboBox()
            items = [
                "–®–Ω—É—Ä–∫–∏ –ø–ª–æ—Å–∫–∏–µ –≤–æ—â–µ–Ω—ã–µ", "–®–Ω—É—Ä–∫–∏ –ø–ª–æ—Å–∫–∏–µ –Ω–µ–≤–æ—â–µ–Ω—ã–µ",
                "–®–Ω—É—Ä–∫–∏ –∫—Ä—É–≥–ª—ã–µ", "–ö—Ä—é—á–∫–∏", "–ü–µ—Ç–ª–∏", "–ë–ª–æ—á–∫–∏",
                "–ú–æ–ª–Ω–∏—è", "–õ–∏–ø—É—á–∫–∞", "–ü—Ä—è–∂–∫–∞", "–ö–Ω–æ–ø–∫–∏",
                "–ó–∞–∫–ª–µ–ø–∫–∏", "–õ—é–≤–µ—Ä—Å—ã"
            ]
            name_combo.addItems(items)
            name_combo.setCurrentText(default_name)
            name_combo.setEditable(True)
        else:
            name_combo = QLineEdit()
            name_combo.setPlaceholderText("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ")

        self.hardware_table.setCellWidget(row, 0, name_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ/—Ä–∞–∑–º–µ—Ä
        spec_edit = QLineEdit()
        spec_edit.setText(default_spec)
        if "–®–Ω—É—Ä–∫–∏" in default_name:
            spec_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 150 —Å–º")
        elif "–ö—Ä—é—á–∫–∏" in default_name:
            spec_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 8 –∫—Ä—é—á–∫–æ–≤")
        elif "–ü–µ—Ç–ª–∏" in default_name:
            spec_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 20 —à—Ç –Ω–∞ –ø–∞—Ä—É")
        else:
            spec_edit.setPlaceholderText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, —Ä–∞–∑–º–µ—Ä")

        self.hardware_table.setCellWidget(row, 1, spec_edit)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        notes_edit = QLineEdit()
        notes_edit.setPlaceholderText("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è")
        self.hardware_table.setCellWidget(row, 2, notes_edit)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.hardware_table.removeRow(row))
        self.hardware_table.setCellWidget(row, 3, delete_btn)

    def add_sole(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É"""
        row = self.sole_table.rowCount()
        self.sole_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–æ—à–≤—ã
        name_combo = QComboBox()
        name_combo.addItems([
            "888", "–í–û–í", "–í–û–í 2", "–ú–∏—à–ª–µ–Ω", "–¢–≠–ü",
            "–ü–æ–ª–∏—É—Ä–µ—Ç–∞–Ω", "–†–µ–∑–∏–Ω–∞", "–ö–æ–∂–∞", "–¢–ü–£"
        ])
        name_combo.setEditable(True)
        self.sole_table.setCellWidget(row, 0, name_combo)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        size_edit = QLineEdit()
        size_edit.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 39-45 –∏–ª–∏ 36-49")
        self.sole_table.setCellWidget(row, 1, size_edit)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        notes_edit = QLineEdit()
        notes_edit.setPlaceholderText("–¶–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏")
        self.sole_table.setCellWidget(row, 2, notes_edit)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.sole_table.removeRow(row))
        self.sole_table.setCellWidget(row, 3, delete_btn)

    def load_reference_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        pass

    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            if not conn:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return

            cursor = conn.cursor()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            model_data = {
                'article': self.article_input.text(),
                'name': self.name_input.text(),
                'last_code': self.last_code_input.text(),
                'last_type': self.last_type_combo.currentText(),
                'size_min': self.size_min_spin.value(),
                'size_max': self.size_max_spin.value()
            }

            # –°–±–æ—Ä –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
            cutting_parts = []
            for row in range(self.cutting_table.rowCount()):
                name_widget = self.cutting_table.cellWidget(row, 0)
                qty_widget = self.cutting_table.cellWidget(row, 1)
                notes_widget = self.cutting_table.cellWidget(row, 2)

                if name_widget:
                    part = {
                        'name': name_widget.text() if isinstance(name_widget, QLineEdit) else name_widget.currentText(),
                        'quantity': qty_widget.value() if qty_widget else 2,
                        'notes': notes_widget.text() if notes_widget else ''
                    }
                    cutting_parts.append(part)

            # –°–±–æ—Ä —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
            hardware = []
            for row in range(self.hardware_table.rowCount()):
                name_widget = self.hardware_table.cellWidget(row, 0)
                spec_widget = self.hardware_table.cellWidget(row, 1)
                notes_widget = self.hardware_table.cellWidget(row, 2)

                if name_widget:
                    hw = {
                        'name': name_widget.text() if isinstance(name_widget, QLineEdit) else name_widget.currentText(),
                        'specification': spec_widget.text() if spec_widget else '',
                        'notes': notes_widget.text() if notes_widget else ''
                    }
                    hardware.append(hw)

            # –°–±–æ—Ä –ø–æ–¥–æ—à–≤
            soles = []
            for row in range(self.sole_table.rowCount()):
                name_widget = self.sole_table.cellWidget(row, 0)
                size_widget = self.sole_table.cellWidget(row, 1)
                notes_widget = self.sole_table.cellWidget(row, 2)

                if name_widget:
                    sole = {
                        'name': name_widget.text() if isinstance(name_widget, QLineEdit) else name_widget.currentText(),
                        'size_range': size_widget.text() if size_widget else '',
                        'notes': notes_widget.text() if notes_widget else ''
                    }
                    soles.append(sole)

            # –í–∞—Ä–∏–∞–Ω—Ç—ã
            variants = {
                'perforation': self.perf_text.toPlainText().split('\n') if self.perf_text.toPlainText() else [],
                'lining': self.lining_text.toPlainText().split('\n') if self.lining_text.toPlainText() else [],
                'other': self.other_variants_text.toPlainText().split('\n') if self.other_variants_text.toPlainText() else []
            }

            if self.model_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    UPDATE models
                    SET article = %s, name = %s, last_code = %s, last_type = %s,
                        size_min = %s, size_max = %s, updated_at = NOW()
                    WHERE id = %s
                """, (model_data['article'], model_data['name'], model_data['last_code'],
                      model_data['last_type'], model_data['size_min'], model_data['size_max'],
                      self.model_id))
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    INSERT INTO models (article, name, last_code, last_type, size_min, size_max, uuid)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    RETURNING id
                """, (model_data['article'], model_data['name'], model_data['last_code'],
                      model_data['last_type'], model_data['size_min'], model_data['size_max'],
                      str(uuid.uuid4())))

                self.model_id = cursor.fetchone()[0]

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            spec_data = {
                'cutting_parts': json.dumps(cutting_parts, ensure_ascii=False),
                'hardware': json.dumps(hardware, ensure_ascii=False),
                'variants': json.dumps(variants, ensure_ascii=False)
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è
            cursor.execute("""
                SELECT id FROM specifications
                WHERE model_id = %s AND is_default = true
            """, (self.model_id,))

            spec_row = cursor.fetchone()

            if spec_row:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
                cursor.execute("""
                    UPDATE specifications
                    SET cutting_parts = %s, hardware = %s, variants = %s, updated_at = NOW()
                    WHERE id = %s
                """, (spec_data['cutting_parts'], spec_data['hardware'],
                      spec_data['variants'], spec_row[0]))
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                cursor.execute("""
                    INSERT INTO specifications
                    (model_id, version, is_default, is_active, cutting_parts, hardware, variants, uuid)
                    VALUES (%s, 1, true, true, %s, %s, %s, %s)
                """, (self.model_id, spec_data['cutting_parts'], spec_data['hardware'],
                      spec_data['variants'], str(uuid.uuid4())))

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.saved.emit()
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        if not self.article_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
            return False

        if not self.name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            return False

        if not self.last_code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–æ–¥–∫—É")
            return False

        return True

    def load_model_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        pass