"""–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget,
    QFormLayout, QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QPushButton, QTextEdit,
    QLabel, QGroupBox, QCheckBox, QHeaderView, QMessageBox,
    QScrollArea, QGridLayout, QAbstractItemView
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from database.connection import DatabaseConnection
import psycopg2.extras
import json
import uuid


class ModelSpecificationFormV2(QDialog):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –≤—ã–±–æ—Ä–æ–º –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ –ë–î"""

    saved = pyqtSignal()

    def __init__(self, model_id=None, parent=None):
        super().__init__(parent)
        self.model_id = model_id
        self.db = DatabaseConnection()

        # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        self.cutting_parts_list = []  # –°–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –∏–∑ –ë–î
        self.hardware_list = []  # –°–ø–∏—Å–æ–∫ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ –ë–î
        self.materials_list = []  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

        self.setWindowTitle("–ö–∞—Ä—Ç–∞ —Ä–∞—Å–∫—Ä–æ—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏")
        self.setModal(True)
        self.resize(1400, 900)

        self.setup_ui()
        self.load_reference_data()

        if model_id:
            self.load_model_data()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
        header_group = QGroupBox("–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏")
        header_layout = QGridLayout(header_group)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –∞—Ä—Ç–∏–∫—É–ª
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –•–∞–π–∫–µ—Ä—ã –ú")
        header_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ:"), 0, 0)
        header_layout.addWidget(self.name_input, 0, 1)

        self.article_input = QLineEdit()
        self.article_input.setPlaceholderText("–ê—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
        header_layout.addWidget(QLabel("–ê—Ä—Ç–∏–∫—É–ª:"), 0, 2)
        header_layout.addWidget(self.article_input, 0, 3)

        # –ö–æ–ª–æ–¥–∫–∞
        self.last_code_input = QLineEdit()
        self.last_code_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 75")
        header_layout.addWidget(QLabel("–ö–æ–ª–æ–¥–∫–∞:"), 1, 0)
        header_layout.addWidget(self.last_code_input, 1, 1)

        self.last_type_combo = QComboBox()
        self.last_type_combo.addItems(["–ë–æ—Ç–∏–Ω–æ—á–Ω–∞—è", "–¢—É—Ñ–µ–ª—å–Ω–∞—è", "–°–∞–ø–æ–∂–Ω–∞—è", "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è"])
        header_layout.addWidget(QLabel("–¢–∏–ø –∫–æ–ª–æ–¥–∫–∏:"), 1, 2)
        header_layout.addWidget(self.last_type_combo, 1, 3)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        self.size_min_spin = QSpinBox()
        self.size_min_spin.setRange(20, 50)
        self.size_min_spin.setValue(36)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –æ—Ç:"), 2, 0)
        header_layout.addWidget(self.size_min_spin, 2, 1)

        self.size_max_spin = QSpinBox()
        self.size_max_spin.setRange(20, 50)
        self.size_max_spin.setValue(48)
        header_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä –¥–æ:"), 2, 2)
        header_layout.addWidget(self.size_max_spin, 2, 3)

        layout.addWidget(header_group)

        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–æ–≤
        self.tabs = QTabWidget()

        # 1. –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        self.cutting_tab = self.create_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "‚úÇÔ∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")

        # 2. –§—É—Ä–Ω–∏—Ç—É—Ä–∞
        self.hardware_tab = self.create_hardware_tab()
        self.tabs.addTab(self.hardware_tab, "üîß –§—É—Ä–Ω–∏—Ç—É—Ä–∞")

        # 3. –ü–æ–¥–æ—à–≤—ã
        self.sole_tab = self.create_sole_tab()
        self.tabs.addTab(self.sole_tab, "üëü –ü–æ–¥–æ—à–≤—ã")

        # 4. –í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        self.variants_tab = self.create_variants_tab()
        self.tabs.addTab(self.variants_tab, "üé® –í–∞—Ä–∏–∞–Ω—Ç—ã")

        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_model)
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)

        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)
        layout.addLayout(buttons_layout)

    def create_cutting_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üí° –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è - —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ö–∞ –æ–±—É–≤–∏. "
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –¥–º¬≤ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –¥–µ—Ç–∞–ª–∏
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_part_combo = QComboBox()
        self.cutting_part_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        self.cutting_part_combo.setMinimumWidth(250)
        add_layout.addWidget(QLabel("–î–µ—Ç–∞–ª—å:"))
        add_layout.addWidget(self.cutting_part_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.cutting_qty_spin = QSpinBox()
        self.cutting_qty_spin.setRange(1, 20)
        self.cutting_qty_spin.setValue(2)
        add_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
        add_layout.addWidget(self.cutting_qty_spin)

        # –†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.cutting_consumption_spin = QDoubleSpinBox()
        self.cutting_consumption_spin.setRange(0, 999)
        self.cutting_consumption_spin.setDecimals(2)
        self.cutting_consumption_spin.setSuffix(" –¥–º¬≤")
        add_layout.addWidget(QLabel("–†–∞—Å—Ö–æ–¥:"))
        add_layout.addWidget(self.cutting_consumption_spin)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_cutting_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å")
        self.add_cutting_btn.clicked.connect(self.add_cutting_part)
        add_layout.addWidget(self.add_cutting_btn)

        add_layout.addStretch()
        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(5)
        self.cutting_table.setHorizontalHeaderLabels([
            "–î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞—Å—Ö–æ–¥ (–¥–º¬≤)", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = self.cutting_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # –î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        header.setDefaultSectionSize(100)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)            # –†–∞—Å—Ö–æ–¥
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)          # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)            # –£–¥–∞–ª–∏—Ç—å

        # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏)
        self.cutting_table.setEditTriggers(QAbstractItemView.EditTrigger.DoubleClicked | QAbstractItemView.EditTrigger.EditKeyPressed)

        layout.addWidget(self.cutting_table)

        return widget

    def create_hardware_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≥—Ä—É–ø–ø–∞ –§–£–†–ù–ò–¢–£–†–ê) –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.hardware_combo = QComboBox()
        self.hardware_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤...")
        self.hardware_combo.setMinimumWidth(350)
        add_layout.addWidget(QLabel("–§—É—Ä–Ω–∏—Ç—É—Ä–∞:"))
        add_layout.addWidget(self.hardware_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—á–∏—Å–ª–æ–≤–æ–µ –ø–æ–ª–µ)
        self.hardware_qty_spin = QDoubleSpinBox()
        self.hardware_qty_spin.setRange(0, 9999)
        self.hardware_qty_spin.setDecimals(2)
        self.hardware_qty_spin.setValue(1)
        add_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
        add_layout.addWidget(self.hardware_qty_spin)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_hardware_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É")
        self.add_hardware_btn.clicked.connect(self.add_hardware_item)
        add_layout.addWidget(self.add_hardware_btn)

        add_layout.addStretch()
        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(5)
        self.hardware_table.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥. –∏–∑–º.", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        header = self.hardware_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)  # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)             # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        header.setDefaultSectionSize(100)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)             # –ï–¥. –∏–∑–º.
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)           # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)             # –£–¥–∞–ª–∏—Ç—å

        # –†–∞–∑—Ä–µ—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–π (–Ω–∞–∑–≤–∞–Ω–∏–µ) –∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.hardware_table.setEditTriggers(QAbstractItemView.EditTrigger.DoubleClicked | QAbstractItemView.EditTrigger.EditKeyPressed)

        layout.addWidget(self.hardware_table)

        return widget

    def create_sole_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–æ—à–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–æ—à–≤ –¥–ª—è –º–æ–¥–µ–ª–∏. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–≥—Ä—É–ø–ø–∞ –ü–û–î–û–®–í–ê) –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ—à–≤—ã
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ—à–≤
        self.sole_combo = QComboBox()
        self.sole_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ—à–≤—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        self.sole_combo.setMinimumWidth(300)
        add_layout.addWidget(QLabel("–ü–æ–¥–æ—à–≤–∞:"))
        add_layout.addWidget(self.sole_combo)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        self.sole_size_input = QLineEdit()
        self.sole_size_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 39-45")
        add_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥:"))
        add_layout.addWidget(self.sole_size_input)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        self.sole_notes_input = QLineEdit()
        self.sole_notes_input.setPlaceholderText("–¶–≤–µ—Ç, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏")
        add_layout.addWidget(QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:"))
        add_layout.addWidget(self.sole_notes_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        self.add_sole_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É")
        self.add_sole_btn.clicked.connect(self.add_sole)
        add_layout.addWidget(self.add_sole_btn)

        add_layout.addStretch()
        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ—à–≤
        self.sole_table = QTableWidget()
        self.sole_table.setColumnCount(4)
        self.sole_table.setHorizontalHeaderLabels([
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–æ—à–≤—ã", "–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥", "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è", "–£–¥–∞–ª–∏—Ç—å"
        ])

        header = self.sole_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setDefaultSectionSize(150)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)

        self.sole_table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)

        layout.addWidget(self.sole_table)

        return widget

    def create_variants_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è
        perf_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏")
        perf_layout = QVBoxLayout(perf_group)
        self.perf_text = QTextEdit()
        self.perf_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:\n"
            "–ü–æ–ª–Ω–∞—è –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è: —Å–æ—é–∑–∫–∞ + –±–µ—Ä–µ—Ü\n"
            "–ù–∞ —Å–æ—é–∑–∫–µ\n"
            "–ù–∞ –±–µ—Ä—Ü–µ\n"
            "–ë–µ–∑ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏"
        )
        self.perf_text.setMaximumHeight(100)
        perf_layout.addWidget(self.perf_text)
        layout.addWidget(perf_group)

        # –ü–æ–¥–∫–ª–∞–¥–∫–∞/—Å—Ç–µ–ª—å–∫–∞
        lining_group = QGroupBox("–í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏")
        lining_layout = QVBoxLayout(lining_group)
        self.lining_text = QTextEdit()
        self.lining_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏:\n"
            "–ü–æ–ª–Ω—ã–π –ø–æ–¥–∫–ª–∞–¥: –∫–æ–∂–ø–æ–¥–∫–ª–∞–¥\n"
            "–ë–∞–π–∫–∞\n"
            "–ú–µ—Ö\n"
            "–≠–≤–∞ + —á–µ—Ä–Ω–∞—è —Å—Ç–µ–ª—å–∫–∞ 7–º–º —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –Ω–∞–¥–ø–∏—Å—å—é"
        )
        self.lining_text.setMaximumHeight(100)
        lining_layout.addWidget(self.lining_text)
        layout.addWidget(lining_group)

        # –î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        other_group = QGroupBox("–î—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
        other_layout = QVBoxLayout(other_group)
        self.other_variants_text = QTextEdit()
        self.other_variants_text.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n"
            "–¶–≤–µ—Ç–∞ –∫–æ–∂–∏\n"
            "–¢–∏–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è"
        )
        self.other_variants_text.setMaximumHeight(100)
        other_layout.addWidget(self.other_variants_text)
        layout.addWidget(other_group)

        layout.addStretch()

        return widget

    def load_reference_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
            cursor.execute("""
                SELECT id, code, name, category, default_qty, notes
                FROM cutting_parts
                WHERE is_active = true AND is_cutting = true
                ORDER BY category, name
            """)

            self.cutting_parts_list = cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
            self.cutting_part_combo.clear()
            self.cutting_part_combo.addItem("", None)

            current_category = None
            for part in self.cutting_parts_list:
                # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                if part['category'] != current_category:
                    current_category = part['category']
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    self.cutting_part_combo.addItem(f"--- {current_category or '–î–†–£–ì–û–ï'} ---", None)
                    self.cutting_part_combo.model().item(self.cutting_part_combo.count()-1).setEnabled(False)

                display_text = f"{part['code']} - {part['name']}"
                self.cutting_part_combo.addItem(display_text, part)

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –∏–∑ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            cursor.execute("""
                SELECT id, code, name, material_type, unit, price
                FROM materials
                WHERE is_active = true AND group_type = 'HARDWARE'
                ORDER BY name
            """)

            self.hardware_list = cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
            self.hardware_combo.clear()
            self.hardware_combo.addItem("", None)

            for hw in self.hardware_list:
                display_text = f"{hw['code']} - {hw['name']}"
                if hw['unit']:
                    display_text += f" ({hw['unit']})"
                self.hardware_combo.addItem(display_text, hw)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–æ—à–≤
            cursor.execute("""
                SELECT id, code, name, material_type, unit
                FROM materials
                WHERE is_active = true AND group_type = 'SOLE'
                ORDER BY name
            """)

            sole_list = cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ –ø–æ–¥–æ—à–≤
            self.sole_combo.clear()
            self.sole_combo.addItem("", None)

            for sole in sole_list:
                display_text = f"{sole['code']} - {sole['name']}"
                self.sole_combo.addItem(display_text, sole)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {e}")

    def add_cutting_part(self):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –≤ —Ç–∞–±–ª–∏—Ü—É"""
        part_data = self.cutting_part_combo.currentData()

        if not part_data:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        for row in range(self.cutting_table.rowCount()):
            if self.cutting_table.item(row, 0).text() == f"{part_data['code']} - {part_data['name']}":
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–≠—Ç–∞ –¥–µ—Ç–∞–ª—å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                return

        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
        item_detail = QTableWidgetItem(f"{part_data['code']} - {part_data['name']}")
        item_detail.setFlags(item_detail.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.cutting_table.setItem(row, 0, item_detail)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
        item_qty = QTableWidgetItem(str(self.cutting_qty_spin.value()))
        self.cutting_table.setItem(row, 1, item_qty)

        # –†–∞—Å—Ö–æ–¥ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)
        item_consumption = QTableWidgetItem(f"{self.cutting_consumption_spin.value():.2f}")
        self.cutting_table.setItem(row, 2, item_consumption)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ) - –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        item_notes = QTableWidgetItem("")
        self.cutting_table.setItem(row, 3, item_notes)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.cutting_table.removeRow(self.cutting_table.currentRow()))
        self.cutting_table.setCellWidget(row, 4, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.cutting_part_combo.setCurrentIndex(0)
        self.cutting_qty_spin.setValue(2)
        self.cutting_consumption_spin.setValue(0)

    def add_hardware_item(self):
        """–î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
        hw_data = self.hardware_combo.currentData()

        if not hw_data:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        row = self.hardware_table.rowCount()
        self.hardware_table.insertRow(row)

        # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
        item_name = QTableWidgetItem(f"{hw_data['code']} - {hw_data['name']}")
        item_name.setFlags(item_name.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.hardware_table.setItem(row, 0, item_name)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
        item_qty = QTableWidgetItem(f"{self.hardware_qty_spin.value():.2f}")
        self.hardware_table.setItem(row, 1, item_qty)

        # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
        unit = hw_data.get('unit', '—à—Ç')
        item_unit = QTableWidgetItem(unit)
        item_unit.setFlags(item_unit.flags() & ~Qt.ItemFlag.ItemIsEditable)
        self.hardware_table.setItem(row, 2, item_unit)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ) - –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        item_notes = QTableWidgetItem("")
        self.hardware_table.setItem(row, 3, item_notes)

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.hardware_table.removeRow(self.hardware_table.currentRow()))
        self.hardware_table.setCellWidget(row, 4, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        self.hardware_combo.setCurrentIndex(0)
        self.hardware_qty_spin.setValue(1)

    def add_sole(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É –≤ —Ç–∞–±–ª–∏—Ü—É"""
        sole_data = self.sole_combo.currentData()

        if not sole_data:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ—à–≤—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return

        row = self.sole_table.rowCount()
        self.sole_table.insertRow(row)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.sole_table.setItem(row, 0, QTableWidgetItem(f"{sole_data['code']} - {sole_data['name']}"))

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        size_range = self.sole_size_input.text()
        if not size_range:
            size_range = f"{self.size_min_spin.value()}-{self.size_max_spin.value()}"
        self.sole_table.setItem(row, 1, QTableWidgetItem(size_range))

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
        self.sole_table.setItem(row, 2, QTableWidgetItem(self.sole_notes_input.text()))

        # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        delete_btn = QPushButton("üóë")
        delete_btn.clicked.connect(lambda: self.sole_table.removeRow(self.sole_table.currentRow()))
        self.sole_table.setCellWidget(row, 3, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        self.sole_combo.setCurrentIndex(0)
        self.sole_size_input.clear()
        self.sole_notes_input.clear()

    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            if not conn:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
                return

            cursor = conn.cursor()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            model_data = {
                'article': self.article_input.text(),
                'name': self.name_input.text(),
                'last_code': self.last_code_input.text(),
                'last_type': self.last_type_combo.currentText(),
                'size_min': self.size_min_spin.value(),
                'size_max': self.size_max_spin.value()
            }

            if self.model_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    UPDATE models
                    SET article = %s, name = %s, last_code = %s, last_type = %s,
                        size_min = %s, size_max = %s, updated_at = NOW()
                    WHERE id = %s
                """, (model_data['article'], model_data['name'], model_data['last_code'],
                      model_data['last_type'], model_data['size_min'], model_data['size_max'],
                      self.model_id))
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    INSERT INTO models (article, name, last_code, last_type, size_min, size_max, uuid)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                    RETURNING id
                """, (model_data['article'], model_data['name'], model_data['last_code'],
                      model_data['last_type'], model_data['size_min'], model_data['size_max'],
                      str(uuid.uuid4())))

                self.model_id = cursor.fetchone()[0]

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            cursor.execute("DELETE FROM model_components WHERE model_id = %s", (self.model_id,))

            sort_order = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è –≤ model_components
            for row in range(self.cutting_table.rowCount()):
                component_name = self.cutting_table.item(row, 0).text()
                quantity = int(self.cutting_table.item(row, 1).text())
                consumption = float(self.cutting_table.item(row, 2).text())  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
                notes = self.cutting_table.item(row, 3).text()  # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –≤ 4-–π –∫–æ–ª–æ–Ω–∫–µ

                cursor.execute("""
                    INSERT INTO model_components
                    (model_id, component_name, component_group, absolute_consumption, unit, notes, sort_order)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (self.model_id, component_name.split(' - ')[-1] if ' - ' in component_name else component_name,
                      'cutting', consumption, '–¥–º¬≤', notes, sort_order))
                sort_order += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –≤ model_components
            for row in range(self.hardware_table.rowCount()):
                component_name = self.hardware_table.item(row, 0).text()
                quantity = float(self.hardware_table.item(row, 1).text())
                unit = self.hardware_table.item(row, 2).text()
                notes = self.hardware_table.item(row, 3).text()

                cursor.execute("""
                    INSERT INTO model_components
                    (model_id, component_name, component_group, absolute_consumption, unit, notes, sort_order)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (self.model_id, component_name.split(' - ')[-1] if ' - ' in component_name else component_name,
                      'material', quantity, unit, notes, sort_order))
                sort_order += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–æ—à–≤—ã –≤ model_components
            for row in range(self.sole_table.rowCount()):
                sole_name = self.sole_table.item(row, 0).text()
                size_range = self.sole_table.item(row, 1).text()
                notes = self.sole_table.item(row, 2).text()

                cursor.execute("""
                    INSERT INTO model_components
                    (model_id, component_name, component_group, unit, notes, sort_order)
                    VALUES (%s, %s, %s, %s, %s, %s)
                """, (self.model_id, sole_name.split(' - ')[-1] if ' - ' in sole_name else sole_name,
                      'sole', size_range, notes, sort_order))
                sort_order += 1

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.saved.emit()
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        if not self.article_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
            return False

        if not self.name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            return False

        if not self.last_code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–æ–¥–∫—É")
            return False

        if self.cutting_table.rowCount() == 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è")
            self.tabs.setCurrentIndex(0)
            return False

        return True

    def load_model_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            cursor.execute("SELECT * FROM models WHERE id = %s", (self.model_id,))
            model = cursor.fetchone()

            if model:
                self.article_input.setText(model['article'] or '')
                self.name_input.setText(model['name'] or '')
                self.last_code_input.setText(model['last_code'] or '')
                if model['last_type']:
                    self.last_type_combo.setCurrentText(model['last_type'])
                if model['size_min']:
                    self.size_min_spin.setValue(model['size_min'])
                if model['size_max']:
                    self.size_max_spin.setValue(model['size_max'])

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ model_components
            cursor.execute("""
                SELECT component_name, component_group, absolute_consumption, unit, notes
                FROM model_components
                WHERE model_id = %s
                ORDER BY sort_order, component_group, component_name
            """, (self.model_id,))

            components = cursor.fetchall()

            for comp in components:
                if comp['component_group'] == 'cutting':
                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è
                    row = self.cutting_table.rowCount()
                    self.cutting_table.insertRow(row)

                    # –î–µ—Ç–∞–ª–∏—Ä–æ–≤–∫–∞ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
                    item_detail = QTableWidgetItem(comp['component_name'])
                    item_detail.setFlags(item_detail.flags() & ~Qt.ItemFlag.ItemIsEditable)
                    self.cutting_table.setItem(row, 0, item_detail)

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
                    self.cutting_table.setItem(row, 1, QTableWidgetItem("2"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä–∞

                    # –†–∞—Å—Ö–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π)
                    consumption = comp['absolute_consumption'] if comp['absolute_consumption'] else 0
                    self.cutting_table.setItem(row, 2, QTableWidgetItem(f"{consumption:.2f}"))

                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ)
                    notes = comp['notes'] or ''
                    # –£–±–∏—Ä–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∏–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
                    if '–†–∞—Å—Ö–æ–¥:' in notes:
                        notes = notes.split('–†–∞—Å—Ö–æ–¥:')[0].strip()
                    self.cutting_table.setItem(row, 3, QTableWidgetItem(notes))

                    delete_btn = QPushButton("üóë")
                    delete_btn.clicked.connect(lambda: self.cutting_table.removeRow(self.cutting_table.currentRow()))
                    self.cutting_table.setCellWidget(row, 4, delete_btn)

                elif comp['component_group'] == 'material':
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
                    row = self.hardware_table.rowCount()
                    self.hardware_table.insertRow(row)

                    # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
                    item_name = QTableWidgetItem(comp['component_name'])
                    item_name.setFlags(item_name.flags() & ~Qt.ItemFlag.ItemIsEditable)
                    self.hardware_table.setItem(row, 0, item_name)

                    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–µ)
                    quantity = comp['absolute_consumption'] if comp['absolute_consumption'] else 1
                    self.hardware_table.setItem(row, 1, QTableWidgetItem(f"{quantity:.2f}"))

                    # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è (–Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è)
                    unit = comp['unit'] or '—à—Ç'
                    item_unit = QTableWidgetItem(unit)
                    item_unit.setFlags(item_unit.flags() & ~Qt.ItemFlag.ItemIsEditable)
                    self.hardware_table.setItem(row, 2, item_unit)

                    # –ü—Ä–∏–º–µ—á–∞–Ω–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ)
                    self.hardware_table.setItem(row, 3, QTableWidgetItem(comp['notes'] or ''))

                    delete_btn = QPushButton("üóë")
                    delete_btn.clicked.connect(lambda: self.hardware_table.removeRow(self.hardware_table.currentRow()))
                    self.hardware_table.setCellWidget(row, 4, delete_btn)

                elif comp['component_group'] == 'sole':
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–æ—à–≤—É
                    row = self.sole_table.rowCount()
                    self.sole_table.insertRow(row)
                    self.sole_table.setItem(row, 0, QTableWidgetItem(comp['component_name']))
                    self.sole_table.setItem(row, 1, QTableWidgetItem(comp['unit'] or ''))
                    self.sole_table.setItem(row, 2, QTableWidgetItem(comp['notes'] or ''))

                    delete_btn = QPushButton("üóë")
                    delete_btn.clicked.connect(lambda: self.sole_table.removeRow(self.sole_table.currentRow()))
                    self.sole_table.setCellWidget(row, 3, delete_btn)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {e}")