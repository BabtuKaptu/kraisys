"""Full materials reference view with database integration"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QDoubleValidator
from ui.base.base_table_v2 import BaseTableWidgetV2
from ui.base.base_form import BaseFormDialog
from database.connection import DatabaseConnection
import psycopg2.extras
import json


class MaterialsTableFullWidget(BaseTableWidgetV2):
    """–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ë–î"""

    def __init__(self, parent=None):
        super().__init__('materials', parent)
        self.setWindowTitle("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ")

    def get_visible_columns(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        return ['code', 'name', 'group_type', 'material_type', 'color',
                'unit', 'price', 'supplier_name', 'is_active']

    def get_column_label(self, column_name):
        """–ú–µ—Ç–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        labels = {
            'code': '–ö–æ–¥',
            'name': '–ù–∞–∑–≤–∞–Ω–∏–µ',
            'name_en': '–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª)',
            'group_type': '–ì—Ä—É–ø–ø–∞',
            'subgroup': '–ü–æ–¥–≥—Ä—É–ø–ø–∞',
            'material_type': '–¢–∏–ø',
            'color': '–¶–≤–µ—Ç',
            'texture': '–¢–µ–∫—Å—Ç—É—Ä–∞',
            'thickness': '–¢–æ–ª—â–∏–Ω–∞',
            'density': '–ü–ª–æ—Ç–Ω–æ—Å—Ç—å',
            'unit': '–ï–¥.–∏–∑–º',
            'unit_secondary': '–ï–¥.–∏–∑–º.2',
            'conversion_factor': '–ö–æ—ç—Ñ—Ñ.–ø–µ—Ä–µ–≤–æ–¥–∞',
            'price': '–¶–µ–Ω–∞',
            'currency': '–í–∞–ª—é—Ç–∞',
            'supplier_name': '–ü–æ—Å—Ç–∞–≤—â–∏–∫',
            'supplier_code': '–ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞',
            'lead_time_days': '–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏',
            'min_order_qty': '–ú–∏–Ω.–∑–∞–∫–∞–∑',
            'order_multiplicity': '–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å',
            'safety_stock': '–°—Ç—Ä–∞—Ö.–∑–∞–ø–∞—Å',
            'reorder_point': '–¢–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞',
            'max_stock': '–ú–∞–∫—Å.–∑–∞–ø–∞—Å',
            'storage_conditions': '–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è',
            'is_active': '–ê–∫—Ç–∏–≤–µ–Ω',
            'is_critical': '–ö—Ä–∏—Ç–∏—á–Ω—ã–π'
        }
        return labels.get(column_name, column_name.replace('_', ' ').title())

    def get_search_columns(self):
        """–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return ['code', 'name', 'supplier_name', 'material_type']

    def add_record(self):
        dialog = MaterialFullFormDialog("–ù–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª", self)
        if dialog.exec():
            self.refresh_data()

    def edit_record(self):
        record_id = self.get_current_record_id()
        if record_id:
            dialog = MaterialFullFormDialog("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞", self)
            dialog.load_data(record_id)
            if dialog.exec():
                self.refresh_data()


class MaterialFullFormDialog(BaseFormDialog):
    """–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""

    def __init__(self, title: str, parent=None):
        self.record_id = None
        self.db = DatabaseConnection()
        super().__init__(title, parent)
        self.resize(900, 700)

    def create_form_content(self):
        # –¢–∞–±—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        self.tabs = QTabWidget()
        self.layout.addWidget(self.tabs)

        # –í–∫–ª–∞–¥–∫–∏
        self.create_main_tab()
        self.create_specs_tab()
        self.create_supply_tab()
        self.create_stock_tab()

    def create_main_tab(self):
        """–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –ö–æ–¥
        self.code_input = QLineEdit()
        self.code_input.setPlaceholderText("–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        layout.addRow("–ö–æ–¥:", self.code_input)

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", self.name_input)

        # –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        self.name_en_input = QLineEdit()
        self.name_en_input.setPlaceholderText("English name")
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ (–∞–Ω–≥–ª):", self.name_en_input)

        # –ì—Ä—É–ø–ø–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ enum)
        self.group_combo = QComboBox()
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—ã (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ë–î)
        self.group_items = [
            ("", None),
            ("–ö–æ–∂–∞", "LEATHER"),
            ("–ü–æ–¥–æ—à–≤–∞", "SOLE"),
            ("–§—É—Ä–Ω–∏—Ç—É—Ä–∞", "HARDWARE"),
            ("–ü–æ–¥–∫–ª–∞–¥–∫–∞", "LINING"),
            ("–•–∏–º–∏—è", "CHEMICAL"),
            ("–£–ø–∞–∫–æ–≤–∫–∞", "PACKAGING")
        ]
        for display, value in self.group_items:
            self.group_combo.addItem(display, value)
        layout.addRow("–ì—Ä—É–ø–ø–∞:", self.group_combo)

        # –ü–æ–¥–≥—Ä—É–ø–ø–∞
        self.subgroup_input = QLineEdit()
        self.subgroup_input.setPlaceholderText("–ü–æ–¥–≥—Ä—É–ø–ø–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        layout.addRow("–ü–æ–¥–≥—Ä—É–ø–ø–∞:", self.subgroup_input)

        # –¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.material_type_input = QLineEdit()
        self.material_type_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è")
        layout.addRow("–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞:", self.material_type_input)

        # –¶–≤–µ—Ç
        self.color_input = QLineEdit()
        self.color_input.setPlaceholderText("–¶–≤–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        layout.addRow("–¶–≤–µ—Ç:", self.color_input)

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.is_active_check = QCheckBox()
        self.is_active_check.setChecked(True)
        layout.addRow("–ê–∫—Ç–∏–≤–µ–Ω:", self.is_active_check)

        # –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å
        self.is_critical_check = QCheckBox()
        layout.addRow("–ö—Ä–∏—Ç–∏—á–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:", self.is_critical_check)

        self.tabs.addTab(tab, "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    def create_specs_tab(self):
        """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –¢–µ–∫—Å—Ç—É—Ä–∞
        self.texture_input = QLineEdit()
        self.texture_input.setPlaceholderText("–ì–ª–∞–¥–∫–∞—è, —Ä–µ–ª—å–µ—Ñ–Ω–∞—è, –∑–∞–º—à–∞...")
        layout.addRow("–¢–µ–∫—Å—Ç—É—Ä–∞:", self.texture_input)

        # –¢–æ–ª—â–∏–Ω–∞
        self.thickness_spin = QDoubleSpinBox()
        self.thickness_spin.setRange(0, 100)
        self.thickness_spin.setDecimals(2)
        self.thickness_spin.setSuffix(" –º–º")
        layout.addRow("–¢–æ–ª—â–∏–Ω–∞:", self.thickness_spin)

        # –ü–ª–æ—Ç–Ω–æ—Å—Ç—å
        self.density_spin = QDoubleSpinBox()
        self.density_spin.setRange(0, 9999)
        self.density_spin.setDecimals(3)
        self.density_spin.setSuffix(" –≥/—Å–º¬≥")
        layout.addRow("–ü–ª–æ—Ç–Ω–æ—Å—Ç—å:", self.density_spin)

        # –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
        layout.addRow(QLabel("<b>–ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b>"))

        self.unit_combo = QComboBox()
        self.unit_combo.addItems([
            "–¥–º¬≤", "–º¬≤", "–º", "–∫–≥", "–≥", "–ª", "–º–ª",
            "—à—Ç", "–ø–∞—Ä–∞", "–∫–æ–º–ø–ª", "—É–ø"
        ])
        layout.addRow("–û—Å–Ω–æ–≤–Ω–∞—è –µ–¥.–∏–∑–º:", self.unit_combo)

        self.unit_secondary_combo = QComboBox()
        self.unit_secondary_combo.addItems([
            "", "–¥–º¬≤", "–º¬≤", "–º", "–∫–≥", "–≥", "–ª", "–º–ª",
            "—à—Ç", "–ø–∞—Ä–∞", "–∫–æ–º–ø–ª", "—É–ø"
        ])
        layout.addRow("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –µ–¥.–∏–∑–º:", self.unit_secondary_combo)

        self.conversion_factor_spin = QDoubleSpinBox()
        self.conversion_factor_spin.setRange(0, 99999)
        self.conversion_factor_spin.setDecimals(4)
        layout.addRow("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–µ—Ä–µ–≤–æ–¥–∞:", self.conversion_factor_spin)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        layout.addRow(QLabel("<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (JSON):</b>"))
        self.properties_text = QTextEdit()
        self.properties_text.setMaximumHeight(150)
        self.properties_text.setPlaceholderText('{"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ"}')
        layout.addRow(self.properties_text)

        self.tabs.addTab(tab, "üìè –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")

    def create_supply_tab(self):
        """–ü–æ—Å—Ç–∞–≤–∫–∞"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –¶–µ–Ω–∞
        self.price_spin = QDoubleSpinBox()
        self.price_spin.setRange(0, 999999)
        self.price_spin.setDecimals(2)
        self.price_spin.setSuffix(" ‚ÇΩ")
        layout.addRow("–¶–µ–Ω–∞:", self.price_spin)

        # –í–∞–ª—é—Ç–∞
        self.currency_combo = QComboBox()
        self.currency_combo.addItems(["RUB", "USD", "EUR", "CNY"])
        layout.addRow("–í–∞–ª—é—Ç–∞:", self.currency_combo)

        # –ü–æ—Å—Ç–∞–≤—â–∏–∫
        layout.addRow(QLabel("<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ:</b>"))

        self.supplier_name_input = QLineEdit()
        self.supplier_name_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        layout.addRow("–ü–æ—Å—Ç–∞–≤—â–∏–∫:", self.supplier_name_input)

        self.supplier_code_input = QLineEdit()
        self.supplier_code_input.setPlaceholderText("–ê—Ä—Ç–∏–∫—É–ª —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        layout.addRow("–ö–æ–¥ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:", self.supplier_code_input)

        # –°—Ä–æ–∫–∏ –∏ —É—Å–ª–æ–≤–∏—è
        self.lead_time_spin = QSpinBox()
        self.lead_time_spin.setRange(0, 365)
        self.lead_time_spin.setSuffix(" –¥–Ω–µ–π")
        layout.addRow("–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:", self.lead_time_spin)

        self.min_order_qty_spin = QDoubleSpinBox()
        self.min_order_qty_spin.setRange(0, 99999)
        self.min_order_qty_spin.setDecimals(2)
        layout.addRow("–ú–∏–Ω. –∑–∞–∫–∞–∑:", self.min_order_qty_spin)

        self.order_multiplicity_spin = QDoubleSpinBox()
        self.order_multiplicity_spin.setRange(0, 9999)
        self.order_multiplicity_spin.setDecimals(2)
        layout.addRow("–ö—Ä–∞—Ç–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:", self.order_multiplicity_spin)

        self.tabs.addTab(tab, "üöö –ü–æ—Å—Ç–∞–≤–∫–∞")

    def create_stock_tab(self):
        """–°–∫–ª–∞–¥—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –ù–æ—Ä–º–∞—Ç–∏–≤—ã –∑–∞–ø–∞—Å–æ–≤
        self.safety_stock_spin = QDoubleSpinBox()
        self.safety_stock_spin.setRange(0, 99999)
        self.safety_stock_spin.setDecimals(2)
        layout.addRow("–°—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å:", self.safety_stock_spin)

        self.reorder_point_spin = QDoubleSpinBox()
        self.reorder_point_spin.setRange(0, 99999)
        self.reorder_point_spin.setDecimals(2)
        layout.addRow("–¢–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞:", self.reorder_point_spin)

        self.max_stock_spin = QDoubleSpinBox()
        self.max_stock_spin.setRange(0, 99999)
        self.max_stock_spin.setDecimals(2)
        layout.addRow("–ú–∞–∫—Å. –∑–∞–ø–∞—Å:", self.max_stock_spin)

        # –£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        layout.addRow(QLabel("<b>–£—Å–ª–æ–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è:</b>"))
        self.storage_conditions_text = QTextEdit()
        self.storage_conditions_text.setMaximumHeight(100)
        self.storage_conditions_text.setPlaceholderText("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, –≤–ª–∞–∂–Ω–æ—Å—Ç—å, –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è...")
        layout.addRow(self.storage_conditions_text)

        self.tabs.addTab(tab, "üì¶ –°–∫–ª–∞–¥")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {
                'code': self.code_input.text(),
                'name': self.name_input.text(),
                'name_en': self.name_en_input.text() or None,
                'group_type': self.group_combo.currentData(),  # –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
                'subgroup': self.subgroup_input.text() or None,
                'material_type': self.material_type_input.text() or None,
                'color': self.color_input.text() or None,
                'texture': self.texture_input.text() or None,
                'thickness': self.thickness_spin.value() if self.thickness_spin.value() > 0 else None,
                'density': self.density_spin.value() if self.density_spin.value() > 0 else None,
                'unit': self.unit_combo.currentText(),
                'unit_secondary': self.unit_secondary_combo.currentText() or None,
                'conversion_factor': self.conversion_factor_spin.value() if self.conversion_factor_spin.value() > 0 else None,
                'price': self.price_spin.value() if self.price_spin.value() > 0 else None,
                'currency': self.currency_combo.currentText(),
                'supplier_name': self.supplier_name_input.text() or None,
                'supplier_code': self.supplier_code_input.text() or None,
                'lead_time_days': self.lead_time_spin.value() if self.lead_time_spin.value() > 0 else None,
                'min_order_qty': self.min_order_qty_spin.value() if self.min_order_qty_spin.value() > 0 else None,
                'order_multiplicity': self.order_multiplicity_spin.value() if self.order_multiplicity_spin.value() > 0 else None,
                'safety_stock': self.safety_stock_spin.value() if self.safety_stock_spin.value() > 0 else None,
                'reorder_point': self.reorder_point_spin.value() if self.reorder_point_spin.value() > 0 else None,
                'max_stock': self.max_stock_spin.value() if self.max_stock_spin.value() > 0 else None,
                'storage_conditions': self.storage_conditions_text.toPlainText() or None,
                'is_active': self.is_active_check.isChecked(),
                'is_critical': self.is_critical_check.isChecked()
            }

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
            properties_text = self.properties_text.toPlainText()
            if properties_text:
                try:
                    data['properties'] = json.dumps(json.loads(properties_text))
                except:
                    data['properties'] = json.dumps({})
            else:
                data['properties'] = json.dumps({})

            if self.record_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                set_clause = ', '.join([f"{k} = %s" for k in data.keys()])
                query = f"""
                    UPDATE materials
                    SET {set_clause}, updated_at = NOW()
                    WHERE id = %s
                """
                cursor.execute(query, list(data.values()) + [self.record_id])
            else:
                # –í—Å—Ç–∞–≤–∫–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π UUID
                import uuid
                data['uuid'] = str(uuid.uuid4())
                columns = list(data.keys())
                placeholders = ['%s'] * len(columns)
                query = f"""
                    INSERT INTO materials ({', '.join(columns)}, created_at, updated_at)
                    VALUES ({', '.join(placeholders)}, NOW(), NOW())
                """
                cursor.execute(query, list(data.values()))

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–ú–∞—Ç–µ—Ä–∏–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def load_data(self, record_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
        self.record_id = record_id

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("SELECT * FROM materials WHERE id = %s", (record_id,))
            row = cursor.fetchone()
            cursor.close()
            self.db.put_connection(conn)

            if row:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.code_input.setText(row['code'] or '')
                self.name_input.setText(row['name'] or '')
                self.name_en_input.setText(row['name_en'] or '')
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—É –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –∏–∑ –ë–î
                group_value = row['group_type']
                if group_value:
                    for i in range(self.group_combo.count()):
                        if self.group_combo.itemData(i) == group_value:
                            self.group_combo.setCurrentIndex(i)
                            break
                self.subgroup_input.setText(row['subgroup'] or '')
                self.material_type_input.setText(row['material_type'] or '')
                self.color_input.setText(row['color'] or '')
                self.is_active_check.setChecked(row['is_active'] if row['is_active'] is not None else True)
                self.is_critical_check.setChecked(row['is_critical'] or False)

                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                self.texture_input.setText(row['texture'] or '')
                if row['thickness']:
                    self.thickness_spin.setValue(float(row['thickness']))
                if row['density']:
                    self.density_spin.setValue(float(row['density']))
                self.unit_combo.setCurrentText(row['unit'] or '—à—Ç')
                self.unit_secondary_combo.setCurrentText(row['unit_secondary'] or '')
                if row['conversion_factor']:
                    self.conversion_factor_spin.setValue(float(row['conversion_factor']))

                # –ü–æ—Å—Ç–∞–≤–∫–∞
                if row['price']:
                    self.price_spin.setValue(float(row['price']))
                self.currency_combo.setCurrentText(row['currency'] or 'RUB')
                self.supplier_name_input.setText(row['supplier_name'] or '')
                self.supplier_code_input.setText(row['supplier_code'] or '')
                if row['lead_time_days']:
                    self.lead_time_spin.setValue(row['lead_time_days'])
                if row['min_order_qty']:
                    self.min_order_qty_spin.setValue(float(row['min_order_qty']))
                if row['order_multiplicity']:
                    self.order_multiplicity_spin.setValue(float(row['order_multiplicity']))

                # –°–∫–ª–∞–¥
                if row['safety_stock']:
                    self.safety_stock_spin.setValue(float(row['safety_stock']))
                if row['reorder_point']:
                    self.reorder_point_spin.setValue(float(row['reorder_point']))
                if row['max_stock']:
                    self.max_stock_spin.setValue(float(row['max_stock']))
                self.storage_conditions_text.setPlainText(row['storage_conditions'] or '')

                # –°–≤–æ–π—Å—Ç–≤–∞
                if row['properties']:
                    props = row['properties'] if isinstance(row['properties'], dict) else json.loads(row['properties'])
                    self.properties_text.setPlainText(json.dumps(props, indent=2, ensure_ascii=False))

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è"""
        if not self.code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
            self.tabs.setCurrentIndex(0)
            self.code_input.setFocus()
            return False

        if not self.name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
            self.tabs.setCurrentIndex(0)
            self.name_input.setFocus()
            return False

        return True