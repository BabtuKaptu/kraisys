"""Model components management dialog v2 - with proper cutting parts logic"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton, QTableWidget,
    QTableWidgetItem, QComboBox, QSpinBox, QDoubleSpinBox, QCheckBox,
    QLabel, QLineEdit, QTextEdit, QMessageBox, QHeaderView, QTabWidget,
    QWidget, QGroupBox, QGridLayout, QTreeWidget, QTreeWidgetItem,
    QSplitter
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
import psycopg2.extras
from database.connection import DatabaseConnection


class ModelComponentsDialogV2(QDialog):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏"""

    def __init__(self, model_id: int, model_article: str = "", parent=None):
        super().__init__(parent)
        self.model_id = model_id
        self.model_article = model_article
        self.db = DatabaseConnection()

        # –î–∞–Ω–Ω—ã–µ
        self.cutting_parts_dict = {}  # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.materials_dict = {}      # –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤

        self.setup_ui()
        self.load_reference_data()
        self.load_model_components()
        self.calculate_totals()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle(f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ {self.model_article}")
        self.setModal(True)
        self.resize(1400, 800)

        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        header_layout = QHBoxLayout()
        header_layout.addWidget(QLabel(f"<b>–ú–æ–¥–µ–ª—å: {self.model_article}</b>"))
        header_layout.addStretch()

        # –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏
        self.total_leather_label = QLabel("–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏: 0.0 –¥–º¬≤")
        self.total_leather_label.setStyleSheet("font-size: 14px; font-weight: bold; color: #2b6cb0;")
        header_layout.addWidget(self.total_leather_label)

        layout.addLayout(header_layout)

        # –¢–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è - –°–ê–ú–ê–Ø –í–ê–ñ–ù–ê–Ø
        self.cutting_tab = QWidget()
        self.setup_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "‚úÇÔ∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")

        # –í–∫–ª–∞–¥–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.materials_tab = QWidget()
        self.setup_materials_tab()
        self.tabs.addTab(self.materials_tab, "üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞")

        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.btn_calculate = QPushButton("üìä –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å")
        self.btn_close = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")

        self.btn_save.clicked.connect(self.save_components)
        self.btn_calculate.clicked.connect(self.calculate_totals)
        self.btn_close.clicked.connect(self.close)

        buttons.addWidget(self.btn_save)
        buttons.addWidget(self.btn_calculate)
        buttons.addStretch()
        buttons.addWidget(self.btn_close)

        layout.addLayout(buttons)

    def setup_cutting_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è"""
        layout = QVBoxLayout(self.cutting_tab)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        info_label = QLabel(
            "üí° <b>–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è</b> - —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ö–∞ –æ–±—É–≤–∏, –≤—ã–∫—Ä–∞–∏–≤–∞–µ–º—ã–µ –∏–∑ –∫–æ–∂–∏.\n"
            "–î–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–±—ã—á–Ω–æ 2 –¥–ª—è –ø–∞—Ä–Ω–æ–π –æ–±—É–≤–∏) –∏ —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –¥–º¬≤."
        )
        info_label.setWordWrap(True)
        info_label.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info_label)

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–∞–ª–∏ –∏ —Ç–∞–±–ª–∏—Ü—ã
        splitter = QSplitter(Qt.Orientation.Horizontal)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤—ã–±–æ—Ä –¥–µ—Ç–∞–ª–µ–π –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
        left_panel = QWidget()
        left_layout = QVBoxLayout(left_panel)

        left_layout.addWidget(QLabel("<b>–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è:</b>"))

        # –ü–æ–∏—Å–∫
        self.cutting_search = QLineEdit()
        self.cutting_search.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –¥–µ—Ç–∞–ª–∏...")
        self.cutting_search.textChanged.connect(self.filter_cutting_parts)
        left_layout.addWidget(self.cutting_search)

        # –î–µ—Ä–µ–≤–æ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.cutting_tree = QTreeWidget()
        self.cutting_tree.setHeaderLabel("–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")
        self.cutting_tree.itemDoubleClicked.connect(self.add_cutting_from_tree)
        left_layout.addWidget(self.cutting_tree)

        splitter.addWidget(left_panel)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–∞–±–ª–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = QHBoxLayout()
        self.btn_remove_cutting = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ")
        self.btn_clear_cutting = QPushButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ")
        self.btn_remove_cutting.clicked.connect(self.remove_cutting_part)
        self.btn_clear_cutting.clicked.connect(self.clear_cutting_parts)

        toolbar.addWidget(self.btn_remove_cutting)
        toolbar.addWidget(self.btn_clear_cutting)
        toolbar.addStretch()
        right_layout.addLayout(toolbar)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –º–æ–¥–µ–ª–∏
        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(6)
        self.cutting_table.setHorizontalHeaderLabels([
            "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ (—à—Ç)", "–†–∞—Å—Ö–æ–¥ –∫–æ–∂–∏ (–¥–º¬≤)", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "ID"
        ])

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã –∫–æ–ª–æ–Ω–æ–∫
        header = self.cutting_table.horizontalHeader()
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Stretch)
        self.cutting_table.setColumnHidden(5, True)  # –°–∫—Ä—ã–≤–∞–µ–º ID

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞
        self.cutting_table.cellChanged.connect(self.on_cutting_cell_changed)

        right_layout.addWidget(self.cutting_table)

        # –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.cutting_total_label = QLabel("–ò—Ç–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π: 0 | –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏: 0.0 –¥–º¬≤")
        self.cutting_total_label.setStyleSheet("font-weight: bold; padding: 5px;")
        right_layout.addWidget(self.cutting_total_label)

        splitter.addWidget(right_panel)
        splitter.setSizes([400, 800])

        layout.addWidget(splitter)

    def setup_materials_tab(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        layout = QVBoxLayout(self.materials_tab)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            "üí° <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–∞</b> - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥."
        )
        info_label.setWordWrap(True)
        info_label.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info_label)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        toolbar = QHBoxLayout()
        self.btn_add_material = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª")
        self.btn_remove_material = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å")
        self.btn_add_material.clicked.connect(self.add_material)
        self.btn_remove_material.clicked.connect(self.remove_material)

        toolbar.addWidget(self.btn_add_material)
        toolbar.addWidget(self.btn_remove_material)
        toolbar.addStretch()
        layout.addLayout(toolbar)

        # –¢–∞–±–ª–∏—Ü–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.materials_table = QTableWidget()
        self.materials_table.setColumnCount(6)
        self.materials_table.setHorizontalHeaderLabels([
            "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–†–∞—Å—Ö–æ–¥ %", "–ê–±—Å. —Ä–∞—Å—Ö–æ–¥", "–ï–¥–∏–Ω–∏—Ü–∞", "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ"
        ])

        header = self.materials_table.horizontalHeader()
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)

        layout.addWidget(self.materials_table)

    def load_reference_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
            cursor.execute("""
                SELECT id, code, name, category, default_qty, unit, notes
                FROM cutting_parts
                WHERE is_active = true AND is_cutting = true
                ORDER BY category, name
            """)

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            categories = {}
            for part in cursor.fetchall():
                cat = part['category'] or 'OTHER'
                if cat not in categories:
                    categories[cat] = []
                categories[cat].append(part)
                self.cutting_parts_dict[part['id']] = part

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–µ—Ä–µ–≤–æ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
            self.cutting_tree.clear()
            for category, parts in sorted(categories.items()):
                cat_item = QTreeWidgetItem(self.cutting_tree, [category])
                cat_item.setExpanded(False)
                font = QFont()
                font.setBold(True)
                cat_item.setFont(0, font)

                for part in parts:
                    part_item = QTreeWidgetItem(cat_item)
                    part_item.setText(0, f"{part['code']} - {part['name']}")
                    part_item.setData(0, Qt.ItemDataRole.UserRole, part)
                    if part['notes']:
                        part_item.setToolTip(0, part['notes'])

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            cursor.execute("""
                SELECT id, code, name, material_type, unit, price
                FROM materials
                WHERE is_active = true
                ORDER BY name
            """)

            for mat in cursor.fetchall():
                self.materials_dict[mat['id']] = mat

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {e}")

    def load_model_components(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
        if not self.model_id:
            return

        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("""
                SELECT id, component_name, component_group,
                       consumption_percent, absolute_consumption,
                       unit, is_optional, notes
                FROM model_components
                WHERE model_id = %s
                ORDER BY sort_order, component_name
            """, (self.model_id,))

            components = cursor.fetchall()
            cursor.close()
            self.db.put_connection(conn)

            # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            for comp in components:
                if comp['component_group'] == 'cutting':
                    self.add_cutting_to_table_from_db(comp)
                elif comp['component_group'] == 'material':
                    self.add_material_to_table_from_db(comp)

        except Exception as e:
            print(f"Error loading model components: {e}")

    def add_cutting_to_table_from_db(self, component):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ –ë–î –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –ù–∞—Ö–æ–¥–∏–º –¥–µ—Ç–∞–ª—å –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
        part_info = None
        for part_id, part in self.cutting_parts_dict.items():
            if part['name'] == component['component_name']:
                part_info = part
                break

        # –ö–æ–¥
        self.cutting_table.setItem(row, 0, QTableWidgetItem(
            part_info['code'] if part_info else ""
        ))

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 1, QTableWidgetItem(
            component['component_name']
        ))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫
        qty_spin = QSpinBox()
        qty_spin.setMinimum(1)
        qty_spin.setMaximum(100)
        # –ï—Å–ª–∏ –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫ < 10, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º default
        if component['absolute_consumption'] and component['absolute_consumption'] < 10:
            qty_spin.setValue(int(component['absolute_consumption']))
        else:
            qty_spin.setValue(part_info['default_qty'] if part_info else 2)
        qty_spin.valueChanged.connect(self.calculate_totals)
        self.cutting_table.setCellWidget(row, 2, qty_spin)

        # –†–ê–°–•–û–î –ö–û–ñ–ò - —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –ø–æ–ª–µ!
        consumption_spin = QDoubleSpinBox()
        consumption_spin.setMinimum(0)
        consumption_spin.setMaximum(999)
        consumption_spin.setDecimals(2)
        consumption_spin.setSuffix(" –¥–º¬≤")
        # –ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥ –±–æ–ª—å—à–µ 10, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞—Å—Ö–æ–¥
        if component['absolute_consumption'] and component['absolute_consumption'] >= 10:
            consumption_spin.setValue(float(component['absolute_consumption']))
        consumption_spin.valueChanged.connect(self.calculate_totals)
        self.cutting_table.setCellWidget(row, 3, consumption_spin)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 4, QTableWidgetItem(
            component['notes'] or ""
        ))

        # ID –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (—Å–∫—Ä—ã—Ç–æ–µ)
        self.cutting_table.setItem(row, 5, QTableWidgetItem(
            str(component['id']) if component.get('id') else ""
        ))

    def add_material_to_table_from_db(self, component):
        """–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏–∑ –ë–î –≤ —Ç–∞–±–ª–∏—Ü—É"""
        row = self.materials_table.rowCount()
        self.materials_table.insertRow(row)

        # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–µ
        mat_info = None
        for mat_id, mat in self.materials_dict.items():
            if mat['name'] == component['component_name']:
                mat_info = mat
                break

        self.materials_table.setItem(row, 0, QTableWidgetItem(
            mat_info['code'] if mat_info else ""
        ))
        self.materials_table.setItem(row, 1, QTableWidgetItem(
            component['component_name']
        ))

        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
        percent_spin = QDoubleSpinBox()
        percent_spin.setMinimum(0)
        percent_spin.setMaximum(200)
        percent_spin.setSuffix(" %")
        percent_spin.setValue(float(component['consumption_percent'] or 0))
        self.materials_table.setCellWidget(row, 2, percent_spin)

        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π —Ä–∞—Å—Ö–æ–¥
        abs_spin = QDoubleSpinBox()
        abs_spin.setMinimum(0)
        abs_spin.setMaximum(1000)
        abs_spin.setDecimals(3)
        abs_spin.setValue(float(component['absolute_consumption'] or 0))
        self.materials_table.setCellWidget(row, 3, abs_spin)

        self.materials_table.setItem(row, 4, QTableWidgetItem(
            component['unit'] or ""
        ))

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
        optional_check = QCheckBox()
        optional_check.setChecked(component['is_optional'] or False)
        self.materials_table.setCellWidget(row, 5, optional_check)

    def filter_cutting_parts(self, text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è"""
        text = text.lower()
        for i in range(self.cutting_tree.topLevelItemCount()):
            category_item = self.cutting_tree.topLevelItem(i)
            category_visible = False

            for j in range(category_item.childCount()):
                part_item = category_item.child(j)
                part_text = part_item.text(0).lower()

                if text in part_text:
                    part_item.setHidden(False)
                    category_visible = True
                else:
                    part_item.setHidden(True)

            # –†–∞—Å–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            if category_visible and text:
                category_item.setExpanded(True)

    def add_cutting_from_tree(self, item, column):
        """–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ –¥–µ—Ä–µ–≤–∞"""
        if item.parent() is None:  # –≠—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∞ –Ω–µ –¥–µ—Ç–∞–ª—å
            return

        part_data = item.data(0, Qt.ItemDataRole.UserRole)
        if not part_data:
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–µ—Ç–∞–ª–∏
        for row in range(self.cutting_table.rowCount()):
            if self.cutting_table.item(row, 0).text() == part_data['code']:
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ",
                                  f"–î–µ—Ç–∞–ª—å {part_data['name']} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É
        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        # –ö–æ–¥
        self.cutting_table.setItem(row, 0, QTableWidgetItem(part_data['code']))

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 1, QTableWidgetItem(part_data['name']))

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        qty_spin = QSpinBox()
        qty_spin.setMinimum(1)
        qty_spin.setMaximum(100)
        qty_spin.setValue(part_data['default_qty'] or 2)
        qty_spin.valueChanged.connect(self.calculate_totals)
        self.cutting_table.setCellWidget(row, 2, qty_spin)

        # –†–ê–°–•–û–î –ö–û–ñ–ò - –ø—É—Å—Ç–æ–µ, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å!
        consumption_spin = QDoubleSpinBox()
        consumption_spin.setMinimum(0)
        consumption_spin.setMaximum(999)
        consumption_spin.setDecimals(2)
        consumption_spin.setSuffix(" –¥–º¬≤")
        consumption_spin.setStyleSheet("background-color: #ffffcc;")  # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
        consumption_spin.valueChanged.connect(self.calculate_totals)
        self.cutting_table.setCellWidget(row, 3, consumption_spin)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.cutting_table.setItem(row, 4, QTableWidgetItem(part_data['notes'] or ""))

        # ID (–ø—É—Å—Ç–æ–µ –¥–ª—è –Ω–æ–≤–æ–π –¥–µ—Ç–∞–ª–∏)
        self.cutting_table.setItem(row, 5, QTableWidgetItem(""))

        self.calculate_totals()

    def remove_cutting_part(self):
        """–£–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è"""
        row = self.cutting_table.currentRow()
        if row >= 0:
            self.cutting_table.removeRow(row)
            self.calculate_totals()

    def clear_cutting_parts(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è"""
        if self.cutting_table.rowCount() > 0:
            reply = QMessageBox.question(self, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                                        "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è?",
                                        QMessageBox.StandardButton.Yes |
                                        QMessageBox.StandardButton.No)
            if reply == QMessageBox.StandardButton.Yes:
                self.cutting_table.setRowCount(0)
                self.calculate_totals()

    def on_cutting_cell_changed(self, row, column):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        self.calculate_totals()

    def add_material(self):
        """–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"""
        dialog = MaterialSelectionDialog(self.materials_dict, self)
        if dialog.exec():
            selected = dialog.get_selected()
            if selected:
                row = self.materials_table.rowCount()
                self.materials_table.insertRow(row)

                self.materials_table.setItem(row, 0, QTableWidgetItem(selected['code']))
                self.materials_table.setItem(row, 1, QTableWidgetItem(selected['name']))

                percent_spin = QDoubleSpinBox()
                percent_spin.setMinimum(0)
                percent_spin.setMaximum(200)
                percent_spin.setSuffix(" %")
                self.materials_table.setCellWidget(row, 2, percent_spin)

                abs_spin = QDoubleSpinBox()
                abs_spin.setMinimum(0)
                abs_spin.setMaximum(1000)
                abs_spin.setDecimals(3)
                self.materials_table.setCellWidget(row, 3, abs_spin)

                self.materials_table.setItem(row, 4, QTableWidgetItem(selected['unit'] or ""))

                optional_check = QCheckBox()
                self.materials_table.setCellWidget(row, 5, optional_check)

    def remove_material(self):
        """–£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª"""
        row = self.materials_table.currentRow()
        if row >= 0:
            self.materials_table.removeRow(row)

    def calculate_totals(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤"""
        total_leather = 0.0
        total_parts = 0

        # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏ –ø–æ –¥–µ—Ç–∞–ª—è–º –∫—Ä–æ—è
        for row in range(self.cutting_table.rowCount()):
            consumption_widget = self.cutting_table.cellWidget(row, 3)
            if consumption_widget:
                total_leather += consumption_widget.value()
                total_parts += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏
        self.cutting_total_label.setText(
            f"–ò—Ç–æ–≥–æ –¥–µ—Ç–∞–ª–µ–π: {total_parts} | –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏: {total_leather:.2f} –¥–º¬≤"
        )
        self.total_leather_label.setText(f"–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏: {total_leather:.2f} –¥–º¬≤")

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –µ—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω
        for row in range(self.cutting_table.rowCount()):
            consumption_widget = self.cutting_table.cellWidget(row, 3)
            if consumption_widget and consumption_widget.value() == 0:
                consumption_widget.setStyleSheet("background-color: #ffcccc;")
            elif consumption_widget:
                consumption_widget.setStyleSheet("")

    def save_components(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            cursor.execute("DELETE FROM model_components WHERE model_id = %s", (self.model_id,))

            sort_order = 0

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
            for row in range(self.cutting_table.rowCount()):
                code = self.cutting_table.item(row, 0).text()
                name = self.cutting_table.item(row, 1).text()
                qty_widget = self.cutting_table.cellWidget(row, 2)
                consumption_widget = self.cutting_table.cellWidget(row, 3)
                notes = self.cutting_table.item(row, 4).text()

                if not consumption_widget or consumption_widget.value() == 0:
                    QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ",
                                      f"–ù–µ —É–∫–∞–∑–∞–Ω —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏ –¥–ª—è –¥–µ—Ç–∞–ª–∏ '{name}'")
                    continue

                # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –†–ê–°–•–û–î –ö–û–ñ–ò –≤ absolute_consumption!
                cursor.execute("""
                    INSERT INTO model_components
                    (model_id, component_name, component_group,
                     absolute_consumption, unit, notes, sort_order)
                    VALUES (%s, %s, %s, %s, %s, %s, %s)
                """, (self.model_id, name, 'cutting',
                      consumption_widget.value(), '–¥–º¬≤',
                      notes or f"–ö–æ–ª-–≤–æ: {qty_widget.value() if qty_widget else 2} —à—Ç",
                      sort_order))
                sort_order += 1

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
            for row in range(self.materials_table.rowCount()):
                name = self.materials_table.item(row, 1).text()
                percent_widget = self.materials_table.cellWidget(row, 2)
                abs_widget = self.materials_table.cellWidget(row, 3)
                unit = self.materials_table.item(row, 4).text()
                optional_widget = self.materials_table.cellWidget(row, 5)

                cursor.execute("""
                    INSERT INTO model_components
                    (model_id, component_name, component_group, consumption_percent,
                     absolute_consumption, unit, is_optional, sort_order)
                    VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
                """, (self.model_id, name, 'material',
                      percent_widget.value() if percent_widget else 0,
                      abs_widget.value() if abs_widget else 0,
                      unit, optional_widget.isChecked() if optional_widget else False,
                      sort_order))
                sort_order += 1

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏ –≤ –º–æ–¥–µ–ª–∏
            total_leather = 0.0
            for row in range(self.cutting_table.rowCount()):
                consumption_widget = self.cutting_table.cellWidget(row, 3)
                if consumption_widget:
                    total_leather += consumption_widget.value()

            cursor.execute("""
                UPDATE models
                SET base_leather_norm = %s,
                    updated_at = NOW()
                WHERE id = %s
            """, (total_leather, self.model_id))

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                                  f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –∫–æ–∂–∏: {total_leather:.2f} –¥–º¬≤")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def calculate_costs(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"""
        total_material_cost = 0
        details = []

        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            for row in range(self.materials_table.rowCount()):
                name = self.materials_table.item(row, 1).text()
                abs_widget = self.materials_table.cellWidget(row, 3)
                consumption = abs_widget.value() if abs_widget else 0

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                cursor.execute("""
                    SELECT price FROM materials
                    WHERE name = %s AND is_active = true
                """, (name,))
                result = cursor.fetchone()

                if result and result['price']:
                    cost = float(result['price']) * consumption
                    total_material_cost += cost
                    details.append(f"{name}: {consumption:.3f} x {result['price']:.2f} = {cost:.2f}")

            cursor.close()
            self.db.put_connection(conn)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            msg = f"–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_material_cost:.2f} —Ä—É–±.\n\n"
            msg += "–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:\n" + "\n".join(details)

            QMessageBox.information(self, "–†–∞—Å—á–µ—Ç —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏", msg)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å: {e}")


class MaterialSelectionDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""

    def __init__(self, materials_dict, parent=None):
        super().__init__(parent)
        self.materials_dict = materials_dict
        self.selected = None
        self.setup_ui()

    def setup_ui(self):
        self.setWindowTitle("–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        self.setModal(True)
        self.resize(700, 400)

        layout = QVBoxLayout(self)

        # –ü–æ–∏—Å–∫
        self.search = QLineEdit()
        self.search.setPlaceholderText("–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        self.search.textChanged.connect(self.filter_materials)
        layout.addWidget(self.search)

        # –¢–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–¢–∏–ø", "–ï–¥–∏–Ω–∏—Ü–∞", "–¶–µ–Ω–∞"])
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.doubleClicked.connect(self.accept)

        self.populate_table()
        layout.addWidget(self.table)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        self.btn_ok = QPushButton("–í—ã–±—Ä–∞—Ç—å")
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")

        self.btn_ok.clicked.connect(self.accept)
        self.btn_cancel.clicked.connect(self.reject)

        buttons.addWidget(self.btn_ok)
        buttons.addWidget(self.btn_cancel)
        layout.addLayout(buttons)

    def populate_table(self):
        materials_list = list(self.materials_dict.values())
        self.table.setRowCount(len(materials_list))

        for row, mat in enumerate(materials_list):
            self.table.setItem(row, 0, QTableWidgetItem(mat['code'] or ""))
            self.table.setItem(row, 1, QTableWidgetItem(mat['name'] or ""))
            self.table.setItem(row, 2, QTableWidgetItem(mat['material_type'] or ""))
            self.table.setItem(row, 3, QTableWidgetItem(mat['unit'] or ""))
            price = f"{mat['price']:.2f}" if mat['price'] else ""
            self.table.setItem(row, 4, QTableWidgetItem(price))

    def filter_materials(self, text):
        for row in range(self.table.rowCount()):
            match = False
            for col in range(2):  # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
                item = self.table.item(row, col)
                if item and text.lower() in item.text().lower():
                    match = True
                    break
            self.table.setRowHidden(row, not match)

    def accept(self):
        row = self.table.currentRow()
        if row >= 0:
            materials_list = list(self.materials_dict.values())
            self.selected = materials_list[row]
        super().accept()

    def get_selected(self):
        return self.selected