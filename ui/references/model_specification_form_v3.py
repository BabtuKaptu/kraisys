"""–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –≤—ã–±–∏—Ä–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTabWidget, QWidget,
    QFormLayout, QLineEdit, QComboBox, QSpinBox, QDoubleSpinBox,
    QTableWidget, QTableWidgetItem, QPushButton, QTextEdit,
    QLabel, QGroupBox, QCheckBox, QHeaderView, QMessageBox,
    QScrollArea, QGridLayout, QAbstractItemView, QListWidget,
    QListWidgetItem
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
from database.connection import DatabaseConnection
import psycopg2.extras
import json
import uuid


class ModelSpecificationFormV3(QDialog):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ —Å –≤—ã–±–∏—Ä–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""

    saved = pyqtSignal()

    def __init__(self, parent=None, model_id=None):
        super().__init__(parent)
        self.model_id = model_id
        self.db = DatabaseConnection()

        self.setWindowTitle("–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏" if model_id else "–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        self.setModal(True)
        self.resize(1400, 900)

        self.init_ui()
        self.load_references()

        if model_id:
            self.load_model_data()
            self.load_variants()

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QFormLayout()

        self.article_input = QLineEdit()
        self.article_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 001-24")
        info_layout.addRow("–ê—Ä—Ç–∏–∫—É–ª:", self.article_input)

        self.name_input = QLineEdit()
        self.name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ä–æ—Å—Å–æ–≤–∫–∏ '–•–ª—ã–Ω–æ–≤'")
        info_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:", self.name_input)

        self.last_code_input = QLineEdit()
        self.last_code_input.setPlaceholderText("–ö–æ–¥ –∫–æ–ª–æ–¥–∫–∏")
        info_layout.addRow("–ö–æ–ª–æ–¥–∫–∞:", self.last_code_input)

        info_group.setLayout(info_layout)
        layout.addWidget(info_group)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()

        self.cutting_tab = self.create_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "‚úÇÔ∏è –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")

        self.hardware_tab = self.create_hardware_tab()
        self.tabs.addTab(self.hardware_tab, "üî© –§—É—Ä–Ω–∏—Ç—É—Ä–∞")

        self.sole_tab = self.create_sole_tab()
        self.tabs.addTab(self.sole_tab, "üëü –ü–æ–¥–æ—à–≤–∞")

        self.variants_tab = self.create_variants_tab()
        self.tabs.addTab(self.variants_tab, "üé® –í–∞—Ä–∏–∞–Ω—Ç—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.clicked.connect(self.save_model)
        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)

        buttons_layout.addWidget(self.save_btn)
        buttons_layout.addWidget(self.cancel_btn)
        layout.addLayout(buttons_layout)

    def create_cutting_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üí° –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è - —ç–ª–µ–º–µ–Ω—Ç—ã –≤–µ—Ä—Ö–∞ –æ–±—É–≤–∏. "
            "–£–∫–∞–∂–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –¥–º¬≤ –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è (–º–∞—Ç–µ—Ä–∏–∞–ª, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏)"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –¥–µ—Ç–∞–ª–∏
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_part_combo = QComboBox()
        self.cutting_part_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        self.cutting_part_combo.setMinimumWidth(250)
        add_layout.addWidget(QLabel("–î–µ—Ç–∞–ª—å:"))
        add_layout.addWidget(self.cutting_part_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.cutting_qty_spin = QSpinBox()
        self.cutting_qty_spin.setRange(1, 20)
        self.cutting_qty_spin.setValue(2)
        add_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
        add_layout.addWidget(self.cutting_qty_spin)

        # –†–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
        self.cutting_consumption_spin = QDoubleSpinBox()
        self.cutting_consumption_spin.setRange(0, 999)
        self.cutting_consumption_spin.setValue(0)
        self.cutting_consumption_spin.setSuffix(" –¥–º¬≤")
        add_layout.addWidget(QLabel("–†–∞—Å—Ö–æ–¥:"))
        add_layout.addWidget(self.cutting_consumption_spin)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.cutting_notes_input = QLineEdit()
        self.cutting_notes_input.setPlaceholderText("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è...")
        add_layout.addWidget(QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:"))
        add_layout.addWidget(self.cutting_notes_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_cutting_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        add_cutting_btn.clicked.connect(self.add_cutting_part)
        add_layout.addWidget(add_cutting_btn)

        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(5)
        self.cutting_table.setHorizontalHeaderLabels(
            ["–î–µ—Ç–∞–ª—å", "–ö–æ–ª-–≤–æ", "–†–∞—Å—Ö–æ–¥ (–¥–º¬≤)", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å"]
        )
        self.cutting_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.cutting_table)

        return widget

    def create_hardware_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üí° –§—É—Ä–Ω–∏—Ç—É—Ä–∞ - –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—É–≤–∏. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –≤—Ä—É—á–Ω—É—é"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #fff3cd; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_combo = QComboBox()
        self.hardware_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        self.hardware_combo.setMinimumWidth(250)
        self.hardware_combo.setEditable(True)
        add_layout.addWidget(QLabel("–§—É—Ä–Ω–∏—Ç—É—Ä–∞:"))
        add_layout.addWidget(self.hardware_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.hardware_qty_spin = QDoubleSpinBox()
        self.hardware_qty_spin.setRange(0, 999)
        self.hardware_qty_spin.setValue(1)
        add_layout.addWidget(QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:"))
        add_layout.addWidget(self.hardware_qty_spin)

        # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        self.hardware_unit_combo = QComboBox()
        self.hardware_unit_combo.addItems(["—à—Ç", "–ø–∞—Ä–∞", "–º", "—Å–º", "–¥–º¬≤", "–º¬≤", "–∫–æ–º–ø–ª"])
        add_layout.addWidget(QLabel("–ï–¥.–∏–∑–º.:"))
        add_layout.addWidget(self.hardware_unit_combo)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.hardware_notes_input = QLineEdit()
        self.hardware_notes_input.setPlaceholderText("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è...")
        add_layout.addWidget(QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:"))
        add_layout.addWidget(self.hardware_notes_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_hardware_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        add_hardware_btn.clicked.connect(self.add_hardware)
        add_layout.addWidget(add_hardware_btn)

        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(5)
        self.hardware_table.setHorizontalHeaderLabels(
            ["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–ï–¥.–∏–∑–º.", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å"]
        )
        self.hardware_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.hardware_table)

        return widget

    def create_sole_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–æ—à–≤—ã"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info = QLabel(
            "üí° –ü–æ–¥–æ—à–≤—ã - —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∏–∑–∞ –æ–±—É–≤–∏. "
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –ø–æ–¥–æ—à–≤ –∏ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥"
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #d4edda; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –ü–∞–Ω–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–æ—à–≤—ã
        add_panel = QGroupBox("–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–æ—à–≤—É")
        add_layout = QHBoxLayout(add_panel)

        # –í—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–æ—à–≤
        self.sole_combo = QComboBox()
        self.sole_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ—à–≤—É –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞...")
        self.sole_combo.setMinimumWidth(300)
        add_layout.addWidget(QLabel("–ü–æ–¥–æ—à–≤–∞:"))
        add_layout.addWidget(self.sole_combo)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        self.sole_size_input = QLineEdit()
        self.sole_size_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: 35-45")
        add_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥:"))
        add_layout.addWidget(self.sole_size_input)

        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
        self.sole_notes_input = QLineEdit()
        self.sole_notes_input.setPlaceholderText("–ü—Ä–∏–º–µ—á–∞–Ω–∏—è...")
        add_layout.addWidget(QLabel("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:"))
        add_layout.addWidget(self.sole_notes_input)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_sole_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å")
        add_sole_btn.clicked.connect(self.add_sole)
        add_layout.addWidget(add_sole_btn)

        layout.addWidget(add_panel)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–æ—à–≤
        self.sole_table = QTableWidget()
        self.sole_table.setColumnCount(4)
        self.sole_table.setHorizontalHeaderLabels(
            ["–ü–æ–¥–æ—à–≤–∞", "–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", "–£–¥–∞–ª–∏—Ç—å"]
        )
        self.sole_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        layout.addWidget(self.sole_table)

        return widget

    def create_variants_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
        params_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏")
        params_layout = QGridLayout(params_group)

        # –¢–∏–ø –∑–∞—Ç—è–∂–∫–∏
        params_layout.addWidget(QLabel("–¢–∏–ø –∑–∞—Ç—è–∂–∫–∏:"), 0, 0)
        self.lasting_type_combo = QComboBox()
        self.lasting_type_combo.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏...")
        params_layout.addWidget(self.lasting_type_combo, 0, 1)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞—Ç—è–∂–∫–∏
        add_lasting_btn = QPushButton("‚ûï")
        add_lasting_btn.setMaximumWidth(30)
        add_lasting_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏")
        add_lasting_btn.clicked.connect(lambda: self.add_reference_item('lasting'))
        params_layout.addWidget(add_lasting_btn, 0, 2)

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
        params_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏:"), 1, 0, Qt.AlignmentFlag.AlignTop)
        self.perforations_list = QListWidget()
        self.perforations_list.setMaximumHeight(100)
        self.perforations_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        params_layout.addWidget(self.perforations_list, 1, 1)

        perf_buttons = QVBoxLayout()
        add_perf_btn = QPushButton("‚ûï")
        add_perf_btn.setMaximumWidth(30)
        add_perf_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏")
        add_perf_btn.clicked.connect(lambda: self.add_reference_item('perforation'))
        perf_buttons.addWidget(add_perf_btn)
        perf_buttons.addStretch()
        params_layout.addLayout(perf_buttons, 1, 2)

        # –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏
        params_layout.addWidget(QLabel("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∫–ª–∞–¥–∫–∏:"), 2, 0, Qt.AlignmentFlag.AlignTop)
        self.linings_list = QListWidget()
        self.linings_list.setMaximumHeight(100)
        self.linings_list.setSelectionMode(QListWidget.SelectionMode.MultiSelection)
        params_layout.addWidget(self.linings_list, 2, 1)

        lining_buttons = QVBoxLayout()
        add_lining_btn = QPushButton("‚ûï")
        add_lining_btn.setMaximumWidth(30)
        add_lining_btn.setToolTip("–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –ø–æ–¥–∫–ª–∞–¥–∫–∏")
        add_lining_btn.clicked.connect(lambda: self.add_reference_item('lining'))
        lining_buttons.addWidget(add_lining_btn)
        lining_buttons.addStretch()
        params_layout.addLayout(lining_buttons, 2, 2)

        layout.addWidget(params_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
        info_layout = QHBoxLayout()

        info_text = QLabel(
            "üí° –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏:\n"
            "‚Ä¢ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∏\n"
            "‚Ä¢ –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã - –≤—ã–±–∏—Ä–∞—é—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—é –∏ –ø–æ–¥–∫–ª–∞–¥–∫—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö"
        )
        info_text.setWordWrap(True)
        info_text.setStyleSheet("background: #e8f4fd; padding: 10px; border-radius: 5px; border: 1px solid #b8dff8;")
        info_layout.addWidget(info_text)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        self.create_variant_btn = QPushButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
        self.create_variant_btn.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.create_variant_btn.clicked.connect(self.create_specific_variant)
        info_layout.addWidget(self.create_variant_btn)

        layout.addLayout(info_layout)

        # –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        variants_group = QGroupBox("–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
        variants_layout = QVBoxLayout(variants_group)

        self.variants_table = QTableWidget()
        self.variants_table.setColumnCount(7)
        self.variants_table.setHorizontalHeaderLabels([
            "–ö–æ–¥", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç.", "–ê–∫—Ç–∏–≤–µ–Ω", "–°–æ–∑–¥–∞–Ω", "–î–µ–π—Å—Ç–≤–∏—è"
        ])

        header = self.variants_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(6, QHeaderView.ResizeMode.Fixed)

        header.resizeSection(0, 100)
        header.resizeSection(2, 100)
        header.resizeSection(3, 120)
        header.resizeSection(4, 80)
        header.resizeSection(5, 100)
        header.resizeSection(6, 100)

        self.variants_table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)
        self.variants_table.setAlternatingRowColors(True)
        self.variants_table.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows)

        variants_layout.addWidget(self.variants_table)
        layout.addWidget(variants_group)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏
        self.load_model_parameters()

        return widget

    def load_model_parameters(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∑–∞—Ç—è–∂–∫–∏
            cursor.execute("SELECT id, code, name FROM lasting_types WHERE is_active = true ORDER BY name")
            lasting_types = cursor.fetchall()
            self.lasting_type_combo.clear()
            for lasting in lasting_types:
                self.lasting_type_combo.addItem(f"{lasting['name']} ({lasting['code']})", lasting['id'])

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
            cursor.execute("SELECT id, code, name FROM perforation_types WHERE is_active = true ORDER BY name")
            perforations = cursor.fetchall()
            self.perforations_list.clear()
            for perf in perforations:
                item = QListWidgetItem(f"{perf['name']} ({perf['code']})")
                item.setData(Qt.ItemDataRole.UserRole, perf['id'])
                self.perforations_list.addItem(item)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏
            cursor.execute("SELECT id, code, name FROM lining_types WHERE is_active = true ORDER BY name")
            linings = cursor.fetchall()
            self.linings_list.clear()
            for lining in linings:
                item = QListWidgetItem(f"{lining['name']} ({lining['code']})")
                item.setData(Qt.ItemDataRole.UserRole, lining['id'])
                self.linings_list.addItem(item)

            # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å, –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if self.model_id:
                self.load_selected_parameters(cursor)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏: {e}")

    def load_selected_parameters(self, cursor):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏
        cursor.execute("SELECT lasting_type_id FROM models WHERE id = %s", (self.model_id,))
        result = cursor.fetchone()
        if result and result['lasting_type_id']:
            index = self.lasting_type_combo.findData(result['lasting_type_id'])
            if index >= 0:
                self.lasting_type_combo.setCurrentIndex(index)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
        cursor.execute("""
            SELECT perforation_id FROM model_perforations
            WHERE model_id = %s
        """, (self.model_id,))
        selected_perfs = [row['perforation_id'] for row in cursor.fetchall()]

        for i in range(self.perforations_list.count()):
            item = self.perforations_list.item(i)
            if item.data(Qt.ItemDataRole.UserRole) in selected_perfs:
                item.setSelected(True)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª–∞–¥–∫–∏
        cursor.execute("""
            SELECT lining_id FROM model_linings
            WHERE model_id = %s
        """, (self.model_id,))
        selected_linings = [row['lining_id'] for row in cursor.fetchall()]

        for i in range(self.linings_list.count()):
            item = self.linings_list.item(i)
            if item.data(Qt.ItemDataRole.UserRole) in selected_linings:
                item.setSelected(True)

    def add_reference_item(self, ref_type):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫"""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
                               f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ {ref_type}")

    def load_references(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
            cursor.execute("SELECT id, code, name FROM reference_cutting_parts WHERE is_active = true ORDER BY name")
            for row in cursor.fetchall():
                self.cutting_part_combo.addItem(f"{row['name']} - {row['code']}", row['id'])

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
            cursor.execute("SELECT id, code, name FROM reference_hardware WHERE is_active = true ORDER BY name")
            for row in cursor.fetchall():
                self.hardware_combo.addItem(f"{row['name']} - {row['code']}", row['id'])

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–æ—à–≤
            cursor.execute("SELECT id, code, name FROM reference_soles WHERE is_active = true ORDER BY name")
            for row in cursor.fetchall():
                self.sole_combo.addItem(f"{row['name']} - {row['code']}", row['id'])

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤: {e}")

    def add_cutting_part(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è"""
        if self.cutting_part_combo.currentIndex() < 0:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è")
            return

        row = self.cutting_table.rowCount()
        self.cutting_table.insertRow(row)

        self.cutting_table.setItem(row, 0, QTableWidgetItem(self.cutting_part_combo.currentText()))
        self.cutting_table.setItem(row, 1, QTableWidgetItem(str(self.cutting_qty_spin.value())))
        self.cutting_table.setItem(row, 2, QTableWidgetItem(str(self.cutting_consumption_spin.value())))
        self.cutting_table.setItem(row, 3, QTableWidgetItem(self.cutting_notes_input.text()))

        delete_btn = QPushButton("üóëÔ∏è")
        delete_btn.clicked.connect(lambda: self.delete_row(self.cutting_table, row))
        self.cutting_table.setCellWidget(row, 4, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.cutting_consumption_spin.setValue(0)
        self.cutting_notes_input.clear()

    def add_hardware(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"""
        if not self.hardware_combo.currentText():
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã")
            return

        row = self.hardware_table.rowCount()
        self.hardware_table.insertRow(row)

        self.hardware_table.setItem(row, 0, QTableWidgetItem(self.hardware_combo.currentText()))
        self.hardware_table.setItem(row, 1, QTableWidgetItem(str(self.hardware_qty_spin.value())))
        self.hardware_table.setItem(row, 2, QTableWidgetItem(self.hardware_unit_combo.currentText()))
        self.hardware_table.setItem(row, 3, QTableWidgetItem(self.hardware_notes_input.text()))

        delete_btn = QPushButton("üóëÔ∏è")
        delete_btn.clicked.connect(lambda: self.delete_row(self.hardware_table, row))
        self.hardware_table.setCellWidget(row, 4, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        self.hardware_notes_input.clear()

    def add_sole(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–æ—à–≤—ã"""
        if self.sole_combo.currentIndex() < 0:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–æ—à–≤—É")
            return

        row = self.sole_table.rowCount()
        self.sole_table.insertRow(row)

        self.sole_table.setItem(row, 0, QTableWidgetItem(self.sole_combo.currentText()))
        self.sole_table.setItem(row, 1, QTableWidgetItem(self.sole_size_input.text()))
        self.sole_table.setItem(row, 2, QTableWidgetItem(self.sole_notes_input.text()))

        delete_btn = QPushButton("üóëÔ∏è")
        delete_btn.clicked.connect(lambda: self.delete_row(self.sole_table, row))
        self.sole_table.setCellWidget(row, 3, delete_btn)

        # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
        self.sole_size_input.clear()
        self.sole_notes_input.clear()

    def delete_row(self, table, row):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã"""
        table.removeRow(row)
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
        for i in range(table.rowCount()):
            btn = table.cellWidget(i, table.columnCount() - 1)
            if btn:
                btn.clicked.disconnect()
                btn.clicked.connect(lambda checked, r=i: self.delete_row(table, r))

    def save_model(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            if self.model_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    UPDATE models
                    SET article = %s, name = %s, last_code = %s,
                        lasting_type_id = %s, updated_at = CURRENT_TIMESTAMP
                    WHERE id = %s
                """, (
                    self.article_input.text(),
                    self.name_input.text(),
                    self.last_code_input.text(),
                    self.lasting_type_combo.currentData(),
                    self.model_id
                ))
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    INSERT INTO models (article, name, last_code, model_type, lasting_type_id)
                    VALUES (%s, %s, %s, %s, %s)
                    RETURNING id
                """, (
                    self.article_input.text(),
                    self.name_input.text(),
                    self.last_code_input.text(),
                    '–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è',
                    self.lasting_type_combo.currentData()
                ))
                self.model_id = cursor.fetchone()[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
            self.save_model_parameters(cursor)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
            self.save_model_components(cursor)

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.saved.emit()
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: {e}")

    def save_model_parameters(self, cursor):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–≤—è–∑–∏
        cursor.execute("DELETE FROM model_perforations WHERE model_id = %s", (self.model_id,))
        cursor.execute("DELETE FROM model_linings WHERE model_id = %s", (self.model_id,))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
        for i in range(self.perforations_list.count()):
            item = self.perforations_list.item(i)
            if item.isSelected():
                cursor.execute("""
                    INSERT INTO model_perforations (model_id, perforation_id)
                    VALUES (%s, %s)
                """, (self.model_id, item.data(Qt.ItemDataRole.UserRole)))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª–∞–¥–∫–∏
        for i in range(self.linings_list.count()):
            item = self.linings_list.item(i)
            if item.isSelected():
                cursor.execute("""
                    INSERT INTO model_linings (model_id, lining_id)
                    VALUES (%s, %s)
                """, (self.model_id, item.data(Qt.ItemDataRole.UserRole)))

    def save_model_components(self, cursor):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        cursor.execute("DELETE FROM model_components WHERE model_id = %s", (self.model_id,))

        sort_order = 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        for row in range(self.cutting_table.rowCount()):
            component_name = self.cutting_table.item(row, 0).text()
            quantity = float(self.cutting_table.item(row, 1).text())
            consumption = float(self.cutting_table.item(row, 2).text())
            notes = self.cutting_table.item(row, 3).text()

            cursor.execute("""
                INSERT INTO model_components
                (model_id, component_name, component_group, quantity, consumption, notes, sort_order)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (self.model_id, component_name.split(' - ')[-1] if ' - ' in component_name else component_name,
                  'cutting', quantity, consumption, notes, sort_order))
            sort_order += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
        for row in range(self.hardware_table.rowCount()):
            component_name = self.hardware_table.item(row, 0).text()
            quantity = float(self.hardware_table.item(row, 1).text())
            unit = self.hardware_table.item(row, 2).text()
            notes = self.hardware_table.item(row, 3).text()

            cursor.execute("""
                INSERT INTO model_components
                (model_id, component_name, component_group, quantity, unit, notes, sort_order)
                VALUES (%s, %s, %s, %s, %s, %s, %s)
            """, (self.model_id, component_name.split(' - ')[-1] if ' - ' in component_name else component_name,
                  'hardware', quantity, unit, notes, sort_order))
            sort_order += 1

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–æ—à–≤—ã
        for row in range(self.sole_table.rowCount()):
            sole_name = self.sole_table.item(row, 0).text()
            size_range = self.sole_table.item(row, 1).text()
            notes = self.sole_table.item(row, 2).text()

            cursor.execute("""
                INSERT INTO model_components
                (model_id, component_name, component_group, unit, notes, sort_order)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (self.model_id, sole_name.split(' - ')[-1] if ' - ' in sole_name else sole_name,
                  'sole', size_range, notes, sort_order))
            sort_order += 1

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        if not self.article_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
            return False

        if not self.name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            return False

        if not self.last_code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–æ–¥–∫—É")
            return False

        if self.cutting_table.rowCount() == 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –¥–µ—Ç–∞–ª—å –∫—Ä–æ—è")
            self.tabs.setCurrentIndex(0)
            return False

        if not self.lasting_type_combo.currentData():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—Ç—è–∂–∫–∏")
            self.tabs.setCurrentIndex(3)
            return False

        return True

    def create_specific_variant(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""
        if not self.model_id:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å")
            return

        from ui.references.model_specific_variant_form import ModelSpecificVariantForm
        dialog = ModelSpecificVariantForm(parent=self, db=self.db, model_id=self.model_id)
        dialog.saved.connect(self.load_variants)
        dialog.exec()

    def load_variants(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏"""
        if not self.model_id:
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            cursor.execute("""
                SELECT uuid, id, variant_code, variant_name, total_material_cost,
                       is_active, created_at,
                       jsonb_array_length(materials) as material_count
                FROM specifications
                WHERE model_id = %s
                ORDER BY created_at DESC
            """, (self.model_id,))

            variants = cursor.fetchall()

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.variants_table.setRowCount(0)

            for variant in variants:
                row = self.variants_table.rowCount()
                self.variants_table.insertRow(row)

                self.variants_table.setItem(row, 0, QTableWidgetItem(variant['variant_code'] or ''))
                self.variants_table.setItem(row, 1, QTableWidgetItem(variant['variant_name'] or ''))
                self.variants_table.setItem(row, 2, QTableWidgetItem(str(variant['material_count'] or 0)))

                cost = variant['total_material_cost'] or 0
                self.variants_table.setItem(row, 3, QTableWidgetItem(f"{cost:.2f} —Ä—É–±"))

                active = "–î–∞" if variant['is_active'] else "–ù–µ—Ç"
                self.variants_table.setItem(row, 4, QTableWidgetItem(active))

                created = variant['created_at'].strftime('%d.%m.%Y') if variant['created_at'] else ''
                self.variants_table.setItem(row, 5, QTableWidgetItem(created))

                # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π
                view_btn = QPushButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
                view_btn.clicked.connect(lambda checked, v_uuid=variant['uuid']: self.view_variant(v_uuid))
                self.variants_table.setCellWidget(row, 6, view_btn)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {e}")

    def view_variant(self, variant_id):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        print("üö® –í–ù–ò–ú–ê–ù–ò–ï: –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –°–¢–ê–†–ê–Ø model_specification_form_v3.py!")
        print("üö® –î–æ–ª–∂–Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è ModelSpecificationFormV5!")
        from ui.references.model_specific_variant_form import ModelSpecificVariantForm
        dialog = ModelSpecificVariantForm(
            parent=self,
            db=self.db,
            model_id=self.model_id,
            variant_id=variant_id,
            read_only=True
        )
        dialog.exec()

    def load_model_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            cursor.execute("SELECT * FROM models WHERE id = %s", (self.model_id,))
            model = cursor.fetchone()

            if model:
                self.article_input.setText(model['article'] or '')
                self.name_input.setText(model['name'] or '')
                self.last_code_input.setText(model['last_code'] or '')

            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–¥–µ–ª–∏
            cursor.execute("""
                SELECT * FROM model_components
                WHERE model_id = %s
                ORDER BY sort_order
            """, (self.model_id,))

            for component in cursor.fetchall():
                if component['component_group'] == 'cutting':
                    row = self.cutting_table.rowCount()
                    self.cutting_table.insertRow(row)
                    self.cutting_table.setItem(row, 0, QTableWidgetItem(component['component_name'] or ''))
                    self.cutting_table.setItem(row, 1, QTableWidgetItem(str(component['quantity'] or 0)))
                    self.cutting_table.setItem(row, 2, QTableWidgetItem(str(component['consumption'] or 0)))
                    self.cutting_table.setItem(row, 3, QTableWidgetItem(component['notes'] or ''))

                    delete_btn = QPushButton("üóëÔ∏è")
                    delete_btn.clicked.connect(lambda checked, r=row: self.delete_row(self.cutting_table, r))
                    self.cutting_table.setCellWidget(row, 4, delete_btn)

                elif component['component_group'] == 'hardware':
                    row = self.hardware_table.rowCount()
                    self.hardware_table.insertRow(row)
                    self.hardware_table.setItem(row, 0, QTableWidgetItem(component['component_name'] or ''))
                    self.hardware_table.setItem(row, 1, QTableWidgetItem(str(component['quantity'] or 0)))
                    self.hardware_table.setItem(row, 2, QTableWidgetItem(component['unit'] or '—à—Ç'))
                    self.hardware_table.setItem(row, 3, QTableWidgetItem(component['notes'] or ''))

                    delete_btn = QPushButton("üóëÔ∏è")
                    delete_btn.clicked.connect(lambda checked, r=row: self.delete_row(self.hardware_table, r))
                    self.hardware_table.setCellWidget(row, 4, delete_btn)

                elif component['component_group'] == 'sole':
                    row = self.sole_table.rowCount()
                    self.sole_table.insertRow(row)
                    self.sole_table.setItem(row, 0, QTableWidgetItem(component['component_name'] or ''))
                    self.sole_table.setItem(row, 1, QTableWidgetItem(component['unit'] or ''))
                    self.sole_table.setItem(row, 2, QTableWidgetItem(component['notes'] or ''))

                    delete_btn = QPushButton("üóëÔ∏è")
                    delete_btn.clicked.connect(lambda checked, r=row: self.delete_row(self.sole_table, r))
                    self.sole_table.setCellWidget(row, 3, delete_btn)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏: {e}")