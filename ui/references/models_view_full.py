"""Full models reference view with all DB fields"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QDate
from PyQt6.QtGui import QDoubleValidator, QIntValidator
from ui.base.base_table_v2 import BaseTableWidgetV2
from ui.base.base_form import BaseFormDialog
from ui.references.model_components_dialog_v2 import ModelComponentsDialogV2 as ModelComponentsDialog
from database.connection import DatabaseConnection
import psycopg2
import psycopg2.extras
import json

class ModelsTableFullWidget(BaseTableWidgetV2):
    """–ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–æ–¥–µ–ª–µ–π –æ–±—É–≤–∏ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –ë–î"""

    def __init__(self, parent=None):
        super().__init__('models', parent)
        self.setWindowTitle("–ú–æ–¥–µ–ª–∏ –æ–±—É–≤–∏ - –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è")
        self.db = DatabaseConnection()

    def setup_ui(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ UI –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"""
        # –í—ã–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –º–µ—Ç–æ–¥
        super().setup_ui()

        # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        # –ù–∞—Ö–æ–¥–∏–º layout –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        main_layout = self.layout()
        if main_layout and main_layout.count() > 0:
            # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            toolbar_layout = main_layout.itemAt(0).layout()
            if toolbar_layout:
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
                self.variants_btn = QPushButton("üìã –í–∞—Ä–∏–∞–Ω—Ç—ã")
                self.variants_btn.clicked.connect(self.show_variants)
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
                toolbar_layout.insertWidget(4, self.variants_btn)

    def get_search_columns(self):
        """–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
        return ['article', 'name', 'category', 'collection', 'season']

    def add_record(self):
        from ui.references.model_variant_dialog import ModelVariantTypeDialog
        from ui.references.model_specification_form_v5 import ModelSpecificationFormV5
        from ui.references.model_specific_variant_form import ModelSpecificVariantForm

        # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏
        type_dialog = ModelVariantTypeDialog(self)
        if type_dialog.exec():
            variant_type = type_dialog.get_variant_type()

            if variant_type == "free":
                # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å (—Å–≤–æ–±–æ–¥–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
                dialog = ModelSpecificationFormV5(is_variant=False, parent=self)
                dialog.saved.connect(self.refresh_data)
                dialog.exec()
            else:
                # –î–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–æ—Ä–º—É
                model_id = self.select_base_model()
                if model_id:
                    dialog = ModelSpecificVariantForm(parent=self, db=self.db, model_id=model_id)
                    dialog.saved.connect(self.refresh_data)
                    dialog.exec()

    def select_base_model(self):
        """–î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
            cursor.execute("""
                SELECT id, article, name, last_code
                FROM models
                ORDER BY article
            """)

            models = cursor.fetchall()
            cursor.close()
            self.db.put_connection(conn)

            if not models:
                QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π")
                return None

            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞
            items = []
            model_ids = []
            for model in models:
                items.append(f"{model['article']} - {model['name']} (–ö–æ–ª–æ–¥–∫–∞: {model['last_code']})")
                model_ids.append(model['id'])

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞
            item, ok = QInputDialog.getItem(
                self,
                "–í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏",
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:",
                items,
                0,
                False
            )

            if ok and item:
                index = items.index(item)
                return model_ids[index]

            return None

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏: {e}")
            return None

    def edit_record(self):
        record_id = self.get_current_record_id()
        if record_id:
            from ui.references.model_specification_form_v5 import ModelSpecificationFormV5
            # –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–æ–¥–µ–ª–∏ –ø–æ –Ω–∞–ª–∏—á–∏—é –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞
            # TODO: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å is_variant –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
            dialog = ModelSpecificationFormV5(model_id=record_id, is_variant=False, parent=self)
            dialog.saved.connect(self.refresh_data)
            dialog.exec()

    def show_variants(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
        record_id = self.get_current_record_id()
        if not record_id:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
            return

        from ui.references.variants_list_dialog import VariantsListDialog
        dialog = VariantsListDialog(model_id=record_id, db=self.db, parent=self)
        dialog.exec()


class ModelFullFormDialog(BaseFormDialog):
    """–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏"""

    def __init__(self, title: str, parent=None):
        self.record_id = None
        self.db = DatabaseConnection()
        super().__init__(title, parent)
        self.resize(1200, 800)

    def create_form_content(self):
        # –ì–ª–∞–≤–Ω—ã–π layout —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        content = QWidget()
        scroll.setWidget(content)
        self.layout.addWidget(scroll)

        # –¢–∞–±—ã –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ–ª–µ–π
        self.tabs = QTabWidget()
        layout = QVBoxLayout(content)
        layout.addWidget(self.tabs)

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        self.create_main_tab()
        self.create_characteristics_tab()
        self.create_materials_tab()
        self.create_pricing_tab()
        self.create_production_tab()
        self.create_components_tab()
        self.create_additional_tab()

    def create_main_tab(self):
        """–û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –ê—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        self.article_input = QLineEdit()
        self.article_input.setMaxLength(50)
        self.name_input = QLineEdit()
        self.name_input.setMaxLength(200)

        layout.addRow("–ê—Ä—Ç–∏–∫—É–ª*:", self.article_input)
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ*:", self.name_input)

        # –ü–æ–ª –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        self.gender_combo = QComboBox()
        self.gender_combo.addItems(["", "–ú—É–∂—Å–∫–∞—è", "–ñ–µ–Ω—Å–∫–∞—è", "–£–Ω–∏—Å–µ–∫—Å", "–î–µ—Ç—Å–∫–∞—è"])

        self.model_type_input = QLineEdit()
        self.model_type_input.setPlaceholderText("–ë–æ—Ç–∏–Ω–∫–∏, –¢—É—Ñ–ª–∏, –ö—Ä–æ—Å—Å–æ–≤–∫–∏...")

        self.category_input = QLineEdit()
        self.category_input.setPlaceholderText("–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è, –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è, –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è...")

        layout.addRow("–ü–æ–ª:", self.gender_combo)
        layout.addRow("–¢–∏–ø –º–æ–¥–µ–ª–∏:", self.model_type_input)
        layout.addRow("–ö–∞—Ç–µ–≥–æ—Ä–∏—è:", self.category_input)

        # –ö–æ–ª–ª–µ–∫—Ü–∏—è –∏ —Å–µ–∑–æ–Ω
        self.collection_input = QLineEdit()
        self.collection_input.setPlaceholderText("–í–µ—Å–Ω–∞-–õ–µ—Ç–æ 2024...")

        self.season_combo = QComboBox()
        self.season_combo.addItems(["", "–í–µ—Å–Ω–∞-–õ–µ—Ç–æ", "–û—Å–µ–Ω—å-–ó–∏–º–∞", "–î–µ–º–∏—Å–µ–∑–æ–Ω", "–í—Å–µ—Å–µ–∑–æ–Ω"])

        layout.addRow("–ö–æ–ª–ª–µ–∫—Ü–∏—è:", self.collection_input)
        layout.addRow("–°–µ–∑–æ–Ω:", self.season_combo)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥
        size_group = QGroupBox("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥")
        size_layout = QHBoxLayout(size_group)

        self.size_min = QSpinBox()
        self.size_min.setRange(15, 50)
        self.size_min.setValue(36)

        self.size_max = QSpinBox()
        self.size_max.setRange(15, 50)
        self.size_max.setValue(46)

        size_layout.addWidget(QLabel("–û—Ç:"))
        size_layout.addWidget(self.size_min)
        size_layout.addWidget(QLabel("–î–æ:"))
        size_layout.addWidget(self.size_max)
        size_layout.addStretch()

        layout.addRow(size_group)

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.is_active_check = QCheckBox("–ú–æ–¥–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞")
        self.is_active_check.setChecked(True)
        layout.addRow("–°—Ç–∞—Ç—É—Å:", self.is_active_check)

        self.tabs.addTab(tab, "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    def create_characteristics_tab(self):
        """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –ö–æ–ª–æ–¥–∫–∞
        self.last_code_input = QLineEdit()
        self.last_code_input.setPlaceholderText("–ö–æ–¥ –∫–æ–ª–æ–¥–∫–∏")

        self.last_type_combo = QComboBox()
        self.last_type_combo.addItems(["", "–ë–æ—Ç–∏–Ω–æ—á–Ω–∞—è", "–¢—É—Ñ–µ–ª—å–Ω–∞—è", "–°–∞–ø–æ–∂–Ω–∞—è",
                                      "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è", "–ú–æ–∫–∞—Å–∏–Ω–Ω–∞—è"])

        layout.addRow("–ö–æ–¥ –∫–æ–ª–æ–¥–∫–∏:", self.last_code_input)
        layout.addRow("–¢–∏–ø –∫–æ–ª–æ–¥–∫–∏:", self.last_type_combo)

        # –ú–µ—Ç–æ–¥ –∫—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Ç–∏–ø –ø–æ–¥–æ—à–≤—ã
        self.assembly_type_combo = QComboBox()
        self.assembly_type_combo.addItems(["", "–ö–ª–µ–µ–≤–æ–π", "–ü—Ä–æ—à–∏–≤–Ω–æ–π", "–õ–∏—Ç—å–µ–≤–æ–π",
                                          "–ó–∞–≥–æ—Ç–æ–≤–æ—á–Ω–æ-–Ω–∞—à–∏–≤–Ω–æ–π", "–°–∞–Ω–¥–∞–ª—å–Ω—ã–π"])

        self.sole_type_input = QLineEdit()
        self.sole_type_input.setPlaceholderText("–¢–≠–ü, –ü–£, –†–µ–∑–∏–Ω–∞, –ö–æ–∂–∞...")

        layout.addRow("–ú–µ—Ç–æ–¥ –∫—Ä–µ–ø–ª–µ–Ω–∏—è:", self.assembly_type_combo)
        layout.addRow("–¢–∏–ø –ø–æ–¥–æ—à–≤—ã:", self.sole_type_input)

        # –¢–∏–ø –∑–∞—Å—Ç–µ–∂–∫–∏
        self.closure_type_combo = QComboBox()
        self.closure_type_combo.addItems(["", "–®–Ω—É—Ä–∫–∏", "–ú–æ–ª–Ω–∏—è", "–õ–∏–ø—É—á–∫–∞",
                                         "–ü—Ä—è–∂–∫–∞", "–†–µ–∑–∏–Ω–∫–∞", "–ë–µ–∑ –∑–∞—Å—Ç–µ–∂–∫–∏"])

        layout.addRow("–¢–∏–ø –∑–∞—Å—Ç–µ–∂–∫–∏:", self.closure_type_combo)

        # –†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥ –ª–µ–∫–∞–ª
        self.pattern_size_range_input = QLineEdit()
        self.pattern_size_range_input.setPlaceholderText("36-46")

        layout.addRow("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥ –ª–µ–∫–∞–ª:", self.pattern_size_range_input)

        self.tabs.addTab(tab, "‚öôÔ∏è –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏")

    def create_materials_tab(self):
        """–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –Ω–æ—Ä–º—ã"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤–µ—Ä—Ö–∞
        self.default_upper_material = QLineEdit()
        self.default_upper_material.setPlaceholderText("–ö–æ–∂–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è, –∑–∞–º—à–∞...")

        layout.addRow("–ú–∞—Ç–µ—Ä–∏–∞–ª –≤–µ—Ä—Ö–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:", self.default_upper_material)

        # –ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞
        norm_group = QGroupBox("–ù–æ—Ä–º—ã —Ä–∞—Å—Ö–æ–¥–∞")
        norm_layout = QFormLayout(norm_group)

        self.base_leather_norm = QDoubleSpinBox()
        self.base_leather_norm.setRange(0, 999)
        self.base_leather_norm.setSuffix(" –¥–º¬≤")
        self.base_leather_norm.setDecimals(2)

        self.base_lining_norm = QDoubleSpinBox()
        self.base_lining_norm.setRange(0, 999)
        self.base_lining_norm.setSuffix(" –¥–º¬≤")
        self.base_lining_norm.setDecimals(2)

        self.base_labor_hours = QDoubleSpinBox()
        self.base_labor_hours.setRange(0, 99)
        self.base_labor_hours.setSuffix(" —á")
        self.base_labor_hours.setDecimals(2)

        norm_layout.addRow("–ù–æ—Ä–º–∞ –∫–æ–∂–∏:", self.base_leather_norm)
        norm_layout.addRow("–ù–æ—Ä–º–∞ –ø–æ–¥–∫–ª–∞–¥–∫–∏:", self.base_lining_norm)
        norm_layout.addRow("–¢—Ä—É–¥–æ–∑–∞—Ç—Ä–∞—Ç—ã:", self.base_labor_hours)

        layout.addRow(norm_group)

        self.tabs.addTab(tab, "üßµ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")

    def create_pricing_tab(self):
        """–¶–µ–Ω—ã –∏ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost_group = QGroupBox("–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å")
        cost_layout = QFormLayout(cost_group)

        self.material_cost = QDoubleSpinBox()
        self.material_cost.setRange(0, 999999)
        self.material_cost.setSuffix(" ‚ÇΩ")
        self.material_cost.setDecimals(2)

        self.labor_cost = QDoubleSpinBox()
        self.labor_cost.setRange(0, 999999)
        self.labor_cost.setSuffix(" ‚ÇΩ")
        self.labor_cost.setDecimals(2)

        self.overhead_cost = QDoubleSpinBox()
        self.overhead_cost.setRange(0, 999999)
        self.overhead_cost.setSuffix(" ‚ÇΩ")
        self.overhead_cost.setDecimals(2)

        cost_layout.addRow("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:", self.material_cost)
        cost_layout.addRow("–†–∞–±–æ—Ç–∞:", self.labor_cost)
        cost_layout.addRow("–ù–∞–∫–ª–∞–¥–Ω—ã–µ:", self.overhead_cost)

        # –ò—Ç–æ–≥–æ —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        self.total_cost_label = QLabel("0.00 ‚ÇΩ")
        self.total_cost_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        cost_layout.addRow("–ò–¢–û–ì–û:", self.total_cost_label)

        layout.addRow(cost_group)

        # –¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏
        price_group = QGroupBox("–¶–µ–Ω—ã –ø—Ä–æ–¥–∞–∂–∏")
        price_layout = QFormLayout(price_group)

        self.retail_price = QDoubleSpinBox()
        self.retail_price.setRange(0, 999999)
        self.retail_price.setSuffix(" ‚ÇΩ")
        self.retail_price.setDecimals(2)

        self.wholesale_price = QDoubleSpinBox()
        self.wholesale_price.setRange(0, 999999)
        self.wholesale_price.setSuffix(" ‚ÇΩ")
        self.wholesale_price.setDecimals(2)

        self.online_price = QDoubleSpinBox()
        self.online_price.setRange(0, 999999)
        self.online_price.setSuffix(" ‚ÇΩ")
        self.online_price.setDecimals(2)

        price_layout.addRow("–†–æ–∑–Ω–∏—á–Ω–∞—è:", self.retail_price)
        price_layout.addRow("–û–ø—Ç–æ–≤–∞—è:", self.wholesale_price)
        price_layout.addRow("–û–Ω–ª–∞–π–Ω:", self.online_price)

        # –ú–∞—Ä–∂–∞
        self.margin_label = QLabel("–ú–∞—Ä–∂–∞: 0%")
        price_layout.addRow(self.margin_label)

        layout.addRow(price_group)

        # –°–≤—è–∑—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã
        self.material_cost.valueChanged.connect(self.calculate_totals)
        self.labor_cost.valueChanged.connect(self.calculate_totals)
        self.overhead_cost.valueChanged.connect(self.calculate_totals)
        self.retail_price.valueChanged.connect(self.calculate_margin)
        self.wholesale_price.valueChanged.connect(self.calculate_margin)

        self.tabs.addTab(tab, "üí∞ –¶–µ–Ω—ã")

    def create_production_tab(self):
        """–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ó–∞–º–µ—Ç–∫–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ
        layout.addWidget(QLabel("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:"))
        self.production_notes = QTextEdit()
        self.production_notes.setMaximumHeight(150)
        self.production_notes.setPlaceholderText(
            "–£–∫–∞–∂–∏—Ç–µ –æ—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É, —Å–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, "
            "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ..."
        )
        layout.addWidget(self.production_notes)

        # –¢–µ–≥–∏
        layout.addWidget(QLabel("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):"))
        self.tags_input = QLineEdit()
        self.tags_input.setPlaceholderText("–ø—Ä–µ–º–∏—É–º, —ç–∫—Å–ø–æ—Ä—Ç, –Ω–æ–≤–∏–Ω–∫–∞...")
        layout.addWidget(self.tags_input)

        layout.addStretch()

        self.tabs.addTab(tab, "‚öôÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")

    def create_components_tab(self):
        """–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel(
            "–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è –∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ "
            "–ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏."
        )
        info_label.setWordWrap(True)
        layout.addWidget(info_label)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.btn_edit_components = QPushButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏")
        self.btn_edit_components.setEnabled(False)  # –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.btn_edit_components.clicked.connect(self.open_components_dialog)
        layout.addWidget(self.btn_edit_components)

        # –¢–∞–±–ª–∏—Ü–∞ —Ç–µ–∫—É—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
        layout.addWidget(QLabel("–¢–µ–∫—É—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"))
        self.components_table = QTableWidget()
        self.components_table.setColumnCount(3)
        self.components_table.setHorizontalHeaderLabels(["–¢–∏–ø", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
        layout.addWidget(self.components_table)

        self.tabs.addTab(tab, "üß© –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")

    def create_additional_tab(self):
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        tab = QWidget()
        layout = QFormLayout(tab)

        # –§–æ—Ç–æ
        self.main_photo_url = QLineEdit()
        self.main_photo_url.setPlaceholderText("URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–æ—Ç–æ")
        layout.addRow("–û—Å–Ω–æ–≤–Ω–æ–µ —Ñ–æ—Ç–æ:", self.main_photo_url)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        layout.addRow(QLabel("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ (JSON):"))
        self.properties_text = QTextEdit()
        self.properties_text.setMaximumHeight(150)
        self.properties_text.setPlaceholderText('{"–∫–ª—é—á": "–∑–Ω–∞—á–µ–Ω–∏–µ"}')
        layout.addRow(self.properties_text)

        self.tabs.addTab(tab, "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ")

    def calculate_totals(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        total = (self.material_cost.value() +
                self.labor_cost.value() +
                self.overhead_cost.value())
        self.total_cost_label.setText(f"{total:.2f} ‚ÇΩ")
        self.calculate_margin()

    def calculate_margin(self):
        """–†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏"""
        total_cost = (self.material_cost.value() +
                     self.labor_cost.value() +
                     self.overhead_cost.value())

        if total_cost > 0:
            retail_margin = ((self.retail_price.value() - total_cost) / total_cost * 100)
            wholesale_margin = ((self.wholesale_price.value() - total_cost) / total_cost * 100)
            self.margin_label.setText(
                f"–ú–∞—Ä–∂–∞: –†–æ–∑–Ω–∏—Ü–∞ {retail_margin:.1f}% | –û–ø—Ç {wholesale_margin:.1f}%"
            )
        else:
            self.margin_label.setText("–ú–∞—Ä–∂–∞: 0%")

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            data = {
                'article': self.article_input.text(),
                'name': self.name_input.text(),
                'gender': self.gender_combo.currentText() or None,
                'model_type': self.model_type_input.text() or None,
                'category': self.category_input.text() or None,
                'collection': self.collection_input.text() or None,
                'season': self.season_combo.currentText() or None,
                'last_code': self.last_code_input.text() or None,
                'last_type': self.last_type_combo.currentText() or None,
                'closure_type': self.closure_type_combo.currentText() or None,
                'sole_type': self.sole_type_input.text() or None,
                'size_min': self.size_min.value(),
                'size_max': self.size_max.value(),
                'pattern_size_range': self.pattern_size_range_input.text() or None,
                'assembly_type': self.assembly_type_combo.currentText() or None,
                'default_upper_material': self.default_upper_material.text() or None,
                'base_leather_norm': self.base_leather_norm.value() if self.base_leather_norm.value() > 0 else None,
                'base_lining_norm': self.base_lining_norm.value() if self.base_lining_norm.value() > 0 else None,
                'base_labor_hours': self.base_labor_hours.value() if self.base_labor_hours.value() > 0 else None,
                'material_cost': self.material_cost.value() if self.material_cost.value() > 0 else None,
                'labor_cost': self.labor_cost.value() if self.labor_cost.value() > 0 else None,
                'overhead_cost': self.overhead_cost.value() if self.overhead_cost.value() > 0 else None,
                'retail_price': self.retail_price.value() if self.retail_price.value() > 0 else None,
                'wholesale_price': self.wholesale_price.value() if self.wholesale_price.value() > 0 else None,
                'online_price': self.online_price.value() if self.online_price.value() > 0 else None,
                'main_photo_url': self.main_photo_url.text() or None,
                'is_active': self.is_active_check.isChecked()
            }

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON –ø–æ–ª–µ–π
            if self.tags_input.text():
                tags = [tag.strip() for tag in self.tags_input.text().split(',')]
                data['tags'] = json.dumps(tags, ensure_ascii=False)

            if self.properties_text.toPlainText():
                try:
                    properties = json.loads(self.properties_text.toPlainText())
                    data['properties'] = json.dumps(properties, ensure_ascii=False)
                except:
                    pass

            if self.record_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                columns = []
                values = []
                for key, value in data.items():
                    columns.append(f"{key} = %s")
                    values.append(value)
                values.append(self.record_id)

                query = f"UPDATE models SET {', '.join(columns)}, updated_at = NOW() WHERE id = %s"
                cursor.execute(query, values)
            else:
                # –°–æ–∑–¥–∞–Ω–∏–µ
                import uuid
                data['uuid'] = str(uuid.uuid4())

                columns = list(data.keys())
                placeholders = ['%s'] * len(columns)

                query = f"""
                    INSERT INTO models ({', '.join(columns)}, created_at, updated_at)
                    VALUES ({', '.join(placeholders)}, NOW(), NOW())
                    RETURNING id
                """
                cursor.execute(query, list(data.values()))
                self.record_id = cursor.fetchone()[0]

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.btn_edit_components.setEnabled(True)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ", "–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")

    def load_data(self, record_id: int):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏"""
        self.record_id = record_id

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("SELECT * FROM models WHERE id = %s", (record_id,))
            row = cursor.fetchone()
            cursor.close()
            self.db.put_connection(conn)

            if row:
                # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                self.article_input.setText(row['article'] or '')
                self.name_input.setText(row['name'] or '')
                self.gender_combo.setCurrentText(row['gender'] or '')
                self.model_type_input.setText(row['model_type'] or '')
                self.category_input.setText(row['category'] or '')
                self.collection_input.setText(row['collection'] or '')
                self.season_combo.setCurrentText(row['season'] or '')

                # –†–∞–∑–º–µ—Ä—ã
                if row['size_min']:
                    self.size_min.setValue(row['size_min'])
                if row['size_max']:
                    self.size_max.setValue(row['size_max'])

                # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                self.last_code_input.setText(row['last_code'] or '')
                self.last_type_combo.setCurrentText(row['last_type'] or '')
                self.assembly_type_combo.setCurrentText(row['assembly_type'] or '')
                self.sole_type_input.setText(row['sole_type'] or '')
                self.closure_type_combo.setCurrentText(row['closure_type'] or '')
                self.pattern_size_range_input.setText(row['pattern_size_range'] or '')

                # –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
                self.default_upper_material.setText(row['default_upper_material'] or '')
                if row['base_leather_norm']:
                    self.base_leather_norm.setValue(float(row['base_leather_norm']))
                if row['base_lining_norm']:
                    self.base_lining_norm.setValue(float(row['base_lining_norm']))
                if row['base_labor_hours']:
                    self.base_labor_hours.setValue(float(row['base_labor_hours']))

                # –¶–µ–Ω—ã
                if row['material_cost']:
                    self.material_cost.setValue(float(row['material_cost']))
                if row['labor_cost']:
                    self.labor_cost.setValue(float(row['labor_cost']))
                if row['overhead_cost']:
                    self.overhead_cost.setValue(float(row['overhead_cost']))
                if row['retail_price']:
                    self.retail_price.setValue(float(row['retail_price']))
                if row['wholesale_price']:
                    self.wholesale_price.setValue(float(row['wholesale_price']))
                if row['online_price']:
                    self.online_price.setValue(float(row['online_price']))

                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                self.main_photo_url.setText(row['main_photo_url'] or '')
                if row['tags']:
                    tags = json.loads(row['tags']) if isinstance(row['tags'], str) else row['tags']
                    self.tags_input.setText(', '.join(tags))
                if row['properties']:
                    props = row['properties'] if isinstance(row['properties'], dict) else json.loads(row['properties'])
                    self.properties_text.setPlainText(json.dumps(props, indent=2, ensure_ascii=False))

                self.is_active_check.setChecked(row['is_active'] if row['is_active'] is not None else True)

                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                self.btn_edit_components.setEnabled(True)
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–≤—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                self.load_components_preview()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")

    def validate(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        if not self.article_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –º–æ–¥–µ–ª–∏")
            self.tabs.setCurrentIndex(0)
            self.article_input.setFocus()
            return False

        if not self.name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏")
            self.tabs.setCurrentIndex(0)
            self.name_input.setFocus()
            return False

        return True

    def open_components_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        if not self.record_id:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ",
                              "–°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
            return

        article = self.article_input.text()
        dialog = ModelComponentsDialog(self.record_id, article, self)
        dialog.exec()
        self.load_components_preview()

    def load_components_preview(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–µ–≤—å—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.record_id:
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("""
                SELECT component_group, component_name,
                       COALESCE(absolute_consumption, consumption_percent) as qty,
                       unit
                FROM model_components
                WHERE model_id = %s
                ORDER BY sort_order
            """, (self.record_id,))

            components = cursor.fetchall()
            cursor.close()
            self.db.put_connection(conn)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.components_table.setRowCount(len(components))
            for row, comp in enumerate(components):
                group_display = {
                    'cutting': '–ö—Ä–æ–π',
                    'material': '–ú–∞—Ç–µ—Ä–∏–∞–ª',
                    'other': '–ü—Ä–æ—á–µ–µ'
                }.get(comp['component_group'], comp['component_group'])

                self.components_table.setItem(row, 0, QTableWidgetItem(group_display))
                self.components_table.setItem(row, 1, QTableWidgetItem(comp['component_name']))
                qty_str = f"{comp['qty']:.2f} {comp['unit']}" if comp['qty'] else ""
                self.components_table.setItem(row, 2, QTableWidgetItem(qty_str))

        except Exception as e:
            print(f"Error loading components preview: {e}")