"""
–§–æ—Ä–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QLineEdit, QTableWidget, QTableWidgetItem,
    QGroupBox, QGridLayout, QTextEdit, QMessageBox,
    QDialogButtonBox, QHeaderView, QComboBox, QDoubleSpinBox
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
import psycopg2.extras
import json
from uuid import uuid4


class VariantViewEditForm(QDialog):
    """–§–æ—Ä–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""

    saved = pyqtSignal()

    def __init__(self, parent=None, db=None, variant_id=None, read_only=False):
        super().__init__(parent)
        print("üö® –û–®–ò–ë–ö–ê: –ó–ê–ì–†–£–ñ–ê–ï–¢–°–Ø –°–¢–ê–†–ê–Ø —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ VariantViewEditForm!")
        print("üö® –î–æ–ª–∂–Ω–∞ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è ModelSpecificVariantForm —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ –∏ –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")
        self.db = db
        self.variant_id = variant_id
        self.read_only = read_only
        self.mode = 'view' if read_only else 'edit'  # –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        self.model_id = None
        self.variant_data = None

        self.setWindowTitle("üö® –°–¢–ê–†–ê–Ø —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ - " + ("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞" if read_only else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞"))
        self.setModal(True)
        self.resize(1200, 800)

        self.init_ui()
        self.load_variant_data()

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        if self.read_only:
            self.set_readonly(True)

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        self.title_label = QLabel()
        self.title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        self.mode_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" if self.mode == 'view' else "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
        self.mode_btn.clicked.connect(self.toggle_mode)
        header_layout.addWidget(self.mode_btn)

        layout.addLayout(header_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QGridLayout()

        info_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"), 0, 0)
        self.variant_name_input = QLineEdit()
        info_layout.addWidget(self.variant_name_input, 0, 1)

        info_layout.addWidget(QLabel("–ö–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"), 0, 2)
        self.variant_code_input = QLineEdit()
        info_layout.addWidget(self.variant_code_input, 0, 3)

        info_layout.addWidget(QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:"), 1, 0)
        self.description_input = QTextEdit()
        self.description_input.setMaximumHeight(60)
        info_layout.addWidget(self.description_input, 1, 1, 1, 3)

        info_layout.addWidget(QLabel("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:"), 2, 0)
        self.total_cost_label = QLabel("0.00 —Ä—É–±")
        self.total_cost_label.setStyleSheet("font-weight: bold; color: #2196F3;")
        info_layout.addWidget(self.total_cost_label, 2, 1)

        info_group.setLayout(info_layout)
        layout.addWidget(info_group)

        # –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        cutting_group = QGroupBox("–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")
        cutting_layout = QVBoxLayout()

        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(7)
        self.cutting_table.setHorizontalHeaderLabels([
            "–î–µ—Ç–∞–ª—å", "–ö–æ–ª-–≤–æ", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–†–∞—Å—Ö–æ–¥",
            "–¶–µ–Ω–∞/–µ–¥", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
        ])
        self.cutting_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        cutting_layout.addWidget(self.cutting_table)

        cutting_group.setLayout(cutting_layout)
        layout.addWidget(cutting_group)

        # –§—É—Ä–Ω–∏—Ç—É—Ä–∞
        hardware_group = QGroupBox("–§—É—Ä–Ω–∏—Ç—É—Ä–∞")
        hardware_layout = QVBoxLayout()

        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(4)
        self.hardware_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–ï–¥.–∏–∑–º.", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"])
        self.hardware_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        hardware_layout.addWidget(self.hardware_table)

        hardware_group.setLayout(hardware_layout)
        layout.addWidget(hardware_group)

        # –ü–æ–¥–æ—à–≤–∞
        sole_group = QGroupBox("–ü–æ–¥–æ—à–≤–∞")
        sole_layout = QGridLayout()

        sole_layout.addWidget(QLabel("–ü–æ–¥–æ—à–≤–∞:"), 0, 0)
        self.sole_label = QLabel()
        sole_layout.addWidget(self.sole_label, 0, 1)

        sole_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥:"), 0, 2)
        self.sole_size_label = QLabel()
        sole_layout.addWidget(self.sole_size_label, 0, 3)

        sole_group.setLayout(sole_layout)
        layout.addWidget(sole_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox()

        if self.mode == 'edit':
            save_btn = buttons.addButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", QDialogButtonBox.ButtonRole.AcceptRole)
            save_btn.clicked.connect(self.save_variant)

        cancel_btn = buttons.addButton("–ó–∞–∫—Ä—ã—Ç—å", QDialogButtonBox.ButtonRole.RejectRole)
        cancel_btn.clicked.connect(self.reject)

        layout.addWidget(buttons)

    def load_variant_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        if not self.variant_id:
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            cursor.execute("""
                SELECT s.*, m.name as model_name, m.article as model_article
                FROM specifications s
                JOIN models m ON s.model_id = m.id
                WHERE s.id = %s
            """, (self.variant_id,))

            variant = cursor.fetchone()

            if variant:
                self.variant_data = variant
                self.model_id = variant['model_id']

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                self.title_label.setText(f"{variant['model_name']} - –í–∞—Ä–∏–∞–Ω—Ç: {variant['variant_name'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
                self.variant_name_input.setText(variant['variant_name'] or '')
                self.variant_code_input.setText(variant['variant_code'] or '')
                self.description_input.setText(variant.get('description', '') or '')

                if variant.get('total_cost'):
                    self.total_cost_label.setText(f"{float(variant['total_cost']):.2f} —Ä—É–±")

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
                cutting_parts = variant.get('cutting_parts', [])
                print(f"üîç –ò—Å—Ö–æ–¥–Ω—ã–π cutting_parts: {type(cutting_parts)} = {cutting_parts}")
                if isinstance(cutting_parts, str):
                    print("üîß –ü—Ä–∏–º–µ–Ω—è–µ–º JSON –ø–∞—Ä—Å–∏–Ω–≥...")
                    cutting_parts = json.loads(cutting_parts) if cutting_parts else []
                    print(f"‚úÖ –ü–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞: {type(cutting_parts)} = {cutting_parts}")
                self.load_cutting_parts(cutting_parts)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
                hardware = variant.get('hardware', [])
                if isinstance(hardware, str):
                    hardware = json.loads(hardware) if hardware else []
                self.load_hardware(hardware)

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–¥–æ—à–≤—É
                sole = variant.get('sole')
                if isinstance(sole, str):
                    sole = json.loads(sole) if sole else None
                self.load_sole(sole)

            cursor.close()
            conn.close()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç: {e}")

    def load_cutting_parts(self, cutting_parts):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –≤ —Ç–∞–±–ª–∏—Ü—É"""
        print(f"üîç load_cutting_parts –≤—ã–∑–≤–∞–Ω —Å: {type(cutting_parts)} = {cutting_parts}")

        if not cutting_parts:
            print("‚ö†Ô∏è cutting_parts –ø—É—Å—Ç–æ–π, –≤—ã—Ö–æ–¥–∏–º")
            return

        self.cutting_table.setRowCount(len(cutting_parts))

        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
        materials = self.variant_data.get('materials', [])
        material_prices = {}
        if isinstance(materials, list):
            for mat in materials:
                material_prices[mat['id']] = float(mat.get('price', 0))
        elif isinstance(materials, dict):
            for mat_id, mat in materials.items():
                material_prices[int(mat_id)] = float(mat.get('price', 0))

        for row, part in enumerate(cutting_parts):
            # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
            self.cutting_table.setItem(row, 0, QTableWidgetItem(part.get('name', '')))

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
            self.cutting_table.setItem(row, 1, QTableWidgetItem(str(part.get('quantity', 0))))

            # –ú–∞—Ç–µ—Ä–∏–∞–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            material_text = ""
            material_id = None
            price = 0

            if 'material' in part and part['material']:
                # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º –æ–±—ä–µ–∫—Ç–æ–º material
                material_info = part['material']
                material_text = f"{material_info.get('name', '')} ({material_info.get('code', '')})"
                price = float(material_info.get('price', 0))
                material_id = material_info.get('id')
            elif 'material_name' in part:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                material_text = f"{part.get('material_name', '')} ({part.get('material_code', '')})"
                material_id = part.get('material_id')
                if material_id and material_id in material_prices:
                    price = material_prices[material_id]

            self.cutting_table.setItem(row, 2, QTableWidgetItem(material_text))

            # –†–∞—Å—Ö–æ–¥
            consumption = part.get('consumption', 0)
            if self.mode == 'edit':
                spin_box = QDoubleSpinBox()
                spin_box.setRange(0, 9999)
                spin_box.setValue(float(consumption))
                spin_box.setSuffix(" –¥–º¬≤")
                spin_box.valueChanged.connect(self.calculate_costs)
                self.cutting_table.setCellWidget(row, 3, spin_box)
            else:
                self.cutting_table.setItem(row, 3, QTableWidgetItem(f"{consumption} –¥–º¬≤"))

            # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
            self.cutting_table.setItem(row, 4, QTableWidgetItem(f"{price:.2f}"))

            # –°—Ç–æ–∏–º–æ—Å—Ç—å
            cost = float(consumption) * price
            self.cutting_table.setItem(row, 5, QTableWidgetItem(f"{cost:.2f}"))

            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
            self.cutting_table.setItem(row, 6, QTableWidgetItem(part.get('notes', '')))

    def load_hardware(self, hardware):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not hardware:
            return

        self.hardware_table.setRowCount(len(hardware))

        for row, hw in enumerate(hardware):
            self.hardware_table.setItem(row, 0, QTableWidgetItem(hw.get('name', '')))
            self.hardware_table.setItem(row, 1, QTableWidgetItem(str(hw.get('quantity', 0))))
            self.hardware_table.setItem(row, 2, QTableWidgetItem(hw.get('unit', '')))
            self.hardware_table.setItem(row, 3, QTableWidgetItem(hw.get('notes', '')))

    def load_sole(self, sole_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–æ—à–≤–µ"""
        if sole_data:
            self.sole_label.setText(f"{sole_data.get('name', '')} ({sole_data.get('code', '')})")
            self.sole_size_label.setText(sole_data.get('size_range', ''))

    def toggle_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.mode == 'view':
            self.mode = 'edit'
            self.mode_btn.setText("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            self.set_readonly(False)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            self.layout().itemAt(self.layout().count() - 1).widget().clear()
            buttons = self.layout().itemAt(self.layout().count() - 1).widget()
            save_btn = buttons.addButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", QDialogButtonBox.ButtonRole.AcceptRole)
            save_btn.clicked.connect(self.save_variant)

        else:
            self.mode = 'view'
            self.mode_btn.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            self.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            self.set_readonly(True)

    def set_readonly(self, readonly):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        self.variant_name_input.setReadOnly(readonly)
        self.variant_code_input.setReadOnly(readonly)
        self.description_input.setReadOnly(readonly)

        # –î–ª—è —Ç–∞–±–ª–∏—Ü —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if readonly:
            self.cutting_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
            self.hardware_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        else:
            self.cutting_table.setEditTriggers(QTableWidget.EditTrigger.AllEditTriggers)
            self.hardware_table.setEditTriggers(QTableWidget.EditTrigger.AllEditTriggers)

    def calculate_costs(self):
        """–ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
        total_cost = 0

        for row in range(self.cutting_table.rowCount()):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥
            consumption_widget = self.cutting_table.cellWidget(row, 3)
            if consumption_widget:
                consumption = consumption_widget.value()
            else:
                consumption_item = self.cutting_table.item(row, 3)
                consumption = float(consumption_item.text().replace(' –¥–º¬≤', '')) if consumption_item else 0

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
            price_item = self.cutting_table.item(row, 4)
            price = float(price_item.text()) if price_item else 0

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            cost = consumption * price
            self.cutting_table.setItem(row, 5, QTableWidgetItem(f"{cost:.2f}"))

            total_cost += cost

        self.total_cost_label.setText(f"{total_cost:.2f} —Ä—É–±")

    def save_variant(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            cutting_parts = []
            for row in range(self.cutting_table.rowCount()):
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥
                consumption_widget = self.cutting_table.cellWidget(row, 3)
                if consumption_widget:
                    consumption = consumption_widget.value()
                else:
                    consumption_item = self.cutting_table.item(row, 3)
                    consumption = float(consumption_item.text().replace(' –¥–º¬≤', '')) if consumption_item else 0

                part = {
                    'name': self.cutting_table.item(row, 0).text(),
                    'quantity': float(self.cutting_table.item(row, 1).text()),
                    'consumption': consumption,
                    'notes': self.cutting_table.item(row, 6).text() if self.cutting_table.item(row, 6) else ''
                }

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–µ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if self.variant_data and self.variant_data.get('cutting_parts'):
                    for orig_part in self.variant_data['cutting_parts']:
                        if orig_part.get('name') == part['name']:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –≤ –ë–î
                            if 'material' in orig_part:
                                part['material'] = orig_part['material']
                            else:
                                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
                                part['material_id'] = orig_part.get('material_id')
                                part['material_code'] = orig_part.get('material_code')
                                part['material_name'] = orig_part.get('material_name')
                            break

                cutting_parts.append(part)

            # –°–æ–±–∏—Ä–∞–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
            hardware = []
            for row in range(self.hardware_table.rowCount()):
                hw = {
                    'name': self.hardware_table.item(row, 0).text(),
                    'quantity': float(self.hardware_table.item(row, 1).text()),
                    'unit': self.hardware_table.item(row, 2).text(),
                    'notes': self.hardware_table.item(row, 3).text() if self.hardware_table.item(row, 3) else ''
                }
                hardware.append(hw)

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç materials
            materials = self.variant_data.get('materials', [])
            material_dict = {}
            total_cost = 0

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º materials –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            if isinstance(materials, list):
                for mat in materials:
                    material_dict[mat['id']] = mat
            elif isinstance(materials, dict):
                material_dict = materials

            # –û–±–Ω—É–ª—è–µ–º —Ä–∞—Å—Ö–æ–¥
            for mat_id in material_dict:
                if isinstance(material_dict[mat_id], dict):
                    material_dict[mat_id]['total_consumption'] = 0

            # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å—Ö–æ–¥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
            for part in cutting_parts:
                mat_id = None
                price = 0

                if 'material' in part and part['material']:
                    mat_id = part['material']['id']
                    price = float(part['material'].get('price', 0) or 0)
                elif 'material_id' in part:
                    mat_id = part['material_id']
                    if mat_id in material_dict:
                        price = float(material_dict[mat_id].get('price', 0) or 0)

                if mat_id and mat_id in material_dict:
                    material_dict[mat_id]['total_consumption'] += part['consumption']
                    cost = part['consumption'] * price
                    total_cost += cost

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(materials, list):
                materials = list(material_dict.values())
            else:
                materials = material_dict

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            conn = self.db.get_connection()
            cursor = conn.cursor()

            cursor.execute("""
                UPDATE specifications
                SET variant_name = %s,
                    variant_code = %s,
                    description = %s,
                    cutting_parts = %s,
                    hardware = %s,
                    materials = %s,
                    total_cost = %s,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = %s
            """, (
                self.variant_name_input.text(),
                self.variant_code_input.text(),
                self.description_input.toPlainText(),
                json.dumps(cutting_parts, ensure_ascii=False),
                json.dumps(hardware, ensure_ascii=False),
                json.dumps(materials, ensure_ascii=False),
                total_cost,
                self.variant_id
            ))

            conn.commit()
            cursor.close()
            conn.close()

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–í–∞—Ä–∏–∞–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")
            self.saved.emit()

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            self.toggle_mode()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç: {e}")