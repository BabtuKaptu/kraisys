"""
–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏ —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QLabel, QLineEdit, QComboBox, QGroupBox, QTabWidget,
    QWidget, QHeaderView, QAbstractItemView, QMessageBox, QSpinBox,
    QDoubleSpinBox
)
from PyQt6.QtCore import Qt, pyqtSignal
import psycopg2
import psycopg2.extras
import uuid
import json

class ModelSpecificVariantForm(QDialog):
    """–§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏"""

    saved = pyqtSignal()

    def __init__(self, parent=None, db=None, model_id=None):
        super().__init__(parent)
        self.db = db
        self.model_id = model_id
        self.base_model_data = None
        self.variant_id = None

        self.setWindowTitle("–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏")
        self.setModal(True)
        self.resize(1200, 700)

        self.init_ui()
        self.load_references()

        if self.model_id:
            self.load_base_model()

    def init_ui(self):
        layout = QVBoxLayout(self)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        info_group = QGroupBox("–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        info_layout = QHBoxLayout()

        self.model_info_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        info_layout.addWidget(self.model_info_label)
        info_layout.addStretch()

        info_group.setLayout(info_layout)
        layout.addWidget(info_group)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ
        variant_group = QGroupBox("–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç")
        variant_layout = QHBoxLayout()

        variant_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"))
        self.variant_name_input = QLineEdit()
        self.variant_name_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: –õ–µ—Ç–Ω—è—è –∫–æ–ª–ª–µ–∫—Ü–∏—è 2024")
        variant_layout.addWidget(self.variant_name_input)

        variant_layout.addWidget(QLabel("–ö–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"))
        self.variant_code_input = QLineEdit()
        self.variant_code_input.setPlaceholderText("–ù–∞–ø—Ä–∏–º–µ—Ä: VAR-001")
        variant_layout.addWidget(self.variant_code_input)

        variant_group.setLayout(variant_layout)
        layout.addWidget(variant_group)

        # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        self.cutting_tab = self.create_cutting_tab()
        self.tabs.addTab(self.cutting_tab, "üî® –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏")

        # –í–∫–ª–∞–¥–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_tab = self.create_hardware_tab()
        self.tabs.addTab(self.hardware_tab, "üî© –§—É—Ä–Ω–∏—Ç—É—Ä–∞")

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–æ—à–≤
        self.sole_tab = self.create_sole_tab()
        self.tabs.addTab(self.sole_tab, "üëü –ü–æ–¥–æ—à–≤—ã")

        layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        buttons_layout.addStretch()

        self.save_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç")
        self.save_btn.clicked.connect(self.save_variant)
        buttons_layout.addWidget(self.save_btn)

        self.cancel_btn = QPushButton("–û—Ç–º–µ–Ω–∞")
        self.cancel_btn.clicked.connect(self.reject)
        buttons_layout.addWidget(self.cancel_btn)

        layout.addLayout(buttons_layout)

    def create_cutting_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è —Å –≤—ã–±–æ—Ä–æ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ –∫—Ä–æ—è. "
            "–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ç–æ—á–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞."
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(6)
        self.cutting_table.setHorizontalHeaderLabels([
            "–î–µ—Ç–∞–ª—å –∫—Ä–æ—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–†–∞—Å—Ö–æ–¥ (–¥–º¬≤)", "–¶–µ–Ω–∞ –∑–∞ –¥–º¬≤", "–°—Ç–æ–∏–º–æ—Å—Ç—å"
        ])

        header = self.cutting_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.ResizeToContents)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(5, QHeaderView.ResizeMode.Fixed)

        header.resizeSection(1, 100)
        header.resizeSection(3, 100)
        header.resizeSection(4, 100)
        header.resizeSection(5, 120)

        layout.addWidget(self.cutting_table)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        total_layout = QHBoxLayout()
        total_layout.addStretch()
        total_layout.addWidget(QLabel("–ò—Ç–æ–≥–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤:"))
        self.total_material_cost_label = QLabel("0.00 —Ä—É–±")
        self.total_material_cost_label.setStyleSheet("font-weight: bold; font-size: 14px;")
        total_layout.addWidget(self.total_material_cost_label)
        layout.addLayout(total_layout)

        return widget

    def create_hardware_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –§—É—Ä–Ω–∏—Ç—É—Ä–∞ –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏."
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –¢–∞–±–ª–∏—Ü–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã
        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(5)
        self.hardware_table.setHorizontalHeaderLabels([
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥. –∏–∑–º.", "–¶–µ–Ω–∞ –∑–∞ –µ–¥.", "–°—Ç–æ–∏–º–æ—Å—Ç—å"
        ])

        header = self.hardware_table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(3, QHeaderView.ResizeMode.Fixed)
        header.setSectionResizeMode(4, QHeaderView.ResizeMode.Fixed)

        self.hardware_table.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)

        layout.addWidget(self.hardware_table)

        return widget

    def create_sole_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–æ—à–≤"""
        widget = QWidget()
        layout = QVBoxLayout(widget)

        info = QLabel(
            "üí° –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–æ—à–≤—É –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏."
        )
        info.setWordWrap(True)
        info.setStyleSheet("background: #f0f8ff; padding: 10px; border-radius: 5px;")
        layout.addWidget(info)

        # –í—ã–±–æ—Ä –ø–æ–¥–æ—à–≤—ã
        sole_layout = QHBoxLayout()
        sole_layout.addWidget(QLabel("–ü–æ–¥–æ—à–≤–∞:"))

        self.sole_combo = QComboBox()
        self.sole_combo.setMinimumWidth(400)
        sole_layout.addWidget(self.sole_combo)

        sole_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥:"))
        self.sole_size_label = QLabel("")
        sole_layout.addWidget(self.sole_size_label)

        sole_layout.addStretch()
        layout.addLayout(sole_layout)

        layout.addStretch()

        return widget

    def load_references(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (–∫–æ–∂–∏ –∏ –ø–æ–¥–∫–ª–∞–¥–∫–∞)
            cursor.execute("""
                SELECT id, code, name, material_type, unit, price
                FROM materials
                WHERE is_active = true
                AND group_type IN ('LEATHER', 'LINING')
                ORDER BY material_type, name
            """)

            self.materials_list = cursor.fetchall()

            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–¥–æ—à–≤
            cursor.execute("""
                SELECT id, code, name, unit, price
                FROM materials
                WHERE is_active = true AND group_type = 'SOLE'
                ORDER BY name
            """)

            sole_list = cursor.fetchall()

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–±–æ–±–æ–∫—Å–∞ –ø–æ–¥–æ—à–≤
            self.sole_combo.clear()
            self.sole_combo.addItem("", None)

            for sole in sole_list:
                display_text = f"{sole['code']} - {sole['name']}"
                if sole['price']:
                    display_text += f" ({sole['price']} —Ä—É–±)"
                self.sole_combo.addItem(display_text, sole)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏: {e}")

    def load_base_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            # –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–∏
            cursor.execute("SELECT * FROM models WHERE id = %s", (self.model_id,))
            model = cursor.fetchone()

            if model:
                self.base_model_data = model
                self.model_info_label.setText(
                    f"–ê—Ä—Ç–∏–∫—É–ª: {model['article']} | "
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {model['name']} | "
                    f"–ö–æ–ª–æ–¥–∫–∞: {model['last_code']} | "
                    f"–†–∞–∑–º–µ—Ä—ã: {model['size_min']}-{model['size_max']}"
                )

                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏
                cursor.execute("""
                    SELECT component_name, component_group, absolute_consumption, unit, notes
                    FROM model_components
                    WHERE model_id = %s
                    ORDER BY sort_order
                """, (self.model_id,))

                components = cursor.fetchall()

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
                for comp in components:
                    if comp['component_group'] == 'cutting':
                        row = self.cutting_table.rowCount()
                        self.cutting_table.insertRow(row)

                        # –î–µ—Ç–∞–ª—å –∫—Ä–æ—è
                        self.cutting_table.setItem(row, 0, QTableWidgetItem(comp['component_name']))

                        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–∞—Ä–∞)
                        self.cutting_table.setItem(row, 1, QTableWidgetItem("2"))

                        # –ö–æ–º–±–æ–±–æ–∫—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                        material_combo = QComboBox()
                        material_combo.addItem("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª...", None)

                        for mat in self.materials_list:
                            display_text = f"{mat['code']} - {mat['name']} ({mat['material_type']})"
                            if mat['price']:
                                display_text += f" - {mat['price']} —Ä—É–±/{mat['unit']}"
                            material_combo.addItem(display_text, mat)

                        material_combo.currentIndexChanged.connect(self.calculate_costs)
                        self.cutting_table.setCellWidget(row, 2, material_combo)

                        # –†–∞—Å—Ö–æ–¥
                        consumption = comp['absolute_consumption'] if comp['absolute_consumption'] else 0
                        self.cutting_table.setItem(row, 3, QTableWidgetItem(f"{consumption:.2f}"))

                        # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞)
                        self.cutting_table.setItem(row, 4, QTableWidgetItem("0.00"))

                        # –°—Ç–æ–∏–º–æ—Å—Ç—å (–±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞)
                        self.cutting_table.setItem(row, 5, QTableWidgetItem("0.00"))

                    elif comp['component_group'] == 'material':
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É—Ä–Ω–∏—Ç—É—Ä—É
                        row = self.hardware_table.rowCount()
                        self.hardware_table.insertRow(row)

                        self.hardware_table.setItem(row, 0, QTableWidgetItem(comp['component_name']))
                        quantity = comp['absolute_consumption'] if comp['absolute_consumption'] else 1
                        self.hardware_table.setItem(row, 1, QTableWidgetItem(f"{quantity:.2f}"))
                        self.hardware_table.setItem(row, 2, QTableWidgetItem(comp['unit'] or '—à—Ç'))
                        self.hardware_table.setItem(row, 3, QTableWidgetItem("0.00"))
                        self.hardware_table.setItem(row, 4, QTableWidgetItem("0.00"))

                    elif comp['component_group'] == 'sole':
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥ –¥–ª—è –ø–æ–¥–æ—à–≤—ã
                        self.sole_size_label.setText(comp['unit'] or '')

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {e}")

    def calculate_costs(self):
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        total_cost = 0

        for row in range(self.cutting_table.rowCount()):
            material_combo = self.cutting_table.cellWidget(row, 2)
            if material_combo and material_combo.currentData():
                material = material_combo.currentData()

                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥
                consumption_item = self.cutting_table.item(row, 3)
                consumption = float(consumption_item.text()) if consumption_item else 0

                # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                price = material.get('price', 0) or 0

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                self.cutting_table.setItem(row, 4, QTableWidgetItem(f"{price:.2f}"))

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                cost = consumption * price
                self.cutting_table.setItem(row, 5, QTableWidgetItem(f"{cost:.2f}"))

                total_cost += cost

        self.total_material_cost_label.setText(f"{total_cost:.2f} —Ä—É–±")

    def validate(self):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã"""
        if not self.variant_name_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return False

        if not self.variant_code_input.text():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è
        for row in range(self.cutting_table.rowCount()):
            material_combo = self.cutting_table.cellWidget(row, 2)
            if not material_combo or not material_combo.currentData():
                detail_name = self.cutting_table.item(row, 0).text()
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –¥–µ—Ç–∞–ª–∏: {detail_name}")
                return False

        return True

    def save_variant(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ –ë–î"""
        if not self.validate():
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            cutting_parts = []
            materials = {}
            total_cost = 0

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –¥–µ—Ç–∞–ª—è—Ö –∫—Ä–æ—è –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö
            for row in range(self.cutting_table.rowCount()):
                part_name = self.cutting_table.item(row, 0).text()
                quantity = int(self.cutting_table.item(row, 1).text())
                material_combo = self.cutting_table.cellWidget(row, 2)
                material = material_combo.currentData()
                consumption = float(self.cutting_table.item(row, 3).text())

                cutting_part = {
                    "name": part_name,
                    "quantity": quantity,
                    "consumption": consumption,
                    "material_id": material['id'],
                    "material_code": material['code'],
                    "material_name": material['name']
                }
                cutting_parts.append(cutting_part)

                # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª –≤ —Å–ø–∏—Å–æ–∫
                if material['id'] not in materials:
                    materials[material['id']] = {
                        "id": material['id'],
                        "code": material['code'],
                        "name": material['name'],
                        "type": material['material_type'],
                        "unit": material['unit'],
                        "price": material.get('price', 0),
                        "total_consumption": 0
                    }
                materials[material['id']]['total_consumption'] += consumption

                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                cost = consumption * (material.get('price', 0) or 0)
                total_cost += cost

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ—É—Ä–Ω–∏—Ç—É—Ä–µ
            hardware = []
            for row in range(self.hardware_table.rowCount()):
                hw = {
                    "name": self.hardware_table.item(row, 0).text(),
                    "quantity": float(self.hardware_table.item(row, 1).text()),
                    "unit": self.hardware_table.item(row, 2).text()
                }
                hardware.append(hw)

            # –î–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–æ—à–≤–µ
            sole_data = self.sole_combo.currentData()
            sole_info = None
            if sole_data:
                sole_info = {
                    "id": sole_data['id'],
                    "code": sole_data['code'],
                    "name": sole_data['name'],
                    "size_range": self.sole_size_label.text()
                }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É specifications
            cursor.execute("""
                INSERT INTO specifications (
                    uuid, model_id, variant_name, variant_code,
                    is_default, is_active, materials, cutting_parts, hardware,
                    total_material_cost, created_at, updated_at
                )
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, NOW(), NOW())
                RETURNING id
            """, (
                str(uuid.uuid4()),
                self.model_id,
                self.variant_name_input.text(),
                self.variant_code_input.text(),
                False,  # –≠—Ç–æ –Ω–µ –±–∞–∑–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
                True,   # –ê–∫—Ç–∏–≤–µ–Ω
                json.dumps(list(materials.values())),
                json.dumps(cutting_parts),
                json.dumps(hardware),
                total_cost
            ))

            self.variant_id = cursor.fetchone()[0]

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                f"–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç '{self.variant_name_input.text()}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {total_cost:.2f} —Ä—É–±")

            self.saved.emit()
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç: {e}")