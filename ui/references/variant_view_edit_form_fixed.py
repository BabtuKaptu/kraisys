"""
–§–æ—Ä–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

from PyQt6.QtWidgets import (
    QDialog, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QLineEdit, QTableWidget, QTableWidgetItem,
    QGroupBox, QGridLayout, QTextEdit, QMessageBox,
    QDialogButtonBox, QHeaderView, QComboBox, QDoubleSpinBox
)
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont
import psycopg2.extras
import json
from uuid import uuid4


class VariantViewEditFormFixed(QDialog):
    """–§–æ—Ä–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–¥–µ–ª–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø"""

    saved = pyqtSignal()

    def __init__(self, parent=None, db=None, variant_id=None, read_only=False):
        super().__init__(parent)
        self.db = db
        self.variant_id = variant_id
        self.read_only = read_only
        self.mode = 'view' if read_only else 'edit'
        self.model_id = None
        self.variant_data = None

        self.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)" if read_only else "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)")
        self.setModal(True)
        self.resize(1200, 800)

        self.init_ui()
        self.load_variant_data()

        if self.read_only:
            self.set_readonly(True)

    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_layout = QHBoxLayout()
        self.title_label = QLabel()
        self.title_label.setFont(QFont("Arial", 14, QFont.Weight.Bold))
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        self.mode_btn = QPushButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" if self.mode == 'view' else "üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
        self.mode_btn.clicked.connect(self.toggle_mode)
        header_layout.addWidget(self.mode_btn)

        layout.addLayout(header_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_group = QGroupBox("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        info_layout = QGridLayout()

        info_layout.addWidget(QLabel("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"), 0, 0)
        self.variant_name_input = QLineEdit()
        info_layout.addWidget(self.variant_name_input, 0, 1)

        info_layout.addWidget(QLabel("–ö–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"), 0, 2)
        self.variant_code_input = QLineEdit()
        info_layout.addWidget(self.variant_code_input, 0, 3)

        info_layout.addWidget(QLabel("–û–ø–∏—Å–∞–Ω–∏–µ:"), 1, 0)
        self.description_input = QTextEdit()
        self.description_input.setMaximumHeight(60)
        info_layout.addWidget(self.description_input, 1, 1, 1, 3)

        info_layout.addWidget(QLabel("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:"), 2, 0)
        self.total_cost_label = QLabel("0.00 —Ä—É–±")
        self.total_cost_label.setStyleSheet("font-weight: bold; color: #2196F3;")
        info_layout.addWidget(self.total_cost_label, 2, 1)

        info_group.setLayout(info_layout)
        layout.addWidget(info_group)

        # –î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è
        cutting_group = QGroupBox("–î–µ—Ç–∞–ª–∏ –∫—Ä–æ—è")
        cutting_layout = QVBoxLayout()

        self.cutting_table = QTableWidget()
        self.cutting_table.setColumnCount(7)
        self.cutting_table.setHorizontalHeaderLabels([
            "–î–µ—Ç–∞–ª—å", "–ö–æ–ª-–≤–æ", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–†–∞—Å—Ö–æ–¥",
            "–¶–µ–Ω–∞/–µ–¥", "–°—Ç–æ–∏–º–æ—Å—Ç—å", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"
        ])
        self.cutting_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        cutting_layout.addWidget(self.cutting_table)

        cutting_group.setLayout(cutting_layout)
        layout.addWidget(cutting_group)

        # –§—É—Ä–Ω–∏—Ç—É—Ä–∞
        hardware_group = QGroupBox("–§—É—Ä–Ω–∏—Ç—É—Ä–∞")
        hardware_layout = QVBoxLayout()

        self.hardware_table = QTableWidget()
        self.hardware_table.setColumnCount(4)
        self.hardware_table.setHorizontalHeaderLabels(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª-–≤–æ", "–ï–¥.–∏–∑–º.", "–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ"])
        self.hardware_table.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)
        hardware_layout.addWidget(self.hardware_table)

        hardware_group.setLayout(hardware_layout)
        layout.addWidget(hardware_group)

        # –ü–æ–¥–æ—à–≤–∞
        sole_group = QGroupBox("–ü–æ–¥–æ—à–≤–∞")
        sole_layout = QGridLayout()

        sole_layout.addWidget(QLabel("–ü–æ–¥–æ—à–≤–∞:"), 0, 0)
        self.sole_label = QLabel()
        sole_layout.addWidget(self.sole_label, 0, 1)

        sole_layout.addWidget(QLabel("–†–∞–∑–º–µ—Ä–Ω—ã–π —Ä—è–¥:"), 0, 2)
        self.sole_size_label = QLabel()
        sole_layout.addWidget(self.sole_size_label, 0, 3)

        sole_group.setLayout(sole_layout)
        layout.addWidget(sole_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox()

        if self.mode == 'edit':
            save_btn = buttons.addButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", QDialogButtonBox.ButtonRole.AcceptRole)
            save_btn.clicked.connect(self.save_variant)

        cancel_btn = buttons.addButton("–ó–∞–∫—Ä—ã—Ç—å", QDialogButtonBox.ButtonRole.RejectRole)
        cancel_btn.clicked.connect(self.reject)

        layout.addWidget(buttons)

    def load_variant_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        print("üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø load_variant_data –≤—ã–∑–≤–∞–Ω–∞")
        if not self.variant_id:
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
            cursor.execute("""
                SELECT s.*, m.name as model_name, m.article as model_article
                FROM specifications s
                JOIN models m ON s.model_id = m.id
                WHERE s.id = %s
            """, (self.variant_id,))

            variant = cursor.fetchone()

            if variant:
                self.variant_data = variant
                self.model_id = variant['model_id']

                # –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
                self.title_label.setText(f"{variant['model_name']} - –í–∞—Ä–∏–∞–Ω—Ç: {variant['variant_name'] or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}")
                self.variant_name_input.setText(variant['variant_name'] or '')
                self.variant_code_input.setText(variant['variant_code'] or '')
                self.description_input.setText(variant.get('description', '') or '')

                if variant.get('total_cost'):
                    self.total_cost_label.setText(f"{float(variant['total_cost']):.2f} —Ä—É–±")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º cutting_parts
                cutting_parts = variant.get('cutting_parts', [])
                print(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: cutting_parts —Ç–∏–ø = {type(cutting_parts)}")
                print(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: cutting_parts = {cutting_parts}")

                # –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON –¥–∞–Ω–Ω—ã—Ö
                if isinstance(cutting_parts, str):
                    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: parsing JSON string")
                    try:
                        cutting_parts = json.loads(cutting_parts) if cutting_parts else []
                    except json.JSONDecodeError:
                        print("‚ùå –û–®–ò–ë–ö–ê –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                        cutting_parts = []
                elif cutting_parts is None:
                    cutting_parts = []

                self.load_cutting_parts(cutting_parts)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ hardware
                hardware = variant.get('hardware', [])
                if isinstance(hardware, str):
                    try:
                        hardware = json.loads(hardware) if hardware else []
                    except json.JSONDecodeError:
                        hardware = []
                elif hardware is None:
                    hardware = []

                self.load_hardware(hardware)

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ sole
                sole = variant.get('sole')
                if isinstance(sole, str):
                    try:
                        sole = json.loads(sole) if sole else None
                    except json.JSONDecodeError:
                        sole = None

                self.load_sole(sole)

            cursor.close()
            conn.close()

        except Exception as e:
            print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            import traceback
            traceback.print_exc()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç: {e}")

    def load_cutting_parts(self, cutting_parts):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∫—Ä–æ—è –≤ —Ç–∞–±–ª–∏—Ü—É"""
        print(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø load_cutting_parts: {type(cutting_parts)} = {cutting_parts}")

        if not cutting_parts:
            print("‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: cutting_parts –ø—É—Å—Ç–æ–π")
            return

        try:
            self.cutting_table.setRowCount(len(cutting_parts))

            for row, part in enumerate(cutting_parts):
                print(f"üîç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º part[{row}] = {part}, —Ç–∏–ø = {type(part)}")

                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ part —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
                if not isinstance(part, dict):
                    print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: part –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {part}")
                    continue

                # –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
                name = part.get('name', '')
                self.cutting_table.setItem(row, 0, QTableWidgetItem(str(name)))

                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                quantity = part.get('quantity', 0)
                self.cutting_table.setItem(row, 1, QTableWidgetItem(str(quantity)))

                # –ú–∞—Ç–µ—Ä–∏–∞–ª - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                material_text = ""
                price = 0

                # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω
                materials = self.variant_data.get('materials', [])
                material_prices = {}
                if isinstance(materials, list):
                    for mat in materials:
                        if isinstance(mat, dict):
                            material_prices[mat.get('id')] = float(mat.get('price', 0))

                if 'material' in part and isinstance(part['material'], dict):
                    material_info = part['material']
                    material_text = f"{material_info.get('name', '')} ({material_info.get('code', '')})"
                    price = float(material_info.get('price', 0))
                elif 'material_name' in part:
                    material_text = f"{part.get('material_name', '')} ({part.get('material_code', '')})"
                    material_id = part.get('material_id')
                    if material_id and material_id in material_prices:
                        price = material_prices[material_id]
                elif 'material' in part and isinstance(part['material'], str):
                    material_text = part['material']
                else:
                    material_text = "–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ —É–∫–∞–∑–∞–Ω"

                self.cutting_table.setItem(row, 2, QTableWidgetItem(material_text))

                # –†–∞—Å—Ö–æ–¥
                consumption = part.get('consumption', 0)
                if self.mode == 'edit':
                    spin_box = QDoubleSpinBox()
                    spin_box.setRange(0, 9999)
                    spin_box.setValue(float(consumption))
                    spin_box.setSuffix(" –¥–º¬≤")
                    self.cutting_table.setCellWidget(row, 3, spin_box)
                else:
                    self.cutting_table.setItem(row, 3, QTableWidgetItem(f"{consumption} –¥–º¬≤"))

                # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
                self.cutting_table.setItem(row, 4, QTableWidgetItem(f"{price:.2f}"))

                # –°—Ç–æ–∏–º–æ—Å—Ç—å
                cost = float(consumption) * price
                self.cutting_table.setItem(row, 5, QTableWidgetItem(f"{cost:.2f}"))

                # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
                notes = part.get('notes', '')
                self.cutting_table.setItem(row, 6, QTableWidgetItem(str(notes)))

            print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: load_cutting_parts –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

        except Exception as e:
            print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –û—à–∏–±–∫–∞ –≤ load_cutting_parts: {e}")
            import traceback
            traceback.print_exc()

    def load_hardware(self, hardware):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ—É—Ä–Ω–∏—Ç—É—Ä—ã –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not hardware:
            return

        try:
            self.hardware_table.setRowCount(len(hardware))

            for row, hw in enumerate(hardware):
                if isinstance(hw, dict):
                    self.hardware_table.setItem(row, 0, QTableWidgetItem(hw.get('name', '')))
                    self.hardware_table.setItem(row, 1, QTableWidgetItem(str(hw.get('quantity', 0))))
                    self.hardware_table.setItem(row, 2, QTableWidgetItem(hw.get('unit', '')))
                    self.hardware_table.setItem(row, 3, QTableWidgetItem(hw.get('notes', '')))

        except Exception as e:
            print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø: –û—à–∏–±–∫–∞ –≤ load_hardware: {e}")

    def load_sole(self, sole_data):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–æ—à–≤–µ"""
        if sole_data and isinstance(sole_data, dict):
            self.sole_label.setText(f"{sole_data.get('name', '')} ({sole_data.get('code', '')})")
            self.sole_size_label.setText(sole_data.get('size_range', ''))

    def toggle_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.mode == 'view':
            self.mode = 'edit'
            self.mode_btn.setText("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä")
            self.setWindowTitle("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)")
            self.set_readonly(False)
        else:
            self.mode = 'view'
            self.mode_btn.setText("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
            self.setWindowTitle("–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û)")
            self.set_readonly(True)

    def set_readonly(self, readonly):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        self.variant_name_input.setReadOnly(readonly)
        self.variant_code_input.setReadOnly(readonly)
        self.description_input.setReadOnly(readonly)

        if readonly:
            self.cutting_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
            self.hardware_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
        else:
            self.cutting_table.setEditTriggers(QTableWidget.EditTrigger.AllEditTriggers)
            self.hardware_table.setEditTriggers(QTableWidget.EditTrigger.AllEditTriggers)

    def save_variant(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
        QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")