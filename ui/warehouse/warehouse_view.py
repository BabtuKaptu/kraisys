"""Warehouse stock management view"""
from PyQt6.QtWidgets import *
from PyQt6.QtCore import Qt, QDate, pyqtSignal
from PyQt6.QtGui import QDoubleValidator
from database.connection import DatabaseConnection
import psycopg2.extras
from datetime import datetime, date
import random


class WarehouseWidget(QWidget):
    """–í–∏–¥–∂–µ—Ç —Å–∫–ª–∞–¥—Å–∫–æ–≥–æ —É—á–µ—Ç–∞ —Å –ø–∞—Ä—Ç–∏—è–º–∏"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.db = DatabaseConnection()
        self.setup_ui()
        self.load_data()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QHBoxLayout()
        title = QLabel("üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π —É—á–µ—Ç")
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        header.addWidget(title)
        header.addStretch()

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        self.btn_receipt = QPushButton("üì• –ü—Ä–∏—Ö–æ–¥")
        self.btn_issue = QPushButton("üì§ –†–∞—Å—Ö–æ–¥")
        self.btn_inventory = QPushButton("üìä –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è")
        self.btn_report = QPushButton("üìë –û—Ç—á–µ—Ç")

        self.btn_receipt.clicked.connect(self.open_receipt_dialog)
        self.btn_issue.clicked.connect(self.open_issue_dialog)
        self.btn_inventory.clicked.connect(self.open_inventory_dialog)
        self.btn_report.clicked.connect(self.generate_report)

        header.addWidget(self.btn_receipt)
        header.addWidget(self.btn_issue)
        header.addWidget(self.btn_inventory)
        header.addWidget(self.btn_report)

        layout.addLayout(header)

        # –§–∏–ª—å—Ç—Ä—ã
        filter_layout = QHBoxLayout()

        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é...")
        self.search_input.textChanged.connect(self.filter_data)

        self.warehouse_combo = QComboBox()
        self.warehouse_combo.addItems(["–í—Å–µ —Å–∫–ª–∞–¥—ã", "–û—Å–Ω–æ–≤–Ω–æ–π", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"])
        self.warehouse_combo.currentTextChanged.connect(self.filter_data)

        filter_layout.addWidget(self.search_input)
        filter_layout.addWidget(self.warehouse_combo)
        filter_layout.addStretch()

        layout.addLayout(filter_layout)

        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        self.table = QTableWidget()
        self.table.setColumnCount(10)
        self.table.setHorizontalHeaderLabels([
            "–ö–æ–¥", "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ü–∞—Ä—Ç–∏—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–µ–∑–µ—Ä–≤",
            "–ï–¥.–∏–∑–º", "–¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏", "–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞", "–°–∫–ª–∞–¥", "–ú–µ—Å—Ç–æ"
        ])

        header = self.table.horizontalHeader()
        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)

        self.table.setAlternatingRowColors(True)
        self.table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
        self.table.doubleClicked.connect(self.view_batch_details)

        layout.addWidget(self.table)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_layout = QHBoxLayout()
        self.stats_label = QLabel("–ü–æ–∑–∏—Ü–∏–π: 0 | –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 0 ‚ÇΩ")
        stats_layout.addWidget(self.stats_label)
        stats_layout.addStretch()
        layout.addLayout(stats_layout)

    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∫–ª–∞–¥–∞"""
        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("""
                SELECT
                    ws.*,
                    m.code as material_code,
                    m.name as material_name
                FROM warehouse_stock ws
                LEFT JOIN materials m ON ws.material_id = m.id
                ORDER BY ws.receipt_date DESC
            """)

            stocks = cursor.fetchall()
            cursor.close()
            self.db.put_connection(conn)

            self.update_table(stocks)

        except Exception as e:
            print(f"Error loading warehouse data: {e}")

    def update_table(self, stocks):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
        self.table.setRowCount(len(stocks))

        total_value = 0
        for row, stock in enumerate(stocks):
            self.table.setItem(row, 0, QTableWidgetItem(stock['material_code'] or ""))
            self.table.setItem(row, 1, QTableWidgetItem(stock['material_name'] or ""))
            self.table.setItem(row, 2, QTableWidgetItem(stock['batch_number'] or ""))

            qty = float(stock['quantity'] or 0)
            self.table.setItem(row, 3, QTableWidgetItem(f"{qty:.2f}"))

            reserved = float(stock['reserved_qty'] or 0)
            self.table.setItem(row, 4, QTableWidgetItem(f"{reserved:.2f}"))

            self.table.setItem(row, 5, QTableWidgetItem(stock['unit'] or ""))

            price = float(stock['purchase_price'] or 0)
            self.table.setItem(row, 6, QTableWidgetItem(f"{price:.2f} ‚ÇΩ"))
            total_value += qty * price

            if stock['receipt_date']:
                self.table.setItem(row, 7, QTableWidgetItem(str(stock['receipt_date'])))

            self.table.setItem(row, 8, QTableWidgetItem(stock['warehouse_code'] or "–û—Å–Ω–æ–≤–Ω–æ–π"))
            self.table.setItem(row, 9, QTableWidgetItem(stock['location'] or ""))

        self.stats_label.setText(f"–ü–æ–∑–∏—Ü–∏–π: {len(stocks)} | –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_value:,.2f} ‚ÇΩ")

    def filter_data(self):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        search_text = self.search_input.text().lower()
        warehouse = self.warehouse_combo.currentText()

        for row in range(self.table.rowCount()):
            show = True

            # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
            if search_text:
                code = self.table.item(row, 0).text().lower()
                name = self.table.item(row, 1).text().lower()
                batch = self.table.item(row, 2).text().lower()
                if search_text not in code and search_text not in name and search_text not in batch:
                    show = False

            # –§–∏–ª—å—Ç—Ä –ø–æ —Å–∫–ª–∞–¥—É
            if warehouse != "–í—Å–µ —Å–∫–ª–∞–¥—ã":
                wh_cell = self.table.item(row, 8).text()
                if wh_cell != warehouse:
                    show = False

            self.table.setRowHidden(row, not show)

    def open_receipt_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –ø—Ä–∏—Ö–æ–¥–∞"""
        dialog = ReceiptDialog(self)
        if dialog.exec():
            self.load_data()

    def open_issue_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ —Ä–∞—Å—Ö–æ–¥–∞"""
        dialog = IssueDialog(self)
        if dialog.exec():
            self.load_data()

    def open_inventory_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏"""
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        QMessageBox.information(self, "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–û—Ç—á–µ—Ç—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏")

    def view_batch_details(self):
        """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –ø–∞—Ä—Ç–∏–∏"""
        row = self.table.currentRow()
        if row >= 0:
            batch = self.table.item(row, 2).text()
            material = self.table.item(row, 1).text()
            QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–∏–∏",
                                  f"–ü–∞—Ä—Ç–∏—è: {batch}\n–ú–∞—Ç–µ—Ä–∏–∞–ª: {material}")


class ReceiptDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥–∞"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.db = DatabaseConnection()
        self.setWindowTitle("üì• –ü—Ä–∏—Ö–æ–¥ –Ω–∞ —Å–∫–ª–∞–¥")
        self.setModal(True)
        self.resize(800, 600)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–µ
        info_group = QGroupBox("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞–≤–∫–µ")
        info_layout = QFormLayout(info_group)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Ç–∏–∏
        self.batch_number = self.generate_batch_number()
        self.batch_label = QLabel(f"<b>{self.batch_number}</b>")
        info_layout.addRow("–ù–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏:", self.batch_label)

        # –î–∞—Ç–∞
        self.date_edit = QDateEdit()
        self.date_edit.setDate(QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        info_layout.addRow("–î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞:", self.date_edit)

        # –ü–æ—Å—Ç–∞–≤—â–∏–∫
        self.supplier_input = QLineEdit()
        self.supplier_input.setPlaceholderText("–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")
        info_layout.addRow("–ü–æ—Å—Ç–∞–≤—â–∏–∫:", self.supplier_input)

        # –î–æ–∫—É–º–µ–Ω—Ç
        self.document_input = QLineEdit()
        self.document_input.setPlaceholderText("–ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π")
        info_layout.addRow("–î–æ–∫—É–º–µ–Ω—Ç:", self.document_input)

        layout.addWidget(info_group)

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        positions_group = QGroupBox("–ü–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏—Ö–æ–¥–∞")
        pos_layout = QVBoxLayout(positions_group)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.btn_add_position = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
        self.btn_remove_position = QPushButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é")
        self.btn_add_position.clicked.connect(self.add_position)
        self.btn_remove_position.clicked.connect(self.remove_position)

        btn_layout.addWidget(self.btn_add_position)
        btn_layout.addWidget(self.btn_remove_position)
        btn_layout.addStretch()
        pos_layout.addLayout(btn_layout)

        # –¢–∞–±–ª–∏—Ü–∞
        self.positions_table = QTableWidget()
        self.positions_table.setColumnCount(7)
        self.positions_table.setHorizontalHeaderLabels([
            "–ú–∞—Ç–µ—Ä–∏–∞–ª", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ï–¥.–∏–∑–º", "–¶–µ–Ω–∞", "–°—É–º–º–∞", "–°–∫–ª–∞–¥", "–ú–µ—Å—Ç–æ"
        ])
        pos_layout.addWidget(self.positions_table)

        layout.addWidget(positions_group)

        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
        total_layout = QHBoxLayout()
        total_layout.addStretch()
        self.total_label = QLabel("–ò—Ç–æ–≥–æ: 0.00 ‚ÇΩ")
        self.total_label.setStyleSheet("font-size: 16px; font-weight: bold;")
        total_layout.addWidget(self.total_label)
        layout.addLayout(total_layout)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")

        self.btn_save.clicked.connect(self.save_receipt)
        self.btn_cancel.clicked.connect(self.reject)

        buttons.addWidget(self.btn_save)
        buttons.addWidget(self.btn_cancel)
        layout.addLayout(buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É
        self.add_position()

    def generate_batch_number(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –ø–∞—Ä—Ç–∏–∏ (10 —Ü–∏—Ñ—Ä)"""
        timestamp = datetime.now().strftime("%y%m%d")  # 6 —Ü–∏—Ñ—Ä: –ì–ì–ú–ú–î–î
        random_part = str(random.randint(1000, 9999))  # 4 —Ü–∏—Ñ—Ä—ã
        return f"{timestamp}{random_part}"

    def add_position(self):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        row = self.positions_table.rowCount()
        self.positions_table.insertRow(row)

        # –ú–∞—Ç–µ—Ä–∏–∞–ª
        material_combo = QComboBox()
        self.load_materials(material_combo)
        self.positions_table.setCellWidget(row, 0, material_combo)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        qty_spin = QDoubleSpinBox()
        qty_spin.setRange(0, 99999)
        qty_spin.setDecimals(2)
        qty_spin.valueChanged.connect(self.calculate_totals)
        self.positions_table.setCellWidget(row, 1, qty_spin)

        # –ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        unit_combo = QComboBox()
        unit_combo.addItems(["–¥–º¬≤", "–º¬≤", "–º", "–∫–≥", "—à—Ç", "–ø–∞—Ä–∞", "–∫–æ–º–ø–ª"])
        self.positions_table.setCellWidget(row, 2, unit_combo)

        # –¶–µ–Ω–∞
        price_spin = QDoubleSpinBox()
        price_spin.setRange(0, 999999)
        price_spin.setDecimals(2)
        price_spin.setSuffix(" ‚ÇΩ")
        price_spin.valueChanged.connect(self.calculate_totals)
        self.positions_table.setCellWidget(row, 3, price_spin)

        # –°—É–º–º–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)
        sum_label = QLabel("0.00 ‚ÇΩ")
        sum_label.setAlignment(Qt.AlignmentFlag.AlignRight)
        self.positions_table.setCellWidget(row, 4, sum_label)

        # –°–∫–ª–∞–¥
        warehouse_combo = QComboBox()
        warehouse_combo.addItems(["–û—Å–Ω–æ–≤–Ω–æ–π", "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–ì–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥—É–∫—Ü–∏—è"])
        self.positions_table.setCellWidget(row, 5, warehouse_combo)

        # –ú–µ—Å—Ç–æ
        location_input = QLineEdit()
        location_input.setPlaceholderText("–°—Ç–µ–ª–ª–∞–∂/—è—á–µ–π–∫–∞")
        self.positions_table.setCellWidget(row, 6, location_input)

    def remove_position(self):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é"""
        current_row = self.positions_table.currentRow()
        if current_row >= 0:
            self.positions_table.removeRow(current_row)
            self.calculate_totals()

    def load_materials(self, combo):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"""
        try:
            conn = self.db.get_connection()
            if not conn:
                return

            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
            cursor.execute("""
                SELECT id, code, name
                FROM materials
                WHERE is_active = true
                ORDER BY name
            """)

            combo.addItem("", None)
            for mat in cursor.fetchall():
                combo.addItem(f"{mat['code']} - {mat['name']}", mat['id'])

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"Error loading materials: {e}")

    def calculate_totals(self):
        """–†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã"""
        total = 0
        for row in range(self.positions_table.rowCount()):
            qty_widget = self.positions_table.cellWidget(row, 1)
            price_widget = self.positions_table.cellWidget(row, 3)
            sum_widget = self.positions_table.cellWidget(row, 4)

            if qty_widget and price_widget and sum_widget:
                qty = qty_widget.value()
                price = price_widget.value()
                row_sum = qty * price
                sum_widget.setText(f"{row_sum:.2f} ‚ÇΩ")
                total += row_sum

        self.total_label.setText(f"–ò—Ç–æ–≥–æ: {total:,.2f} ‚ÇΩ")

    def save_receipt(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏—Ö–æ–¥–∞"""
        if self.positions_table.rowCount() == 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é")
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            receipt_date = self.date_edit.date().toPyDate()

            for row in range(self.positions_table.rowCount()):
                material_combo = self.positions_table.cellWidget(row, 0)
                material_id = material_combo.currentData()

                if not material_id:
                    continue

                qty = self.positions_table.cellWidget(row, 1).value()
                unit = self.positions_table.cellWidget(row, 2).currentText()
                price = self.positions_table.cellWidget(row, 3).value()
                warehouse = self.positions_table.cellWidget(row, 5).currentText()
                location = self.positions_table.cellWidget(row, 6).text()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä—Ç–∏—è
                cursor.execute("""
                    SELECT id, quantity FROM warehouse_stock
                    WHERE material_id = %s AND batch_number = %s
                """, (material_id, self.batch_number))

                existing = cursor.fetchone()

                if existing:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    cursor.execute("""
                        UPDATE warehouse_stock
                        SET quantity = quantity + %s,
                            last_receipt_date = %s,
                            updated_at = NOW()
                        WHERE id = %s
                    """, (qty, receipt_date, existing[0]))
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    cursor.execute("""
                        INSERT INTO warehouse_stock
                        (material_id, warehouse_code, location, quantity, reserved_qty,
                         unit, batch_number, receipt_date, purchase_price,
                         last_receipt_date, updated_at)
                        VALUES (%s, %s, %s, %s, 0, %s, %s, %s, %s, %s, NOW())
                    """, (material_id, warehouse, location, qty, unit,
                          self.batch_number, receipt_date, price, receipt_date))

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                                  f"–ü—Ä–∏—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω\n–ü–∞—Ä—Ç–∏—è: {self.batch_number}")
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")


class IssueDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""

    def __init__(self, parent=None):
        super().__init__(parent)
        self.db = DatabaseConnection()
        self.setWindowTitle("üì§ –†–∞—Å—Ö–æ–¥ —Å–æ —Å–∫–ª–∞–¥–∞")
        self.setModal(True)
        self.resize(800, 500)
        self.setup_ui()

    def setup_ui(self):
        layout = QVBoxLayout(self)

        # –í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –∏ –ø–∞—Ä—Ç–∏–∏
        select_group = QGroupBox("–í—ã–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–∞")
        select_layout = QFormLayout(select_group)

        # –ú–∞—Ç–µ—Ä–∏–∞–ª
        self.material_combo = QComboBox()
        self.load_materials()
        self.material_combo.currentIndexChanged.connect(self.load_batches)
        select_layout.addRow("–ú–∞—Ç–µ—Ä–∏–∞–ª:", self.material_combo)

        # –ü–∞—Ä—Ç–∏—è
        self.batch_combo = QComboBox()
        self.batch_combo.currentIndexChanged.connect(self.show_batch_info)
        select_layout.addRow("–ü–∞—Ä—Ç–∏—è:", self.batch_combo)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–∏–∏
        self.batch_info = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        self.batch_info.setStyleSheet("padding: 10px; background: #f0f0f0; border-radius: 5px;")
        select_layout.addRow("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:", self.batch_info)

        layout.addWidget(select_group)

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Ö–æ–¥–∞
        issue_group = QGroupBox("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—Ö–æ–¥–∞")
        issue_layout = QFormLayout(issue_group)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        self.qty_spin = QDoubleSpinBox()
        self.qty_spin.setRange(0, 99999)
        self.qty_spin.setDecimals(2)
        issue_layout.addRow("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", self.qty_spin)

        # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ
        self.purpose_combo = QComboBox()
        self.purpose_combo.addItems(["–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–ë—Ä–∞–∫", "–í–æ–∑–≤—Ä–∞—Ç –ø–æ—Å—Ç–∞–≤—â–∏–∫—É", "–ü—Ä–æ—á–µ–µ"])
        issue_layout.addRow("–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:", self.purpose_combo)

        # –î–æ–∫—É–º–µ–Ω—Ç
        self.document_input = QLineEdit()
        self.document_input.setPlaceholderText("–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        issue_layout.addRow("–î–æ–∫—É–º–µ–Ω—Ç:", self.document_input)

        # –î–∞—Ç–∞
        self.date_edit = QDateEdit()
        self.date_edit.setDate(QDate.currentDate())
        self.date_edit.setCalendarPopup(True)
        issue_layout.addRow("–î–∞—Ç–∞ —Ä–∞—Å—Ö–æ–¥–∞:", self.date_edit)

        layout.addWidget(issue_group)

        # –ö–Ω–æ–ø–∫–∏
        buttons = QHBoxLayout()
        self.btn_save = QPushButton("üíæ –û—Ñ–æ—Ä–º–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
        self.btn_cancel = QPushButton("–û—Ç–º–µ–Ω–∞")

        self.btn_save.clicked.connect(self.save_issue)
        self.btn_cancel.clicked.connect(self.reject)

        buttons.addWidget(self.btn_save)
        buttons.addWidget(self.btn_cancel)
        layout.addLayout(buttons)

    def load_materials(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            cursor.execute("""
                SELECT DISTINCT m.id, m.code, m.name
                FROM materials m
                INNER JOIN warehouse_stock ws ON ws.material_id = m.id
                WHERE ws.quantity > 0
                ORDER BY m.name
            """)

            self.material_combo.addItem("", None)
            for mat in cursor.fetchall():
                self.material_combo.addItem(f"{mat['code']} - {mat['name']}", mat['id'])

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"Error loading materials: {e}")

    def load_batches(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä—Ç–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        self.batch_combo.clear()
        material_id = self.material_combo.currentData()

        if not material_id:
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

            cursor.execute("""
                SELECT id, batch_number, quantity, reserved_qty,
                       purchase_price, receipt_date, warehouse_code
                FROM warehouse_stock
                WHERE material_id = %s AND quantity > 0
                ORDER BY receipt_date  -- FIFO
            """, (material_id,))

            self.batch_combo.addItem("", None)
            for batch in cursor.fetchall():
                available = float(batch['quantity']) - float(batch['reserved_qty'] or 0)
                text = f"–ü–∞—Ä—Ç–∏—è {batch['batch_number']} | –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f}"
                self.batch_combo.addItem(text, batch)

            cursor.close()
            self.db.put_connection(conn)

        except Exception as e:
            print(f"Error loading batches: {e}")

    def show_batch_info(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏–∏"""
        batch_data = self.batch_combo.currentData()

        if not batch_data:
            self.batch_info.setText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é")
            self.qty_spin.setMaximum(0)
            return

        available = float(batch_data['quantity']) - float(batch_data['reserved_qty'] or 0)

        info = f"""
        –ü–∞—Ä—Ç–∏—è: {batch_data['batch_number']}
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch_data['quantity']:.2f}
        –†–µ–∑–µ—Ä–≤: {batch_data['reserved_qty'] or 0:.2f}
        –î–æ—Å—Ç—É–ø–Ω–æ: {available:.2f}
        –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏: {batch_data['purchase_price']:.2f} ‚ÇΩ
        –î–∞—Ç–∞ –ø—Ä–∏—Ö–æ–¥–∞: {batch_data['receipt_date']}
        –°–∫–ª–∞–¥: {batch_data['warehouse_code']}
        """

        self.batch_info.setText(info)
        self.qty_spin.setMaximum(available)

    def save_issue(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
        batch_data = self.batch_combo.currentData()

        if not batch_data:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–∏—é")
            return

        qty = self.qty_spin.value()
        if qty <= 0:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
            return

        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()

            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
            cursor.execute("""
                UPDATE warehouse_stock
                SET quantity = quantity - %s,
                    last_issue_date = %s,
                    updated_at = NOW()
                WHERE id = %s
            """, (qty, self.date_edit.date().toPyDate(), batch_data['id']))

            conn.commit()
            cursor.close()
            self.db.put_connection(conn)

            QMessageBox.information(self, "–£—Å–ø–µ—à–Ω–æ",
                                  f"–†–∞—Å—Ö–æ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω\n–ü–∞—Ä—Ç–∏—è: {batch_data['batch_number']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {qty:.2f}")
            self.accept()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: {e}")