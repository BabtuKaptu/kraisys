#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ - —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª—è—Ö
"""

import json
from database.connection import DatabaseConnection
import psycopg2.extras

def check_specifications_data():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ specifications"""
    db = DatabaseConnection()
    conn = db.get_connection()

    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    try:
        cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ specifications
        print("üîç –ë–ê–ó–û–í–´–ï –ú–û–î–ï–õ–ò:")
        print("=" * 80)

        cursor.execute("""
            SELECT s.id, s.variant_name, s.variants, s.lining_ids, s.perforation_ids, m.name as model_name
            FROM specifications s
            JOIN models m ON s.model_id = m.id
            WHERE s.is_default = true OR s.variant_name IS NULL OR s.variant_name = ''
            ORDER BY s.id
        """)

        base_models = cursor.fetchall()

        if not base_models:
            print("‚ùå –ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        for model in base_models:
            print(f"\nüìã ID: {model['id']} | –ú–æ–¥–µ–ª—å: {model['model_name']} | –í–∞—Ä–∏–∞–Ω—Ç: {model['variant_name'] or '–ë–ê–ó–û–í–´–ô'}")
            print("-" * 50)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –≤–∞—Ä–∏–∞–Ω—Ç—ã
            variants = model['variants']
            if variants:
                if isinstance(variants, str):
                    try:
                        variants = json.loads(variants)
                    except:
                        print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                        continue

                print("üìä –í–ê–†–ò–ê–ù–¢–´:")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª–∞–¥–∫–∏/—Å—Ç–µ–ª—å–∫–∏
                if 'lining' in variants:
                    lining_list = variants['lining']
                    print(f"üî∏ –ü–æ–¥–∫–ª–∞–¥–∫–∞/—Å—Ç–µ–ª—å–∫–∞ ({len(lining_list)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):")
                    for i, lining in enumerate(lining_list, 1):
                        print(f"   {i}. {lining.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {lining.get('id', 'N/A')})")
                else:
                    print("üî∏ –ü–æ–¥–∫–ª–∞–¥–∫–∞/—Å—Ç–µ–ª—å–∫–∞ –≤ variants: –ù–ï –ù–ê–ô–î–ï–ù–û")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏–∏
                if 'perforation' in variants:
                    perf_list = variants['perforation']
                    print(f"üî∏ –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è ({len(perf_list)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤):")
                    for i, perf in enumerate(perf_list, 1):
                        print(f"   {i}. {perf.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {perf.get('id', 'N/A')})")
                else:
                    print("üî∏ –ü–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è –≤ variants: –ù–ï –ù–ê–ô–î–ï–ù–û")

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö
                print(f"üî∏ –í—Å–µ –∫–ª—é—á–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: {list(variants.keys())}")
            else:
                print("‚ùå –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if model['lining_ids']:
                lining_ids = model['lining_ids']
                if isinstance(lining_ids, str):
                    try:
                        lining_ids = json.loads(lining_ids)
                    except:
                        pass
                print(f"üîπ lining_ids –ø–æ–ª–µ: {lining_ids}")
            else:
                print("üîπ lining_ids –ø–æ–ª–µ: –ø—É—Å—Ç–æ")

            if model['perforation_ids']:
                perf_ids = model['perforation_ids']
                if isinstance(perf_ids, str):
                    try:
                        perf_ids = json.loads(perf_ids)
                    except:
                        pass
                print(f"üîπ perforation_ids –ø–æ–ª–µ: {perf_ids}")
            else:
                print("üîπ perforation_ids –ø–æ–ª–µ: –ø—É—Å—Ç–æ")

        print("\n" + "=" * 80)
        print("üîç –í–ê–†–ò–ê–ù–¢–´ –ú–û–î–ï–õ–ï–ô:")
        print("=" * 80)

        cursor.execute("""
            SELECT s.id, s.variant_name, s.model_id, s.variants, m.name as model_name
            FROM specifications s
            JOIN models m ON s.model_id = m.id
            WHERE s.variant_name IS NOT NULL AND s.variant_name != ''
            ORDER BY s.model_id, s.id
        """)

        variants = cursor.fetchall()

        if variants:
            for variant in variants:
                print(f"\nüé® ID: {variant['id']} | –í–∞—Ä–∏–∞–Ω—Ç: {variant['variant_name']} | –ú–æ–¥–µ–ª—å: {variant['model_name']} (ID: {variant['model_id']})")
        else:
            print("üìù –í–∞—Ä–∏–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        if conn:
            db.put_connection(conn)

if __name__ == "__main__":
    check_specifications_data()