#!/usr/bin/env python
"""
–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""
from database.connection import DatabaseConnection
import json

def list_all_models():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –≤ –ë–î"""
    print("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

    db = DatabaseConnection()
    conn = db.get_connection()

    if not conn:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î")
        return

    try:
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        cursor.execute("""
            SELECT m.id, m.name, m.article, m.model_type, m.gender, m.created_at
            FROM models m
            ORDER BY m.created_at DESC
        """)

        models = cursor.fetchall()

        if not models:
            print("‚ùå –ú–æ–¥–µ–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        print("=" * 80)

        for model in models:
            model_id, name, article, model_type, gender, created_at = model
            print(f"\nüü¶ ID: {model_id}")
            print(f"   üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {name}")
            print(f"   üè∑Ô∏è  –ê—Ä—Ç–∏–∫—É–ª: {article}")
            print(f"   üëü –¢–∏–ø: {model_type}")
            print(f"   üë§ –ü–æ–ª: {gender}")
            print(f"   üìÖ –°–æ–∑–¥–∞–Ω–∞: {created_at}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π
            cursor.execute("""
                SELECT COUNT(*) FROM specifications s WHERE s.model_id = %s
            """, (model_id,))

            spec_count = cursor.fetchone()[0]
            print(f"   üìÑ –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π: {spec_count}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é
            if spec_count > 0:
                cursor.execute("""
                    SELECT s.parameters_data, s.created_at
                    FROM specifications s
                    WHERE s.model_id = %s
                    ORDER BY s.created_at DESC
                    LIMIT 1
                """, (model_id,))

                spec_result = cursor.fetchone()
                if spec_result:
                    parameters_data, spec_created = spec_result
                    print(f"   üìã –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {spec_created}")

                    if parameters_data:
                        try:
                            params = json.loads(parameters_data) if isinstance(parameters_data, str) else parameters_data

                            # –ö—Ä–∞—Ç–∫–æ –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
                            has_perforation = 'perforation_ids' in params and params['perforation_ids']
                            has_lining = 'lining_ids' in params and params['lining_ids']
                            has_lasting = 'lasting_type_id' in params and params['lasting_type_id']

                            features = []
                            if has_perforation:
                                perf_count = len(params['perforation_ids']) if isinstance(params['perforation_ids'], list) else 1
                                features.append(f"–ø–µ—Ä—Ñ–æ—Ä–∞—Ü–∏—è ({perf_count})")
                            if has_lining:
                                lining_count = len(params['lining_ids']) if isinstance(params['lining_ids'], list) else 1
                                features.append(f"–ø–æ–¥–∫–ª–∞–¥–∫–∞ ({lining_count})")
                            if has_lasting:
                                features.append("–∑–∞—Ç—è–∂–∫–∞")

                            if features:
                                print(f"   ‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(features)}")
                            else:
                                print("   ‚ö†Ô∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã")

                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")

        cursor.close()

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if conn:
            db.put_connection(conn)

if __name__ == "__main__":
    list_all_models()